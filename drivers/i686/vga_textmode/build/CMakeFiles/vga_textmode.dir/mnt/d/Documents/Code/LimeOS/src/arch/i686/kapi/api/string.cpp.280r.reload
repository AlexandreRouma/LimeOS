
;; Function strlen (_Z6strlenPc, funcdef_no=17, decl_uid=1455, cgraph_uid=6, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 9
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 14:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -2
   Insn 20: point = 3, n_alt = 0
  BB 3
   Insn 12: point = 4, n_alt = -1
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 5, n_alt = 4
   Insn 9: point = 7, n_alt = 0
   Insn 8: point = 9, n_alt = 0
   Insn 7: point = 10, n_alt = 0
  BB 4
   Insn 30: point = 11, n_alt = -1
   Insn 14: point = 11, n_alt = 1
  BB 2
   Insn 5: point = 11, n_alt = 1
   Insn 32: point = 11, n_alt = 0
 r87: [11..11]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [8..10]
 r93: [8..9]
Compressing live ranges: from 12 to 11 - 91%
Ranges after the compression:
 r87: [10..10]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [8..9]
 r93: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 32
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 20
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns


strlen

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 17 [flags]
;;  ref usage 	r0={7d,6u} r1={2d,1u} r2={1d} r6={1d,11u} r7={1d,5u} r16={1e} r17={4d,1u} r20={1d,1u,1e} 
;;    total ref usage 44{17d,25u,2e} in 13{13 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87
(note 3 1 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 32 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 32 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 15 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 len+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":6 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 92 93
(code_label 15 5 6 3 3 (nil) [1 uses])
(note 6 15 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 6 8 3 (set (reg/f:SI 1 dx [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":7 79 {*movsi_internal}
     (nil))
(insn 8 7 9 3 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 len+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":7 79 {*movsi_internal}
     (nil))
(insn 9 8 10 3 (parallel [
            (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
                (plus:SI (reg:SI 0 ax [93])
                    (reg/f:SI 1 dx [92])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":7 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [2 str+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 len+0 S4 A32]))
        (nil)))
(insn 10 9 11 3 (set (reg:QI 0 ax [orig:89 _2 ] [89])
        (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":7 81 {*movqi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _2 ] [89])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":7 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":7 548 {*jcc}
     (nil)
 -> 18)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 30 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 len+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 len+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":8 194 {*addsi_1}
     (nil))
(jump_insn 30 14 31 4 (set (pc)
        (label_ref 15)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":7 549 {jump}
     (nil)
 -> 15)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 31 30 18)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 90 91
(code_label 18 31 19 5 2 (nil) [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 27 5 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 len+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":9 79 {*movsi_internal}
     (nil))
(insn 27 20 28 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:91 <retval> ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":10 79 {*movsi_internal}
     (nil))
(insn 28 27 33 5 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":10 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 33 28 0 NOTE_INSN_DELETED)

;; Function strcmp (_Z6strcmpPcS_, funcdef_no=18, decl_uid=1458, cgraph_uid=7, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) q  (1) n {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) q  (1) n {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 50:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) q  (1) n {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 64: point = 0, n_alt = -1
   Insn 63: point = 0, n_alt = -2
   Insn 59: point = 1, n_alt = -2
  BB 7
   Insn 68: point = 4, n_alt = -1
   Insn 45: point = 4, n_alt = 3
  BB 3
   Insn 66: point = 5, n_alt = -1
   Insn 23: point = 5, n_alt = 3
  BB 9
   Insn 56: point = 6, n_alt = 3
  BB 5
   Insn 32: point = 7, n_alt = -1
   Insn 31: point = 7, n_alt = 1
   Insn 30: point = 8, n_alt = 0
  BB 8
   Insn 70: point = 9, n_alt = -1
   Insn 50: point = 9, n_alt = 1
  BB 6
   Insn 43: point = 9, n_alt = -1
   Insn 42: point = 9, n_alt = 0
   Insn 41: point = 10, n_alt = 4
   Insn 40: point = 12, n_alt = 0
   Insn 39: point = 14, n_alt = 0
   Insn 38: point = 15, n_alt = 0
   Insn 37: point = 16, n_alt = 4
   Insn 36: point = 18, n_alt = 0
   Insn 35: point = 20, n_alt = 0
   Insn 34: point = 21, n_alt = 0
  BB 4
   Insn 28: point = 22, n_alt = 1
  BB 2
   Insn 21: point = 22, n_alt = -1
   Insn 20: point = 22, n_alt = 1
   Insn 19: point = 23, n_alt = 0
   Insn 18: point = 24, n_alt = 1
   Insn 17: point = 25, n_alt = -2
   Insn 16: point = 26, n_alt = 0
   Insn 15: point = 26, n_alt = 0
   Insn 14: point = 26, n_alt = -2
   Insn 13: point = 27, n_alt = 0
   Insn 12: point = 27, n_alt = 0
   Insn 11: point = 27, n_alt = 1
   Insn 10: point = 28, n_alt = -2
   Insn 9: point = 29, n_alt = 0
   Insn 8: point = 29, n_alt = 0
   Insn 7: point = 29, n_alt = -2
   Insn 6: point = 29, n_alt = 0
   Insn 5: point = 29, n_alt = 0
   Insn 72: point = 29, n_alt = 0
 r87: [26..29]
 r88: [17..18]
 r89: [9..16]
 r90: [11..12]
 r91: [9..10]
 r92: [2..6]
 r93: [0..1]
 r94: [27..28]
 r95: [24..25]
 r96: [22..23]
 r97: [7..8]
 r98: [19..21]
 r99: [19..20]
 r100: [13..15]
 r101: [13..14]
Compressing live ranges: from 30 to 22 - 73%
Ranges after the compression:
 r87: [20..21]
 r88: [12..13]
 r89: [6..11]
 r90: [8..9]
 r91: [6..7]
 r92: [2..3]
 r93: [0..1]
 r94: [20..21]
 r95: [18..19]
 r96: [16..17]
 r97: [4..5]
 r98: [14..15]
 r99: [14..15]
 r100: [10..11]
 r101: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 72
changing reg in insn 14
changing reg in insn 7
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 56
changing reg in insn 45
changing reg in insn 23
changing reg in insn 59
changing reg in insn 59
changing reg in insn 63
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
deleting insn with uid = 7.
deleting insn with uid = 10.
deleting insn with uid = 14.
deleting insn with uid = 17.
deleting insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 15.


strcmp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={14d,12u} r1={5d,2u} r2={4d,1u} r3={1d,2u} r6={1d,25u} r7={7d,22u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={2e} r17={13d,3u} r18={2d} r19={2d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 258{186d,68u,4e} in 37{35 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 94 95 96
(note 3 1 72 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 72 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 72 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":13 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str_a+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":13 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":13 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":13 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 9 12 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 len_a+0 S4 A32])
        (reg:SI 0 ax [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":13 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":14 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 13 12 15 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str_b+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":14 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 15 13 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":14 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 16 15 18 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":14 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 18 16 19 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 len_b+0 S4 A32])
        (reg:SI 0 ax [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":14 79 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 len_a+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":15 79 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [96])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 len_b+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":15 11 {*cmpsi_1}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":15 548 {*jcc}
     (nil)
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 66 3 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":16 81 {*movqi_internal}
     (nil))
(jump_insn 66 23 67 3 (set (pc)
        (label_ref 57)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":16 549 {jump}
     (nil)
 -> 57)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

(barrier 67 66 26)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 26 67 27 4 6 (nil) [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 51 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":18 79 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              8 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97
(code_label 51 28 29 5 10 (nil) [1 uses])
(note 29 51 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":18 79 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [97])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [1 len_a+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":18 11 {*cmpsi_1}
     (nil))
(jump_insn 32 31 33 5 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":18 548 {*jcc}
     (nil)
 -> 54)
;;  succ:       9
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 91 98 99 100 101
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg/f:SI 1 dx [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str_a+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 79 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 79 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
                (plus:SI (reg:SI 0 ax [99])
                    (reg/f:SI 1 dx [98])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [2 str_a+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 37 36 38 6 (set (reg:QI 1 dx [orig:89 _2 ] [89])
        (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 81 {*movqi_internal}
     (nil))
(insn 38 37 39 6 (set (reg/f:SI 2 cx [100])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str_b+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 79 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 79 {*movsi_internal}
     (nil))
(insn 40 39 41 6 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
                (plus:SI (reg:SI 0 ax [101])
                    (reg/f:SI 2 cx [100])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [2 str_b+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 41 40 42 6 (set (reg:QI 0 ax [orig:91 _4 ] [91])
        (mem:QI (reg/f:SI 0 ax [orig:90 _3 ] [90]) [0 *_3+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 81 {*movqi_internal}
     (nil))
(insn 42 41 43 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:89 _2 ] [89])
            (reg:QI 0 ax [orig:91 _4 ] [91]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 9 {*cmpqi_1}
     (nil))
(jump_insn 43 42 44 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":19 548 {*jcc}
     (nil)
 -> 48)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 68 7 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":20 81 {*movqi_internal}
     (nil))
(jump_insn 68 45 69 7 (set (pc)
        (label_ref 57)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":20 549 {jump}
     (nil)
 -> 57)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

(barrier 69 68 48)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 48 69 49 8 9 (nil) [1 uses])
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 70 8 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":18 194 {*addsi_1}
     (nil))
(jump_insn 70 50 71 8 (set (pc)
        (label_ref 51)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":18 549 {jump}
     (nil)
 -> 51)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 54)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(code_label 54 71 55 9 8 (nil) [1 uses])
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":23 81 {*movqi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [always] 
;;              7 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 0 [ax] 93
(code_label 57 56 58 10 7 (nil) [2 uses])
(note 58 57 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 58 64 10 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:93 <retval> ] [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":24 81 {*movqi_internal}
     (nil))
(insn 64 63 73 10 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":24 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 73 64 0 NOTE_INSN_DELETED)

;; Function dumpHexByte (_Z11dumpHexByteh, funcdef_no=19, decl_uid=1460, cgraph_uid=8, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=15,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=106 from oldreg=88, assigning class GENERAL_REGS to r106
   11: {r106:SI=r106:SI&0xf;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   36: r106:SI=r88:SI
    Inserting insn reload after:
   37: r89:SI=r106:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 16:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =qm  (1) 0  (2) cI {*lshrqi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 23:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 32: point = 0, n_alt = -1
   Insn 31: point = 0, n_alt = -2
   Insn 27: point = 1, n_alt = -2
   Insn 24: point = 3, n_alt = 0
   Insn 23: point = 4, n_alt = 8
   Insn 22: point = 5, n_alt = 0
   Insn 21: point = 6, n_alt = 4
   Insn 20: point = 8, n_alt = 0
   Insn 19: point = 10, n_alt = 0
   Insn 18: point = 12, n_alt = 0
   Insn 17: point = 14, n_alt = 4
   Insn 16: point = 15, n_alt = 8
   Insn 15: point = 16, n_alt = 4
   Insn 14: point = 18, n_alt = 0
   Insn 13: point = 19, n_alt = 3
   Insn 12: point = 21, n_alt = 0
   Insn 37: point = 22, n_alt = -2
	Hard reg 3 is preferable by r106 with profit 1000
   Insn 11: point = 24, n_alt = 0
   Insn 36: point = 24, n_alt = -2
	Hard reg 3 is preferable by r106 with profit 1000
	Hard reg 1 is preferable by r106 with profit 1000
   Insn 10: point = 26, n_alt = 0
   Insn 9: point = 27, n_alt = 1
   Insn 8: point = 28, n_alt = 0
   Insn 4: point = 29, n_alt = 8
   Insn 3: point = 30, n_alt = 0
   Insn 2: point = 32, n_alt = 0
   Insn 34: point = 33, n_alt = 0
 r87: [9..33]
 r88: [25..26]
 r89: [17..22]
 r90: [15..19]
 r91: [15..16]
 r92: [11..12]
 r93: [7..10]
 r94: [4..6]
 r95: [2..3]
 r96: [0..1]
 r97: [31..32]
 r98: [29..30]
 r99: [27..28]
 r100: [20..21]
 r101: [17..18]
 r102: [13..14]
 r103: [7..8]
 r104: [4..5]
 r106: [23..24]
Compressing live ranges: from 34 to 30 - 88%
Ranges after the compression:
 r87: [8..29]
 r88: [22..23]
 r89: [16..19]
 r90: [14..17]
 r91: [14..15]
 r92: [10..11]
 r93: [6..9]
 r94: [4..5]
 r95: [2..3]
 r96: [0..1]
 r97: [28..29]
 r98: [26..27]
 r99: [24..25]
 r100: [18..19]
 r101: [16..17]
 r102: [12..13]
 r103: [6..7]
 r104: [4..5]
 r106: [20..21]

********** Assignment #1: **********

	 Assigning to 106 (cl=GENERAL_REGS, orig=88, freq=3000, tfirst=106, tfreq=3000)...
	   Assign 3 to reload r106 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=-4, prev_offset=-4)
changing reg in insn 34
changing reg in insn 20
changing reg in insn 14
changing reg in insn 8
changing reg in insn 10
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 31
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
deleting insn with uid = 37.
deleting insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns


dumpHexByte

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 17 [flags]
;;  ref usage 	r0={6d,8u} r1={12d,11u} r2={2d,1u} r3={2d,2u} r6={1d,10u} r7={1d,2u} r17={4d} r20={1d,1u,2e} 
;;    total ref usage 66{29d,35u,2e} in 24{24 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104
(note 6 1 34 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 34 6 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 34 3 2 (set (reg:SI 1 dx [97])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 n+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":28 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 1 dx [98])
        (reg:QI 1 dx [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":28 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S1 A32])
        (reg:QI 1 dx [98])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":28 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 1 dx [99])
        (plus:SI (reg:SI 0 ax [87])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7ff72fee6cf0 *.LC0>)
                    ] UNSPEC_GOTOFF)))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":29 191 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7ff72fee6cf0 *.LC0>)
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 rtn+0 S4 A32])
        (reg/f:SI 1 dx [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":29 79 {*movsi_internal}
     (nil))
(insn 10 9 36 2 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 n+0 S1 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 123 {*zero_extendqisi2}
     (nil))
(insn 36 10 11 2 (set (reg:SI 3 bx [orig:88 _1 ] [88])
        (reg:SI 1 dx [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 79 {*movsi_internal}
     (nil))
(insn 11 36 12 2 (parallel [
            (set (reg:SI 3 bx [orig:88 _1 ] [88])
                (and:SI (reg:SI 3 bx [orig:88 _1 ] [88])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 342 {*andsi_1}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 1 dx [100])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 rtn+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 2 cx [orig:90 _3 ] [90])
                (plus:SI (reg/f:SI 1 dx [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [2 rtn+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 14 13 15 2 (set (reg/f:SI 1 dx [101])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HEX_ALPHABET")  <var_decl 0x7ff72fe405a0 HEX_ALPHABET>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 79 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:QI 1 dx [orig:91 _4 ] [91])
        (mem/j:QI (plus:SI (reg/f:SI 1 dx [101])
                (reg:SI 3 bx [orig:89 _2 ] [89])) [0 HEX_ALPHABET S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 81 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (mem:QI (reg/f:SI 2 cx [orig:90 _3 ] [90]) [0 *_3+0 S1 A8])
        (reg:QI 1 dx [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":30 81 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:QI 1 dx [102])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 n+0 S1 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":31 81 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg:QI 1 dx [orig:92 _5 ] [92])
                (lshiftrt:QI (reg:QI 1 dx [102])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":31 477 {*lshrqi3_1}
     (expr_list:REG_EQUAL (lshiftrt:QI (mem/c:QI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 n+0 S1 A32])
            (const_int 4 [0x4]))
        (nil)))
(insn 19 18 20 2 (set (reg:SI 1 dx [orig:93 _6 ] [93])
        (zero_extend:SI (reg:QI 1 dx [orig:92 _5 ] [92]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":31 123 {*zero_extendqisi2}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 0 ax [103])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HEX_ALPHABET")  <var_decl 0x7ff72fe405a0 HEX_ALPHABET>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":31 79 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:QI 1 dx [orig:94 _7 ] [94])
        (mem/j:QI (plus:SI (reg/f:SI 0 ax [103])
                (reg:SI 1 dx [orig:93 _6 ] [93])) [0 HEX_ALPHABET S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":31 81 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 rtn+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":31 79 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (mem:QI (reg/f:SI 0 ax [104]) [0 *rtn_8+0 S1 A8])
        (reg:QI 1 dx [orig:94 _7 ] [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":31 81 {*movqi_internal}
     (nil))
(insn 24 23 31 2 (set (reg/f:SI 0 ax [orig:95 _13 ] [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 rtn+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":32 79 {*movsi_internal}
     (nil))
(insn 31 24 32 2 (set (reg/i:SI 0 ax)
        (reg/f:SI 0 ax [orig:96 <retval> ] [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":33 79 {*movsi_internal}
     (nil))
(insn 32 31 35 2 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":33 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 35 32 0 NOTE_INSN_DELETED)

;; Function itoa (_Z4itoajh, funcdef_no=20, decl_uid=1463, cgraph_uid=9, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) Ts {*leasi} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =a  (1) =&d  (2) 0  (3) rm {*udivmodsi4}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) Ts {*leasi} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 59:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 61:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 67:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 69:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 75:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 81:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 83:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            1 Early clobber: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 106:  (0) =a  (1) =&d  (2) 0  (3) rm {*udivmodsi4}
      Creating newreg=124 from oldreg=119, assigning class DREG to r124
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 109:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 127:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 140: point = 0, n_alt = -1
   Insn 139: point = 0, n_alt = 0
  BB 3
   Insn 142: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = 0
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = 0
   Insn 15: point = 1, n_alt = 0
   Insn 14: point = 2, n_alt = 0
   Insn 13: point = 3, n_alt = 0
  BB 7
   Insn 131: point = 4, n_alt = 0
   Insn 130: point = 4, n_alt = 0
   Insn 129: point = 4, n_alt = -2
   Insn 128: point = 5, n_alt = 0
   Insn 127: point = 6, n_alt = 3
   Insn 126: point = 7, n_alt = 0
   Insn 125: point = 7, n_alt = 0
   Insn 124: point = 7, n_alt = 0
   Insn 123: point = 7, n_alt = -2
   Insn 122: point = 7, n_alt = 0
   Insn 121: point = 7, n_alt = 0
   Insn 120: point = 8, n_alt = 3
   Insn 119: point = 9, n_alt = 0
  BB 5
   Insn 32: point = 10, n_alt = -1
   Insn 31: point = 10, n_alt = 1
  BB 6
   Insn 144: point = 11, n_alt = -1
   Insn 113: point = 11, n_alt = 0
   Insn 112: point = 11, n_alt = 0
   Insn 111: point = 11, n_alt = -2
   Insn 110: point = 11, n_alt = 0
   Insn 109: point = 12, n_alt = 3
   Insn 108: point = 13, n_alt = 0
   Insn 107: point = 13, n_alt = 1
   Insn 106: point = 14, n_alt = 0
   Insn 105: point = 16, n_alt = 0
   Insn 104: point = 17, n_alt = 0
   Insn 103: point = 18, n_alt = 0
   Insn 102: point = 19, n_alt = 0
   Insn 101: point = 20, n_alt = 0
   Insn 100: point = 20, n_alt = 0
   Insn 99: point = 20, n_alt = -2
   Insn 98: point = 20, n_alt = 0
   Insn 97: point = 21, n_alt = 3
   Insn 96: point = 22, n_alt = 0
   Insn 95: point = 22, n_alt = 0
   Insn 94: point = 22, n_alt = 0
   Insn 93: point = 22, n_alt = -2
   Insn 92: point = 22, n_alt = 0
   Insn 91: point = 23, n_alt = 3
   Insn 90: point = 24, n_alt = 0
   Insn 89: point = 25, n_alt = 3
   Insn 88: point = 26, n_alt = 0
   Insn 87: point = 26, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 26, n_alt = -2
   Insn 84: point = 26, n_alt = 0
   Insn 83: point = 27, n_alt = 3
   Insn 82: point = 28, n_alt = 0
   Insn 81: point = 29, n_alt = 3
   Insn 80: point = 30, n_alt = 0
   Insn 79: point = 30, n_alt = 0
   Insn 78: point = 30, n_alt = 0
   Insn 77: point = 30, n_alt = -2
   Insn 76: point = 30, n_alt = 0
   Insn 75: point = 31, n_alt = 3
   Insn 74: point = 32, n_alt = 0
   Insn 73: point = 32, n_alt = 0
   Insn 72: point = 32, n_alt = 0
   Insn 71: point = 32, n_alt = -2
   Insn 70: point = 32, n_alt = 0
   Insn 69: point = 33, n_alt = 3
   Insn 68: point = 34, n_alt = 0
   Insn 67: point = 35, n_alt = 3
   Insn 66: point = 36, n_alt = 0
   Insn 65: point = 36, n_alt = 0
   Insn 64: point = 36, n_alt = 0
   Insn 63: point = 36, n_alt = -2
   Insn 62: point = 36, n_alt = 0
   Insn 61: point = 37, n_alt = 3
   Insn 60: point = 38, n_alt = 0
   Insn 59: point = 39, n_alt = 3
   Insn 58: point = 40, n_alt = 0
   Insn 57: point = 40, n_alt = 0
   Insn 56: point = 40, n_alt = 0
   Insn 55: point = 40, n_alt = -2
   Insn 54: point = 40, n_alt = 0
   Insn 53: point = 41, n_alt = 3
   Insn 52: point = 42, n_alt = 0
   Insn 51: point = 43, n_alt = 0
   Insn 50: point = 43, n_alt = 0
   Insn 49: point = 45, n_alt = 4
   Insn 48: point = 47, n_alt = 0
   Insn 47: point = 49, n_alt = 0
   Insn 46: point = 50, n_alt = 0
   Insn 45: point = 51, n_alt = 0
   Insn 44: point = 51, n_alt = 0
   Insn 43: point = 51, n_alt = -2
   Insn 42: point = 51, n_alt = 0
   Insn 41: point = 52, n_alt = 3
   Insn 40: point = 53, n_alt = 0
   Insn 39: point = 54, n_alt = 0
   Insn 38: point = 55, n_alt = 0
   Insn 37: point = 55, n_alt = 1
   Insn 36: point = 56, n_alt = 0
   Insn 35: point = 58, n_alt = 0
   Insn 34: point = 59, n_alt = 0
  BB 4
   Insn 29: point = 61, n_alt = 0
   Insn 28: point = 61, n_alt = 0
   Insn 27: point = 61, n_alt = -2
   Insn 26: point = 61, n_alt = 0
   Insn 25: point = 62, n_alt = 3
   Insn 24: point = 63, n_alt = 0
  BB 2
   Insn 11: point = 64, n_alt = -1
   Insn 10: point = 64, n_alt = 1
   Insn 9: point = 64, n_alt = 1
   Insn 8: point = 65, n_alt = 0
   Insn 4: point = 66, n_alt = 8
   Insn 3: point = 67, n_alt = 0
   Insn 2: point = 69, n_alt = 0
   Insn 146: point = 70, n_alt = 0
 r87: [0..70]
 r88: [57..59]
 r89: [44..45]
 r90: [42..43]
 r91: [15..17]
 r92: [68..69]
 r93: [66..67]
 r94: [64..65]
 r95: [1..2]
 r96: [61..62]
 r98: [57..58]
 r99: [55..57]
 r100: [56..56]
 r101: [53..54]
 r102: [51..52]
 r103: [48..50]
 r104: [48..49]
 r105: [46..47]
 r106: [40..41]
 r107: [38..39]
 r108: [36..37]
 r109: [34..35]
 r110: [32..33]
 r111: [30..31]
 r112: [28..29]
 r113: [26..27]
 r114: [24..25]
 r115: [22..23]
 r116: [20..21]
 r117: [18..19]
 r118: [13..14]
 r120: [15..16]
 r121: [11..12]
 r122: [7..8]
 r123: [5..6]
 r124: [14..15]
Compressing live ranges: from 71 to 60 - 84%
Ranges after the compression:
 r87: [0..59]
 r88: [50..51]
 r89: [38..39]
 r90: [36..37]
 r91: [10..11]
 r92: [58..59]
 r93: [56..57]
 r94: [54..55]
 r95: [0..1]
 r96: [52..53]
 r98: [50..51]
 r99: [48..50]
 r100: [49..49]
 r101: [46..47]
 r102: [44..45]
 r103: [42..43]
 r104: [42..43]
 r105: [40..41]
 r106: [34..35]
 r107: [32..33]
 r108: [30..31]
 r109: [28..29]
 r110: [26..27]
 r111: [24..25]
 r112: [22..23]
 r113: [20..21]
 r114: [18..19]
 r115: [16..17]
 r116: [14..15]
 r117: [12..13]
 r118: [8..9]
 r120: [10..11]
 r121: [6..7]
 r122: [4..5]
 r123: [2..3]
 r124: [9..10]

********** Assignment #1: **********

	 Assigning to 124 (cl=DREG, orig=119, freq=1000, tfirst=124, tfreq=1000)...
	 Trying 1: spill 91(freq=2000)	 Now best 1(cost=1000, bad_spills=0, insn_pseudos=1)

      Spill r91(hr=1, freq=2000) for r124
	   Assign 1 to reload r124 (freq=1000)
  Reassigning non-reload pseudos
	   Assign 2 to r91 (freq=2000)

********** Undoing inheritance #1: **********


********** Pseudos coalescing #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            1 Early clobber: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =a  (1) =&d  (2) 0  (3) rm {*udivmodsi4}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) qm {*zero_extendqisi2}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 146
changing reg in insn 129
changing reg in insn 123
changing reg in insn 111
changing reg in insn 99
changing reg in insn 93
changing reg in insn 85
changing reg in insn 77
changing reg in insn 71
changing reg in insn 63
changing reg in insn 55
changing reg in insn 46
changing reg in insn 43
changing reg in insn 39
changing reg in insn 27
changing reg in insn 17
changing reg in insn 14
changing reg in insn 34
changing reg in insn 36
changing reg in insn 36
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 104
changing reg in insn 106
changing reg in insn 106
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 25
changing reg in insn 26
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 120
changing reg in insn 121
changing reg in insn 127
changing reg in insn 128
deleting insn with uid = 17.
deleting insn with uid = 27.
deleting insn with uid = 43.
deleting insn with uid = 55.
deleting insn with uid = 63.
deleting insn with uid = 71.
deleting insn with uid = 77.
deleting insn with uid = 85.
deleting insn with uid = 93.
deleting insn with uid = 99.
deleting insn with uid = 111.
deleting insn with uid = 123.
deleting insn with uid = 129.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 112.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 130.


itoa

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={45d,33u} r1={17d,2u} r2={16d,4u} r3={1d,16u} r6={1d,43u} r7={48d,94u} r8={13d} r9={13d} r10={13d} r11={13d} r12={13d} r13={13d} r14={13d} r15={13d} r17={62d,2u} r18={13d} r19={13d} r20={1d,1u} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={13d} r38={13d} r39={13d} r40={13d} r41={13d} r42={13d} r43={13d} r44={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} 
;;    total ref usage 1296{1101d,195u,0e} in 107{94 regular + 13 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 92 93 94
(note 6 1 146 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 146 6 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 146 3 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 base+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":35 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [93])
        (reg:QI 0 ax [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":35 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 base+0 S1 A32])
        (reg:QI 0 ax [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":35 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [1 _n+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":36 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
        (reg:SI 0 ax [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":36 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":37 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":37 548 {*jcc}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":38 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 14 13 15 3 (set (reg/f:SI 0 ax [95])
        (plus:SI (reg:SI 3 bx [87])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7ff72fee6e10 *.LC1>)
                    ] UNSPEC_GOTOFF)))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":38 191 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7ff72fee6e10 *.LC1>)
        (nil)))
(insn 15 14 16 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":38 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 16 15 18 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":38 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 18 16 19 3 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1EPc") [flags 0x1]  <function_decl 0x7ff72fe3df00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":38 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 19 18 142 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":38 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 142 19 143 3 (set (pc)
        (label_ref 138)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":38 549 {jump}
     (nil)
 -> 138)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 143 142 22)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96
(code_label 22 143 23 4 14 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 25 24 26 4 (parallel [
            (set (reg:SI 0 ax [96])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 194 {*addsi_1}
     (nil))
(insn 26 25 28 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 28 26 29 4 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 29 28 114 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 114 29 30 5 17 (nil) [1 uses])
(note 30 114 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":41 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 32 31 33 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":41 548 {*jcc}
     (nil)
 -> 117)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:SI 2 cx [orig:88 _1 ] [88])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 base+0 S1 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":42 123 {*zero_extendqisi2}
     (nil))
(insn 35 34 36 6 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":42 79 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg:SI 0 ax [100])
                (udiv:SI (reg:SI 0 ax [98])
                    (reg:SI 2 cx [orig:88 _1 ] [88])))
            (set (reg:SI 1 dx [99])
                (umod:SI (reg:SI 0 ax [98])
                    (reg:SI 2 cx [orig:88 _1 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":42 326 {*udivmodsi4}
     (nil))
(insn 37 36 38 6 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 digit+0 S4 A32])
        (reg:SI 1 dx [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":42 79 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 39 38 40 6 (set (reg/f:SI 0 ax [101])
        (plus:SI (reg:SI 3 bx [87])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7ff72fee6ea0 *.LC2>)
                    ] UNSPEC_GOTOFF)))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 191 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7ff72fee6ea0 *.LC2>)
        (nil)))
(insn 40 39 41 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [101])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 41 40 42 6 (parallel [
            (set (reg:SI 0 ax [102])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 194 {*addsi_1}
     (nil))
(insn 42 41 44 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [102])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 44 42 45 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1EPc") [flags 0x1]  <function_decl 0x7ff72fe3df00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 45 44 46 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 46 45 47 6 (set (reg/f:SI 1 dx [103])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HEX_ALPHABET")  <var_decl 0x7ff72fe405a0 HEX_ALPHABET>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 79 {*movsi_internal}
     (nil))
(insn 47 46 48 6 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 digit+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 79 {*movsi_internal}
     (nil))
(insn 48 47 49 6 (parallel [
            (set (reg/f:SI 0 ax [105])
                (plus:SI (reg:SI 0 ax [104])
                    (reg/f:SI 1 dx [103])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 194 {*addsi_1}
     (nil))
(insn 49 48 50 6 (set (reg:QI 0 ax [orig:89 _2 ] [89])
        (mem/j:QI (reg/f:SI 0 ax [105]) [0 HEX_ALPHABET S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 81 {*movqi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:SI 0 ax [orig:90 _3 ] [90])
        (sign_extend:SI (reg:QI 0 ax [orig:89 _2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 134 {extendqisi2}
     (nil))
(insn 51 50 52 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 52 51 53 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:90 _3 ] [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 53 52 54 6 (parallel [
            (set (reg:SI 0 ax [106])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 194 {*addsi_1}
     (nil))
(insn 54 53 56 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [106])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 56 54 57 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringpLEc") [flags 0x1]  <function_decl 0x7ff72fe37700 operator+=>) [0 operator+= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 57 56 58 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":44 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 58 57 59 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 59 58 60 6 (parallel [
            (set (reg:SI 0 ax [107])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (nil))
(insn 60 59 61 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [107])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 61 60 62 6 (parallel [
            (set (reg:SI 0 ax [108])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (nil))
(insn 62 61 64 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [108])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 64 62 65 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 65 64 66 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 66 65 67 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 67 66 68 6 (parallel [
            (set (reg:SI 0 ax [109])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (nil))
(insn 68 67 69 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [109])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 69 68 70 6 (parallel [
            (set (reg:SI 0 ax [110])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (nil))
(insn 70 69 72 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [110])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 72 70 73 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringpLES_") [flags 0x1]  <function_decl 0x7ff72fe37600 operator+=>) [0 operator+= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 73 72 74 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 74 73 75 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 75 74 76 6 (parallel [
            (set (reg:SI 0 ax [111])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (nil))
(insn 76 75 78 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [111])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 78 76 79 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 79 78 80 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":45 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 80 79 81 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 81 80 82 6 (parallel [
            (set (reg:SI 0 ax [112])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (nil))
(insn 82 81 83 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [112])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 83 82 84 6 (parallel [
            (set (reg:SI 0 ax [113])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (nil))
(insn 84 83 86 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [113])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 86 84 87 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 87 86 88 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 88 87 89 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 89 88 90 6 (parallel [
            (set (reg:SI 0 ax [114])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (nil))
(insn 90 89 91 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [114])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 91 90 92 6 (parallel [
            (set (reg:SI 0 ax [115])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (nil))
(insn 92 91 94 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [115])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 94 92 95 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringaSES_") [flags 0x1]  <function_decl 0x7ff72fe37d00 operator=>) [0 operator= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 95 94 96 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 96 95 97 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 97 96 98 6 (parallel [
            (set (reg:SI 0 ax [116])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (nil))
(insn 98 97 100 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [116])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 100 98 101 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 101 100 102 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":46 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 102 101 103 6 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 digit+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":47 79 {*movsi_internal}
     (nil))
(insn 103 102 104 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
                (minus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
                    (reg:SI 0 ax [117])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":47 244 {*subsi_1}
     (nil))
(insn 104 103 105 6 (set (reg:SI 2 cx [orig:91 _4 ] [91])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 base+0 S1 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":48 123 {*zero_extendqisi2}
     (nil))
(insn 105 104 106 6 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":48 79 {*movsi_internal}
     (nil))
(insn 106 105 107 6 (parallel [
            (set (reg:SI 0 ax [118])
                (udiv:SI (reg:SI 0 ax [120])
                    (reg:SI 2 cx [orig:91 _4 ] [91])))
            (set (reg:SI 1 dx [119])
                (umod:SI (reg:SI 0 ax [120])
                    (reg:SI 2 cx [orig:91 _4 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":48 326 {*udivmodsi4}
     (nil))
(insn 107 106 108 6 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
        (reg:SI 0 ax [118])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":48 79 {*movsi_internal}
     (nil))
(insn 108 107 109 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 109 108 110 6 (parallel [
            (set (reg:SI 0 ax [121])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 194 {*addsi_1}
     (nil))
(insn 110 109 112 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [121])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 112 110 113 6 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 113 112 144 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":43 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 144 113 145 6 (set (pc)
        (label_ref 114)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":41 549 {jump}
     (nil)
 -> 114)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 145 144 117)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 123
(code_label 117 145 118 7 16 (nil) [1 uses])
(note 118 117 119 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":50 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 120 119 121 7 (parallel [
            (set (reg:SI 0 ax [122])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":50 194 {*addsi_1}
     (nil))
(insn 121 120 122 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [122])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":50 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 122 121 124 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":50 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 124 122 125 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":50 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 125 124 126 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":50 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 126 125 127 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 127 126 128 7 (parallel [
            (set (reg:SI 0 ax [123])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 194 {*addsi_1}
     (nil))
(insn 128 127 130 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [123])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 130 128 131 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 131 130 138 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":40 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU)
;;              3 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 138 131 141 8 13 (nil) [1 uses])
(note 141 138 139 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 139 141 140 8 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":51 79 {*movsi_internal}
     (nil))
(insn 140 139 147 8 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":51 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 147 140 0 NOTE_INSN_DELETED)

;; Function strcnt (_Z6strcntPcc, funcdef_no=21, decl_uid=1466, cgraph_uid=10, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 32:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 46: point = 0, n_alt = -1
   Insn 45: point = 0, n_alt = -2
   Insn 41: point = 1, n_alt = -2
   Insn 38: point = 3, n_alt = 0
  BB 3
   Insn 20: point = 4, n_alt = -1
   Insn 19: point = 4, n_alt = 1
   Insn 18: point = 5, n_alt = 0
  BB 6
   Insn 48: point = 6, n_alt = -1
   Insn 32: point = 6, n_alt = 1
  BB 5
   Insn 29: point = 6, n_alt = 1
  BB 4
   Insn 27: point = 6, n_alt = -1
   Insn 26: point = 6, n_alt = 0
   Insn 25: point = 7, n_alt = 4
   Insn 24: point = 9, n_alt = 0
   Insn 23: point = 11, n_alt = 0
   Insn 22: point = 12, n_alt = 0
  BB 2
   Insn 16: point = 13, n_alt = 1
   Insn 15: point = 13, n_alt = 1
   Insn 14: point = 14, n_alt = -2
   Insn 13: point = 15, n_alt = 0
   Insn 12: point = 15, n_alt = 0
   Insn 11: point = 15, n_alt = -2
   Insn 10: point = 16, n_alt = 0
   Insn 9: point = 16, n_alt = 0
   Insn 8: point = 16, n_alt = 1
   Insn 4: point = 16, n_alt = 8
   Insn 3: point = 17, n_alt = 0
   Insn 2: point = 19, n_alt = 0
   Insn 50: point = 20, n_alt = 0
 r87: [15..20]
 r88: [8..9]
 r89: [6..7]
 r90: [2..3]
 r91: [0..1]
 r92: [18..19]
 r93: [16..17]
 r94: [13..14]
 r95: [4..5]
 r96: [10..12]
 r97: [10..11]
Compressing live ranges: from 21 to 18 - 85%
Ranges after the compression:
 r87: [14..17]
 r88: [8..9]
 r89: [6..7]
 r90: [2..3]
 r91: [0..1]
 r92: [16..17]
 r93: [14..15]
 r94: [12..13]
 r95: [4..5]
 r96: [10..11]
 r97: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 50
changing reg in insn 11
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 38
changing reg in insn 41
changing reg in insn 41
changing reg in insn 45
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
deleting insn with uid = 14.
deleting insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


strcnt

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,9u} r1={5d,3u} r2={2d} r3={1d,1u} r6={1d,23u} r7={4d,13u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1e} r17={9d,2u} r18={1d} r19={1d} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 156{102d,52u,2e} in 27{26 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 92 93 94
(note 6 1 50 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 50 6 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 50 3 2 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 c+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":53 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 1 dx [93])
        (reg:QI 1 dx [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":53 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 c+0 S1 A32])
        (reg:QI 1 dx [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":53 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 count+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":54 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":55 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 10 9 11 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":55 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 11 10 12 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [87])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":55 79 {*movsi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":55 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 13 12 15 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":55 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 13 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 len+0 S4 A32])
        (reg:SI 0 ax [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":55 79 {*movsi_internal}
     (nil))
(insn 16 15 33 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":56 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95
(code_label 33 16 17 3 22 (nil) [1 uses])
(note 17 33 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":56 79 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [95])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 len+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":56 11 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":56 548 {*jcc}
     (nil)
 -> 36)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 96 97
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:SI 1 dx [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":57 79 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":57 79 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
                (plus:SI (reg:SI 0 ax [97])
                    (reg/f:SI 1 dx [96])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":57 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [2 str+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32]))
        (nil)))
(insn 25 24 26 4 (set (reg:QI 0 ax [orig:89 _2 ] [89])
        (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":57 81 {*movqi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 c+0 S1 A32])
            (reg:QI 0 ax [orig:89 _2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":57 9 {*cmpqi_1}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":57 548 {*jcc}
     (nil)
 -> 30)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 count+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 count+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":58 194 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 29 31 6 21 (nil) [1 uses])
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 48 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":56 194 {*addsi_1}
     (nil))
(jump_insn 48 32 49 6 (set (pc)
        (label_ref 33)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":56 549 {jump}
     (nil)
 -> 33)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 49 48 36)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 90 91
(code_label 36 49 37 7 20 (nil) [1 uses])
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 45 7 (set (reg:SI 0 ax [orig:90 _15 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 count+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":61 79 {*movsi_internal}
     (nil))
(insn 45 38 46 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:91 <retval> ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":62 79 {*movsi_internal}
     (nil))
(insn 46 45 51 7 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":62 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 51 46 0 NOTE_INSN_DELETED)

;; Function strfio (_Z6strfioPcc, funcdef_no=22, decl_uid=1469, cgraph_uid=11, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 34:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 48: point = 0, n_alt = -1
   Insn 47: point = 0, n_alt = -2
   Insn 43: point = 1, n_alt = -2
  BB 5
   Insn 50: point = 4, n_alt = -1
   Insn 29: point = 4, n_alt = 0
  BB 7
   Insn 40: point = 5, n_alt = 0
  BB 3
   Insn 20: point = 6, n_alt = -1
   Insn 19: point = 6, n_alt = 1
   Insn 18: point = 7, n_alt = 0
  BB 6
   Insn 52: point = 8, n_alt = -1
   Insn 34: point = 8, n_alt = 1
  BB 4
   Insn 27: point = 8, n_alt = -1
   Insn 26: point = 8, n_alt = 0
   Insn 25: point = 9, n_alt = 4
   Insn 24: point = 11, n_alt = 0
   Insn 23: point = 13, n_alt = 0
   Insn 22: point = 14, n_alt = 0
  BB 2
   Insn 16: point = 15, n_alt = 1
   Insn 15: point = 15, n_alt = 1
   Insn 14: point = 16, n_alt = -2
   Insn 13: point = 17, n_alt = 0
   Insn 12: point = 17, n_alt = 0
   Insn 11: point = 17, n_alt = -2
   Insn 10: point = 18, n_alt = 0
   Insn 9: point = 18, n_alt = 0
   Insn 8: point = 18, n_alt = 1
   Insn 4: point = 18, n_alt = 8
   Insn 3: point = 19, n_alt = 0
   Insn 2: point = 21, n_alt = 0
   Insn 54: point = 22, n_alt = 0
 r87: [17..22]
 r88: [10..11]
 r89: [8..9]
 r90: [2..5]
 r91: [0..1]
 r92: [20..21]
 r93: [18..19]
 r94: [15..16]
 r95: [6..7]
 r96: [12..14]
 r97: [12..13]
Compressing live ranges: from 23 to 18 - 78%
Ranges after the compression:
 r87: [14..17]
 r88: [8..9]
 r89: [6..7]
 r90: [2..3]
 r91: [0..1]
 r92: [16..17]
 r93: [14..15]
 r94: [12..13]
 r95: [4..5]
 r96: [10..11]
 r97: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 54
changing reg in insn 11
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 40
changing reg in insn 29
changing reg in insn 43
changing reg in insn 43
changing reg in insn 47
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
deleting insn with uid = 14.
deleting insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


strfio

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,9u} r1={5d,3u} r2={2d} r3={1d,1u} r6={1d,22u} r7={4d,14u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1e} r17={8d,2u} r18={1d} r19={1d} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 156{102d,52u,2e} in 28{27 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 92 93 94
(note 6 1 54 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 54 6 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 54 3 2 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 c+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":64 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 1 dx [93])
        (reg:QI 1 dx [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":64 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 c+0 S1 A32])
        (reg:QI 1 dx [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":64 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 index+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":65 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":66 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 10 9 11 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":66 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 11 10 12 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [87])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":66 79 {*movsi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":66 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 13 12 15 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":66 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 13 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 len+0 S4 A32])
        (reg:SI 0 ax [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":66 79 {*movsi_internal}
     (nil))
(insn 16 15 35 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":67 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95
(code_label 35 16 17 3 28 (nil) [1 uses])
(note 17 35 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":67 79 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [95])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [1 len+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":67 11 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":67 548 {*jcc}
     (nil)
 -> 38)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 96 97
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:SI 1 dx [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":68 79 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":68 79 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
                (plus:SI (reg:SI 0 ax [97])
                    (reg/f:SI 1 dx [96])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":68 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [2 str+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 25 24 26 4 (set (reg:QI 0 ax [orig:89 _2 ] [89])
        (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":68 81 {*movqi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 c+0 S1 A32])
            (reg:QI 0 ax [orig:89 _2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":68 9 {*cmpqi_1}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":68 548 {*jcc}
     (nil)
 -> 32)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 50 5 (set (reg:SI 0 ax [orig:90 _4 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":69 79 {*movsi_internal}
     (nil))
(jump_insn 50 29 51 5 (set (pc)
        (label_ref 41)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":69 549 {jump}
     (nil)
 -> 41)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90

(barrier 51 50 32)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 32 51 33 6 26 (nil) [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 52 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":67 194 {*addsi_1}
     (nil))
(jump_insn 52 34 53 6 (set (pc)
        (label_ref 35)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":67 549 {jump}
     (nil)
 -> 35)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 53 52 38)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90
(code_label 38 53 39 7 25 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg:SI 0 ax [orig:90 _4 ] [90])
        (const_int -1 [0xffffffffffffffff])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":72 79 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              5 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  def 	 0 [ax] 91
(code_label 41 40 42 8 27 (nil) [1 uses])
(note 42 41 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 42 48 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:91 <retval> ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":73 79 {*movsi_internal}
     (nil))
(insn 48 47 55 8 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":73 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 55 48 0 NOTE_INSN_DELETED)

;; Function substr (_Z6substrPcj, funcdef_no=23, decl_uid=1472, cgraph_uid=12, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 7
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 0
   Insn 5: point = 6, n_alt = 0
   Insn 17: point = 7, n_alt = 0
 r87: [7..7]
 r88: [2..3]
 r89: [0..1]
 r90: [4..6]
 r91: [4..5]
Compressing live ranges: from 8 to 7 - 87%
Ranges after the compression:
 r87: [6..6]
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns


substr

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={2d,1u} r2={1d} r6={1d,4u} r7={1d,2u} r16={2e} r17={2d} r20={1d,1u} 
;;    total ref usage 27{13d,12u,2e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90 91
(note 3 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 17 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 17 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":76 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [1 index+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":76 79 {*movsi_internal}
     (nil))
(insn 7 6 14 2 (parallel [
            (set (reg/f:SI 0 ax [orig:88 _3 ] [88])
                (plus:SI (reg:SI 0 ax [91])
                    (reg/f:SI 1 dx [90])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":76 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [2 str+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 index+0 S4 A32]))
        (nil)))
(insn 14 7 15 2 (set (reg/i:SI 0 ax)
        (reg/f:SI 0 ax [orig:89 <retval> ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":77 79 {*movsi_internal}
     (nil))
(insn 15 14 18 2 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":77 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 18 15 0 NOTE_INSN_DELETED)

;; Function strsw (_Z5strswPcS_, funcdef_no=24, decl_uid=1475, cgraph_uid=13, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) q  (1) n {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 34:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) q  (1) n {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 48: point = 0, n_alt = -1
   Insn 47: point = 0, n_alt = -2
   Insn 43: point = 1, n_alt = -2
  BB 5
   Insn 50: point = 4, n_alt = -1
   Insn 29: point = 4, n_alt = 3
  BB 7
   Insn 40: point = 5, n_alt = 3
  BB 3
   Insn 16: point = 6, n_alt = -1
   Insn 15: point = 6, n_alt = 1
   Insn 14: point = 7, n_alt = 0
  BB 6
   Insn 52: point = 8, n_alt = -1
   Insn 34: point = 8, n_alt = 1
  BB 4
   Insn 27: point = 8, n_alt = -1
   Insn 26: point = 8, n_alt = 0
   Insn 25: point = 9, n_alt = 4
   Insn 24: point = 11, n_alt = 0
   Insn 23: point = 13, n_alt = 0
   Insn 22: point = 14, n_alt = 0
   Insn 21: point = 15, n_alt = 4
   Insn 20: point = 17, n_alt = 0
   Insn 19: point = 19, n_alt = 0
   Insn 18: point = 20, n_alt = 0
  BB 2
   Insn 12: point = 21, n_alt = 1
   Insn 11: point = 21, n_alt = 1
   Insn 10: point = 22, n_alt = -2
   Insn 9: point = 23, n_alt = 0
   Insn 8: point = 23, n_alt = 0
   Insn 7: point = 23, n_alt = -2
   Insn 6: point = 24, n_alt = 0
   Insn 5: point = 24, n_alt = 0
   Insn 54: point = 24, n_alt = 0
 r87: [23..24]
 r88: [16..17]
 r89: [8..15]
 r90: [10..11]
 r91: [8..9]
 r92: [2..5]
 r93: [0..1]
 r94: [21..22]
 r95: [6..7]
 r96: [18..20]
 r97: [18..19]
 r98: [12..14]
 r99: [12..13]
Compressing live ranges: from 25 to 20 - 80%
Ranges after the compression:
 r87: [18..19]
 r88: [12..13]
 r89: [6..11]
 r90: [8..9]
 r91: [6..7]
 r92: [2..3]
 r93: [0..1]
 r94: [16..17]
 r95: [4..5]
 r96: [14..15]
 r97: [14..15]
 r98: [10..11]
 r99: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 54
changing reg in insn 7
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 26
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 40
changing reg in insn 29
changing reg in insn 43
changing reg in insn 43
changing reg in insn 47
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
deleting insn with uid = 10.
deleting insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


strsw

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={12d,11u} r1={4d,2u} r2={3d,1u} r3={1d,1u} r6={1d,19u} r7={4d,14u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={2e} r17={9d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 160{105d,51u,4e} in 28{27 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 94
(note 3 1 54 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 54 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 54 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":80 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 7 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 match+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":80 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 7 6 8 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [87])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":80 79 {*movsi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":80 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":80 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 9 12 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 len+0 S4 A32])
        (reg:SI 0 ax [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":80 79 {*movsi_internal}
     (nil))
(insn 12 11 35 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":81 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95
(code_label 35 12 13 3 35 (nil) [1 uses])
(note 13 35 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":81 79 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [95])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [1 len+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":81 11 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":81 548 {*jcc}
     (nil)
 -> 38)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 91 96 97 98 99
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 1 dx [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 79 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 79 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
                (plus:SI (reg:SI 0 ax [97])
                    (reg/f:SI 1 dx [96])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [2 str+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 21 20 22 4 (set (reg:QI 1 dx [orig:89 _2 ] [89])
        (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 81 {*movqi_internal}
     (nil))
(insn 22 21 23 4 (set (reg/f:SI 2 cx [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 match+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 79 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 79 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
                (plus:SI (reg:SI 0 ax [99])
                    (reg/f:SI 2 cx [98])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [2 match+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 25 24 26 4 (set (reg:QI 0 ax [orig:91 _4 ] [91])
        (mem:QI (reg/f:SI 0 ax [orig:90 _3 ] [90]) [0 *_3+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 81 {*movqi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:89 _2 ] [89])
            (reg:QI 0 ax [orig:91 _4 ] [91]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 9 {*cmpqi_1}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":82 548 {*jcc}
     (nil)
 -> 32)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 50 5 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":83 81 {*movqi_internal}
     (nil))
(jump_insn 50 29 51 5 (set (pc)
        (label_ref 41)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":83 549 {jump}
     (nil)
 -> 41)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

(barrier 51 50 32)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 32 51 33 6 33 (nil) [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 52 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":81 194 {*addsi_1}
     (nil))
(jump_insn 52 34 53 6 (set (pc)
        (label_ref 35)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":81 549 {jump}
     (nil)
 -> 35)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 53 52 38)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 92
(code_label 38 53 39 7 32 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg:QI 0 ax [orig:92 _6 ] [92])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":86 81 {*movqi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              5 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 0 [ax] 93
(code_label 41 40 42 8 34 (nil) [1 uses])
(note 42 41 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 42 48 8 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:93 <retval> ] [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":87 81 {*movqi_internal}
     (nil))
(insn 48 47 55 8 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":87 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 55 48 0 NOTE_INSN_DELETED)

;; Function string::string (_ZN6stringC2ERKS_, funcdef_no=26, decl_uid=1441, cgraph_uid=15, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 6:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) 0 {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =<  (1) riF*o {*pushdi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 48:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 50:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 53: point = 0, n_alt = -1
   Insn 50: point = 0, n_alt = 8
   Insn 49: point = 1, n_alt = 0
   Insn 48: point = 2, n_alt = 8
   Insn 47: point = 3, n_alt = 0
   Insn 46: point = 5, n_alt = 0
   Insn 45: point = 7, n_alt = 0
   Insn 44: point = 8, n_alt = 0
   Insn 43: point = 10, n_alt = 0
   Insn 42: point = 11, n_alt = 0
   Insn 41: point = 11, n_alt = 0
   Insn 40: point = 12, n_alt = 0
   Insn 39: point = 13, n_alt = 0
   Insn 38: point = 14, n_alt = 0
   Insn 37: point = 15, n_alt = 0
   Insn 36: point = 17, n_alt = 0
   Insn 35: point = 18, n_alt = 0
   Insn 34: point = 20, n_alt = 0
   Insn 33: point = 21, n_alt = 0
   Insn 32: point = 23, n_alt = 0
   Insn 31: point = 25, n_alt = 0
   Insn 30: point = 26, n_alt = 0
   Insn 29: point = 28, n_alt = 0
   Insn 28: point = 30, n_alt = 1
   Insn 27: point = 31, n_alt = 0
   Insn 26: point = 32, n_alt = -2
   Insn 25: point = 33, n_alt = 0
   Insn 24: point = 33, n_alt = 0
   Insn 23: point = 34, n_alt = 0
   Insn 22: point = 35, n_alt = 0
   Insn 21: point = 35, n_alt = 0
   Insn 20: point = 37, n_alt = 0
   Insn 19: point = 39, n_alt = 0
   Insn 18: point = 40, n_alt = 0
   Insn 17: point = 42, n_alt = 0
   Insn 16: point = 43, n_alt = 1
   Insn 15: point = 44, n_alt = 0
   Insn 14: point = 45, n_alt = -2
   Insn 13: point = 46, n_alt = 0
   Insn 12: point = 46, n_alt = 0
   Insn 11: point = 46, n_alt = -2
   Insn 10: point = 46, n_alt = 0
   Insn 9: point = 47, n_alt = 0
   Insn 8: point = 47, n_alt = 0
   Insn 7: point = 49, n_alt = 0
   Insn 6: point = 50, n_alt = 8
   Insn 5: point = 51, n_alt = 0
   Insn 54: point = 52, n_alt = 0
 r87: [29..52]
 r88: [46..47]
 r89: [43..45]
 r90: [33..40]
 r91: [36..37]
 r92: [34..35]
 r93: [30..32]
 r94: [11..26]
 r95: [22..23]
 r96: [14..21]
 r97: [13..18]
 r98: [12..15]
 r99: [4..8]
 r100: [4..5]
 r101: [2..3]
 r102: [50..51]
 r103: [48..49]
 r104: [43..44]
 r105: [41..42]
 r106: [38..39]
 r107: [30..31]
 r108: [27..28]
 r109: [24..25]
 r110: [19..20]
 r111: [16..17]
 r112: [9..10]
 r113: [6..7]
 r114: [0..1]
Compressing live ranges: from 53 to 40 - 75%
Ranges after the compression:
 r87: [22..39]
 r88: [34..35]
 r89: [32..33]
 r90: [24..29]
 r91: [26..27]
 r92: [24..25]
 r93: [22..23]
 r94: [10..19]
 r95: [16..17]
 r96: [10..15]
 r97: [10..13]
 r98: [10..11]
 r99: [4..7]
 r100: [4..5]
 r101: [2..3]
 r102: [38..39]
 r103: [36..37]
 r104: [32..33]
 r105: [30..31]
 r106: [28..29]
 r107: [22..23]
 r108: [20..21]
 r109: [18..19]
 r110: [14..15]
 r111: [12..13]
 r112: [8..9]
 r113: [6..7]
 r114: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 54
changing reg in insn 29
changing reg in insn 17
changing reg in insn 11
changing reg in insn 8
changing reg in insn 10
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 24
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 28
changing reg in insn 30
changing reg in insn 41
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 38
changing reg in insn 35
changing reg in insn 39
changing reg in insn 37
changing reg in insn 40
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
rescanning insn with uid = 24.
rescanning insn with uid = 41.


string::string

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={20d,18u} r1={11d,7u} r2={5d,1u} r3={4d,6u} r4={1d,1u} r6={1d,13u} r7={11d,20u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d} r18={3d} r19={3d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 342{275d,67u,0e} in 47{44 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
(note 3 1 54 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 54 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 54 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":91 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:QI (plus:SI (reg/f:SI 0 ax [102])
                (const_int 8 [0x8])) [6 this_16(D)->_init+0 S1 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":91 81 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 79 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [103]) [2 str_19(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 10 9 12 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 12 10 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 14 13 15 2 (set (reg:SI 1 dx [orig:89 _2 ] [89])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 79 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 79 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [104])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])
        (reg:SI 1 dx [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":92 79 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [105])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 79 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 16 [0x10])) [16 api.mm.malloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 79 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 1 dx [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 79 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 1 dx [orig:91 _4 ] [91])
        (mem:SI (plus:SI (reg/f:SI 1 dx [106])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 79 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg:SI 1 dx [orig:92 _5 ] [92])
                (plus:SI (reg:SI 1 dx [orig:91 _4 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 194 {*addsi_1}
     (nil))
(insn 22 21 23 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 23 22 24 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:92 _5 ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:90 _3 ] [90]) [0 *_3 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 565 {*call_value}
     (nil)
    (nil))
(insn 25 24 26 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 26 25 27 2 (set (reg/f:SI 1 dx [orig:93 _6 ] [93])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 79 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 79 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (mem/f:SI (reg/f:SI 0 ax [107]) [2 this_16(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:93 _6 ] [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":93 79 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg/f:SI 0 ax [108])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg/f:SI 2 cx [orig:94 _7 ] [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [108])
                (const_int 24 [0x18])) [18 api.mm.memcpy+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 0 ax [orig:95 _8 ] [95])
        (mem:SI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DI 0 ax [orig:96 _9 ] [96])
        (zero_extend:DI (reg:SI 0 ax [orig:95 _8 ] [95]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 120 {*zero_extendsidi2}
     (nil))
(insn 34 33 35 2 (set (reg/f:SI 3 bx [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 35 34 36 2 (set (reg/f:SI 4 si [orig:97 _10 ] [97])
        (mem/f:SI (reg/f:SI 3 bx [110]) [2 str_19(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (reg/f:SI 3 bx [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg/f:SI 3 bx [orig:98 _11 ] [98])
        (mem/f:SI (reg/f:SI 3 bx [111]) [2 this_16(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 79 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (mem:DI (pre_dec:SI (reg/f:SI 7 sp)) [21  S8 A64])
        (reg:DI 0 ax [orig:96 _9 ] [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 59 {*pushdi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 39 38 40 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 4 si [orig:97 _10 ] [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 40 39 41 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 3 bx [orig:98 _11 ] [98])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 41 40 42 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 2 cx [orig:94 _7 ] [94]) [0 *_7 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 565 {*call_value}
     (nil)
    (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":94 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 43 42 44 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":95 79 {*movsi_internal}
     (nil))
(insn 44 43 45 2 (set (reg/f:SI 1 dx [orig:99 _12 ] [99])
        (mem/f:SI (reg/f:SI 0 ax [112]) [2 this_16(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":95 79 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":95 79 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SI 0 ax [orig:100 _13 ] [100])
        (mem:SI (plus:SI (reg/f:SI 0 ax [113])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":95 79 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (parallel [
            (set (reg/f:SI 0 ax [orig:101 _14 ] [101])
                (plus:SI (reg:SI 0 ax [orig:100 _13 ] [100])
                    (reg/f:SI 1 dx [orig:99 _12 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":95 194 {*addsi_1}
     (nil))
(insn 48 47 49 2 (set (mem:QI (reg/f:SI 0 ax [orig:101 _14 ] [101]) [0 *_14+0 S1 A8])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":95 81 {*movqi_internal}
     (nil))
(insn 49 48 50 2 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":96 79 {*movsi_internal}
     (nil))
(insn 50 49 53 2 (set (mem:QI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 8 [0x8])) [6 this_16(D)->_init+0 S1 A32])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":96 81 {*movqi_internal}
     (nil))
(insn 53 50 55 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":97 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 55 53 0 NOTE_INSN_DELETED)

;; Function string::string (_ZN6stringC2EPc, funcdef_no=29, decl_uid=1435, cgraph_uid=18, symbol_order=19)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 6:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) 0 {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) riF*o {*pushdi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 44:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 46:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 49: point = 0, n_alt = -1
   Insn 46: point = 0, n_alt = 8
   Insn 45: point = 1, n_alt = 0
   Insn 44: point = 2, n_alt = 8
   Insn 43: point = 3, n_alt = 0
   Insn 42: point = 5, n_alt = 0
   Insn 41: point = 7, n_alt = 0
   Insn 40: point = 8, n_alt = 0
   Insn 39: point = 10, n_alt = 0
   Insn 38: point = 11, n_alt = 0
   Insn 37: point = 11, n_alt = 0
   Insn 36: point = 12, n_alt = 0
   Insn 35: point = 13, n_alt = 0
   Insn 34: point = 13, n_alt = 0
   Insn 33: point = 14, n_alt = 0
   Insn 32: point = 16, n_alt = 0
   Insn 31: point = 17, n_alt = 0
   Insn 30: point = 19, n_alt = 0
   Insn 29: point = 21, n_alt = 0
   Insn 28: point = 22, n_alt = 0
   Insn 27: point = 24, n_alt = 0
   Insn 26: point = 26, n_alt = 1
   Insn 25: point = 27, n_alt = 0
   Insn 24: point = 28, n_alt = -2
   Insn 23: point = 29, n_alt = 0
   Insn 22: point = 29, n_alt = 0
   Insn 21: point = 30, n_alt = 0
   Insn 20: point = 31, n_alt = 0
   Insn 19: point = 31, n_alt = 0
   Insn 18: point = 33, n_alt = 0
   Insn 17: point = 35, n_alt = 0
   Insn 16: point = 36, n_alt = 0
   Insn 15: point = 38, n_alt = 0
   Insn 14: point = 39, n_alt = 1
   Insn 13: point = 40, n_alt = 0
   Insn 12: point = 41, n_alt = -2
   Insn 11: point = 42, n_alt = 0
   Insn 10: point = 42, n_alt = 0
   Insn 9: point = 42, n_alt = -2
   Insn 8: point = 42, n_alt = 0
   Insn 7: point = 42, n_alt = 0
   Insn 6: point = 42, n_alt = 8
   Insn 5: point = 43, n_alt = 0
   Insn 50: point = 44, n_alt = 0
 r87: [25..44]
 r88: [39..41]
 r89: [29..36]
 r90: [32..33]
 r91: [30..31]
 r92: [26..28]
 r93: [11..22]
 r94: [18..19]
 r95: [13..17]
 r96: [12..14]
 r97: [4..8]
 r98: [4..5]
 r99: [2..3]
 r100: [42..43]
 r101: [39..40]
 r102: [37..38]
 r103: [34..35]
 r104: [26..27]
 r105: [23..24]
 r106: [20..21]
 r107: [15..16]
 r108: [9..10]
 r109: [6..7]
 r110: [0..1]
Compressing live ranges: from 45 to 34 - 75%
Ranges after the compression:
 r87: [20..33]
 r88: [30..31]
 r89: [22..27]
 r90: [24..25]
 r91: [22..23]
 r92: [20..21]
 r93: [10..17]
 r94: [14..15]
 r95: [10..13]
 r96: [10..11]
 r97: [4..7]
 r98: [4..5]
 r99: [2..3]
 r100: [32..33]
 r101: [30..31]
 r102: [28..29]
 r103: [26..27]
 r104: [20..21]
 r105: [18..19]
 r106: [16..17]
 r107: [12..13]
 r108: [8..9]
 r109: [6..7]
 r110: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 50
changing reg in insn 27
changing reg in insn 15
changing reg in insn 9
changing reg in insn 12
changing reg in insn 14
changing reg in insn 16
changing reg in insn 22
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 37
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 34
changing reg in insn 33
changing reg in insn 36
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 5
changing reg in insn 6
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
rescanning insn with uid = 22.
rescanning insn with uid = 37.


string::string

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={18d,16u} r1={11d,7u} r2={5d,1u} r3={3d,5u} r6={1d,13u} r7={11d,20u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d} r18={3d} r19={3d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 334{271d,63u,0e} in 43{40 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110
(note 3 1 50 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 50 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 50 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [100])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":99 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:QI (plus:SI (reg/f:SI 0 ax [100])
                (const_int 8 [0x8])) [6 this_14(D)->_init+0 S1 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":99 81 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":100 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 8 7 10 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":100 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 10 8 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":100 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":100 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 12 11 13 2 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":100 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":100 79 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 4 [0x4])) [1 this_14(D)->_length+0 S4 A32])
        (reg:SI 1 dx [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":100 79 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 0 ax [102])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 79 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [102])
                (const_int 16 [0x10])) [16 api.mm.malloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 79 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 1 dx [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 79 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 dx [orig:90 _3 ] [90])
        (mem:SI (plus:SI (reg/f:SI 1 dx [103])
                (const_int 4 [0x4])) [1 this_14(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 79 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 1 dx [orig:91 _4 ] [91])
                (plus:SI (reg:SI 1 dx [orig:90 _3 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 194 {*addsi_1}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 21 20 22 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:89 _2 ] [89]) [0 *_2 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 565 {*call_value}
     (nil)
    (nil))
(insn 23 22 24 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 24 23 25 2 (set (reg/f:SI 1 dx [orig:92 _5 ] [92])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 79 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 79 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/f:SI (reg/f:SI 0 ax [104]) [2 this_14(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:92 _5 ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":101 79 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:SI 0 ax [105])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 79 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg/f:SI 2 cx [orig:93 _6 ] [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 24 [0x18])) [18 api.mm.memcpy+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 79 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 79 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 0 ax [orig:94 _7 ] [94])
        (mem:SI (plus:SI (reg/f:SI 0 ax [106])
                (const_int 4 [0x4])) [1 this_14(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 79 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DI 0 ax [orig:95 _8 ] [95])
        (zero_extend:DI (reg:SI 0 ax [orig:94 _7 ] [94]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 120 {*zero_extendsidi2}
     (nil))
(insn 32 31 33 2 (set (reg/f:SI 3 bx [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 79 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg/f:SI 3 bx [orig:96 _9 ] [96])
        (mem/f:SI (reg/f:SI 3 bx [107]) [2 this_14(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 79 {*movsi_internal}
     (nil))
(insn 34 33 35 2 (set (mem:DI (pre_dec:SI (reg/f:SI 7 sp)) [21  S8 A64])
        (reg:DI 0 ax [orig:95 _8 ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 59 {*pushdi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 35 34 36 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 36 35 37 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 3 bx [orig:96 _9 ] [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 37 36 38 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 2 cx [orig:93 _6 ] [93]) [0 *_6 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 565 {*call_value}
     (nil)
    (nil))
(insn 38 37 39 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":102 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 39 38 40 2 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":103 79 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (reg/f:SI 1 dx [orig:97 _10 ] [97])
        (mem/f:SI (reg/f:SI 0 ax [108]) [2 this_14(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":103 79 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":103 79 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 ax [orig:98 _11 ] [98])
        (mem:SI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 4 [0x4])) [1 this_14(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":103 79 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (parallel [
            (set (reg/f:SI 0 ax [orig:99 _12 ] [99])
                (plus:SI (reg:SI 0 ax [orig:98 _11 ] [98])
                    (reg/f:SI 1 dx [orig:97 _10 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":103 194 {*addsi_1}
     (nil))
(insn 44 43 45 2 (set (mem:QI (reg/f:SI 0 ax [orig:99 _12 ] [99]) [0 *_12+0 S1 A8])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":103 81 {*movqi_internal}
     (nil))
(insn 45 44 46 2 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":104 79 {*movsi_internal}
     (nil))
(insn 46 45 49 2 (set (mem:QI (plus:SI (reg/f:SI 0 ax [110])
                (const_int 8 [0x8])) [6 this_14(D)->_init+0 S1 A32])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":104 81 {*movqi_internal}
     (nil))
(insn 49 46 51 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":105 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 51 49 0 NOTE_INSN_DELETED)

;; Function string::string (_ZN6stringC2Ev, funcdef_no=32, decl_uid=1430, cgraph_uid=21, symbol_order=22)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 6:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 20:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 25: point = 0, n_alt = -1
   Insn 22: point = 0, n_alt = 8
   Insn 21: point = 1, n_alt = 0
   Insn 20: point = 2, n_alt = 8
   Insn 19: point = 3, n_alt = 0
   Insn 18: point = 5, n_alt = 0
   Insn 17: point = 6, n_alt = 1
   Insn 16: point = 7, n_alt = 0
   Insn 15: point = 8, n_alt = -2
   Insn 14: point = 9, n_alt = 0
   Insn 13: point = 9, n_alt = 0
   Insn 12: point = 10, n_alt = 0
   Insn 11: point = 10, n_alt = 0
   Insn 10: point = 10, n_alt = 0
   Insn 9: point = 12, n_alt = 0
   Insn 8: point = 14, n_alt = 1
   Insn 7: point = 15, n_alt = 0
   Insn 6: point = 16, n_alt = 8
   Insn 5: point = 17, n_alt = 0
   Insn 26: point = 18, n_alt = 0
 r87: [13..18]
 r88: [9..10]
 r89: [6..8]
 r90: [2..3]
 r91: [16..17]
 r92: [14..15]
 r93: [11..12]
 r94: [6..7]
 r95: [4..5]
 r96: [0..1]
Compressing live ranges: from 19 to 16 - 84%
Ranges after the compression:
 r87: [12..15]
 r88: [8..9]
 r89: [6..7]
 r90: [2..3]
 r91: [14..15]
 r92: [12..13]
 r93: [10..11]
 r94: [6..7]
 r95: [4..5]
 r96: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 26
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 13.


string::string

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,8u} r1={5d,3u} r2={2d} r6={1d,7u} r7={4d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 123{96d,27u,0e} in 20{19 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96
(note 3 1 26 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 26 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 26 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":107 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:QI (plus:SI (reg/f:SI 1 dx [91])
                (const_int 8 [0x8])) [6 this_5(D)->_init+0 S1 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":107 81 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 1 dx [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":108 79 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem:SI (plus:SI (reg/f:SI 1 dx [92])
                (const_int 4 [0x4])) [1 this_5(D)->_length+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":108 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [93])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 16 [0x10])) [16 api.mm.malloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 12 11 13 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 565 {*call_value}
     (nil)
    (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 14 16 2 (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 79 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 79 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f:SI (reg/f:SI 0 ax [94]) [2 this_5(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":109 79 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":110 79 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 0 ax [95]) [2 this_5(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":110 79 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (mem:QI (reg/f:SI 0 ax [orig:90 _3 ] [90]) [0 *_3+0 S1 A8])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":110 81 {*movqi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":111 79 {*movsi_internal}
     (nil))
(insn 22 21 25 2 (set (mem:QI (plus:SI (reg/f:SI 0 ax [96])
                (const_int 8 [0x8])) [6 this_5(D)->_init+0 S1 A32])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":111 81 {*movqi_internal}
     (nil))
(insn 25 22 27 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":112 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 27 25 0 NOTE_INSN_DELETED)

;; Function string::~string (_ZN6stringD2Ev, funcdef_no=35, decl_uid=1447, cgraph_uid=24, symbol_order=25)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = 0
   Insn 12: point = 1, n_alt = 0
   Insn 11: point = 2, n_alt = 0
   Insn 10: point = 2, n_alt = 0
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 5, n_alt = 0
   Insn 7: point = 7, n_alt = 0
   Insn 6: point = 9, n_alt = 1
   Insn 5: point = 10, n_alt = 0
   Insn 18: point = 11, n_alt = 0
 r87: [8..11]
 r88: [0..5]
 r89: [1..2]
 r90: [9..10]
 r91: [6..7]
 r92: [3..4]
Compressing live ranges: from 12 to 8 - 66%
Ranges after the compression:
 r87: [6..7]
 r88: [0..3]
 r89: [0..1]
 r90: [6..7]
 r91: [4..5]
 r92: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 18
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 10
changing reg in insn 12
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 13.


string::~string

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={5d,3u} r2={2d} r6={1d,4u} r7={4d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 111{92d,19u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92
(note 3 1 18 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 18 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 18 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":115 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (plus:SI (reg/f:SI 1 dx [90])
                (const_int 4 [0x4])) [1 this_4(D)->_length+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":115 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [91])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 79 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [91])
                (const_int 20 [0x14])) [17 api.mm.free+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 1 dx [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
        (mem/f:SI (reg/f:SI 1 dx [92]) [2 this_4(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 12 11 13 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 13 12 14 2 (call (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1 S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 554 {*call}
     (nil)
    (nil))
(insn 14 13 17 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":116 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 17 14 19 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":117 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 19 17 0 NOTE_INSN_DELETED)

;; Function string::operator+ (_ZN6stringplES_, funcdef_no=37, decl_uid=1357, cgraph_uid=26, symbol_order=27)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 20:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 33:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 44: point = 0, n_alt = -1
   Insn 43: point = 0, n_alt = 0
   Insn 46: point = 0, n_alt = -1
   Insn 37: point = 0, n_alt = 0
   Insn 36: point = 0, n_alt = 0
   Insn 35: point = 0, n_alt = -2
   Insn 34: point = 1, n_alt = 0
   Insn 33: point = 2, n_alt = 3
   Insn 32: point = 3, n_alt = 0
   Insn 31: point = 3, n_alt = 0
   Insn 30: point = 3, n_alt = 0
   Insn 29: point = 3, n_alt = -2
   Insn 28: point = 3, n_alt = 0
   Insn 27: point = 3, n_alt = 0
   Insn 26: point = 4, n_alt = 3
   Insn 25: point = 5, n_alt = 0
   Insn 24: point = 5, n_alt = 0
   Insn 23: point = 5, n_alt = 0
   Insn 22: point = 5, n_alt = -2
   Insn 21: point = 5, n_alt = 0
   Insn 20: point = 6, n_alt = 3
   Insn 19: point = 7, n_alt = 0
   Insn 18: point = 7, n_alt = 0
   Insn 17: point = 7, n_alt = 0
   Insn 16: point = 7, n_alt = 0
   Insn 15: point = 7, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = 0
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 8, n_alt = 0
   Insn 10: point = 10, n_alt = 0
   Insn 9: point = 11, n_alt = 0
   Insn 8: point = 11, n_alt = 0
   Insn 7: point = 11, n_alt = -2
   Insn 6: point = 11, n_alt = 0
   Insn 5: point = 11, n_alt = 0
   Insn 47: point = 11, n_alt = 0
 r87: [0..11]
 r88: [7..8]
 r89: [9..10]
 r90: [5..6]
 r91: [3..4]
 r92: [1..2]
Compressing live ranges: from 12 to 10 - 83%
Ranges after the compression:
 r87: [0..9]
 r88: [6..7]
 r89: [8..9]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 47
changing reg in insn 35
changing reg in insn 29
changing reg in insn 22
changing reg in insn 15
changing reg in insn 7
changing reg in insn 11
changing reg in insn 13
changing reg in insn 10
changing reg in insn 11
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 27
changing reg in insn 33
changing reg in insn 34
deleting insn with uid = 7.
deleting insn with uid = 15.
deleting insn with uid = 22.
deleting insn with uid = 29.
deleting insn with uid = 35.
starting the processing of deferred insns
ending the processing of deferred insns


string::operator+

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={12d,7u} r1={6d} r2={6d} r3={1d,5u} r6={1d,11u} r7={19d,35u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={19d} r18={5d} r19={5d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 474{415d,59u,0e} in 32{27 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92
(note 3 1 47 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 47 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 47 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":120 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":120 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":120 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":120 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":121 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [89]) [2 this_5(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":121 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":121 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 13 12 14 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":121 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 14 13 16 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":121 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 16 14 17 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringaSEPc") [flags 0x1]  <function_decl 0x7ff72fe37e00 operator=>) [0 operator= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":121 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":121 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 19 18 20 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [90])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (nil))
(insn 21 20 23 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 21 24 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 25 24 26 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg:SI 0 ax [91])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (nil))
(insn 27 26 28 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 28 27 30 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 30 28 31 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringpLES_") [flags 0x1]  <function_decl 0x7ff72fe37600 operator+=>) [0 operator+= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 31 30 32 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 32 31 33 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 33 32 34 2 (parallel [
            (set (reg:SI 0 ax [92])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (nil))
(insn 34 33 36 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 36 34 37 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 37 36 46 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":122 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 46 37 43 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":123 584 {nop}
     (nil))
(insn 43 46 44 2 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":124 79 {*movsi_internal}
     (nil))
(insn 44 43 48 2 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":124 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 48 44 0 NOTE_INSN_DELETED)

;; Function string::operator+ (_ZN6stringplEc, funcdef_no=38, decl_uid=1360, cgraph_uid=27, symbol_order=28)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 38: point = 0, n_alt = -1
   Insn 37: point = 0, n_alt = 0
   Insn 40: point = 0, n_alt = -1
   Insn 31: point = 0, n_alt = 0
   Insn 30: point = 0, n_alt = 0
   Insn 29: point = 0, n_alt = -2
   Insn 28: point = 1, n_alt = 0
   Insn 27: point = 1, n_alt = 0
   Insn 26: point = 2, n_alt = 0
   Insn 25: point = 2, n_alt = 0
   Insn 24: point = 3, n_alt = 0
   Insn 23: point = 3, n_alt = 0
   Insn 22: point = 3, n_alt = -2
   Insn 21: point = 3, n_alt = 0
   Insn 20: point = 3, n_alt = 0
   Insn 19: point = 4, n_alt = 0
   Insn 18: point = 4, n_alt = -2
   Insn 17: point = 5, n_alt = 0
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 5, n_alt = -2
   Insn 14: point = 5, n_alt = 0
   Insn 13: point = 5, n_alt = 0
   Insn 12: point = 5, n_alt = 0
   Insn 11: point = 5, n_alt = 0
   Insn 10: point = 5, n_alt = -2
   Insn 9: point = 5, n_alt = 0
   Insn 8: point = 5, n_alt = 0
   Insn 4: point = 5, n_alt = 8
   Insn 3: point = 6, n_alt = 0
   Insn 2: point = 8, n_alt = 0
   Insn 41: point = 9, n_alt = 0
 r87: [0..9]
 r88: [3..4]
 r89: [1..2]
 r90: [7..8]
 r91: [5..6]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r87: [0..7]
 r88: [2..3]
 r89: [0..1]
 r90: [6..7]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 41
changing reg in insn 29
changing reg in insn 22
changing reg in insn 15
changing reg in insn 10
changing reg in insn 18
changing reg in insn 20
changing reg in insn 25
changing reg in insn 27
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
deleting insn with uid = 10.
deleting insn with uid = 15.
deleting insn with uid = 18.
deleting insn with uid = 22.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns


string::operator+

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,6u} r1={5d} r2={5d} r3={1d,4u} r6={1d,10u} r7={15d,28u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={13d} r18={4d} r19={4d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 379{330d,49u,0e} in 26{22 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 6 1 41 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 41 6 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 41 3 2 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 c+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":126 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [91])
        (reg:QI 0 ax [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":126 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c+0 S1 A32])
        (reg:QI 0 ax [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":126 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":127 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 9 8 11 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":127 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 11 9 12 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":127 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":127 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 14 13 16 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 16 14 17 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string11toCharArrayEv") [flags 0x1]  <function_decl 0x7ff72fe37f00 toCharArray>) [0 toCharArray S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 17 16 19 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 19 17 20 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 20 19 21 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 21 20 23 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 21 24 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringaSEPc") [flags 0x1]  <function_decl 0x7ff72fe37e00 operator=>) [0 operator= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 24 23 25 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":128 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 25 24 26 2 (set (reg:SI 0 ax [orig:89 _2 ] [89])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 c+0 S1 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":129 134 {extendqisi2}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":129 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 27 26 28 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":129 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 28 27 30 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":129 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 30 28 31 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringpLEc") [flags 0x1]  <function_decl 0x7ff72fe37700 operator+=>) [0 operator+= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":129 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 31 30 40 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":129 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 40 31 37 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":130 584 {nop}
     (nil))
(insn 37 40 38 2 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":131 79 {*movsi_internal}
     (nil))
(insn 38 37 42 2 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":131 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 42 38 0 NOTE_INSN_DELETED)

;; Function string::operator+= (_ZN6stringpLES_, funcdef_no=39, decl_uid=1363, cgraph_uid=28, symbol_order=29)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=6,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            alt=8: Bad operand -- refuse
            alt=9: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=11: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=12,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
            alt=15: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=16: Bad operand -- refuse
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=121 from oldreg=95, assigning class GENERAL_REGS to r121
   28: r121:SI=[r114:SI+0x18]
      REG_DEAD r114:SI
    Inserting insn reload after:
   81: r95:SI=r121:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) ?r  (1) rm {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =<  (1) riF*o {*pushdi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 50:  (1) lBwBz {*call_value} (sp_off=-16)
      Creating newreg=122 from oldreg=95, assigning class INDEX_REGS to r122
   50: ax:SI=call [r122:SI] argc:0x10
      REG_DEAD r95:SI
      REG_UNUSED ax:SI
    Inserting insn reload before:
   82: r122:SI=r95:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 64:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=123 from oldreg=95, assigning class GENERAL_REGS to inheritance r123
    Original reg change 95->123 (bb2):
   81: r123:SI=r121:SI
    Add original<-inheritance after:
   83: r95:SI=r123:SI

    Inheritance reuse change 95->123 (bb2):
   82: r122:SI=r123:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    83: r95:SI=r123:SI
deleting insn with uid = 83.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 78: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = 1
   Insn 74: point = 1, n_alt = 0
   Insn 73: point = 2, n_alt = 0
   Insn 72: point = 4, n_alt = 0
   Insn 71: point = 6, n_alt = 0
   Insn 70: point = 7, n_alt = -2
   Insn 69: point = 8, n_alt = 0
   Insn 68: point = 8, n_alt = 0
   Insn 67: point = 8, n_alt = -2
   Insn 66: point = 9, n_alt = 0
   Insn 65: point = 9, n_alt = 0
   Insn 64: point = 9, n_alt = 8
   Insn 63: point = 10, n_alt = 0
   Insn 62: point = 12, n_alt = 0
   Insn 61: point = 14, n_alt = -2
   Insn 60: point = 15, n_alt = 0
   Insn 59: point = 15, n_alt = 0
   Insn 58: point = 15, n_alt = -2
   Insn 57: point = 15, n_alt = 0
   Insn 56: point = 15, n_alt = 0
   Insn 55: point = 15, n_alt = 0
   Insn 54: point = 17, n_alt = 0
   Insn 53: point = 18, n_alt = 0
   Insn 52: point = 20, n_alt = 0
   Insn 51: point = 21, n_alt = 0
   Insn 50: point = 21, n_alt = 0
   Insn 82: point = 22, n_alt = 0
	   Creating copy r122<-r123@1000
   Insn 49: point = 24, n_alt = 0
   Insn 48: point = 25, n_alt = 0
   Insn 47: point = 26, n_alt = 0
   Insn 46: point = 27, n_alt = 0
   Insn 45: point = 29, n_alt = 0
   Insn 44: point = 31, n_alt = 0
   Insn 43: point = 32, n_alt = 0
   Insn 42: point = 34, n_alt = 0
   Insn 41: point = 35, n_alt = -2
   Insn 40: point = 36, n_alt = 0
   Insn 39: point = 36, n_alt = 0
   Insn 38: point = 36, n_alt = -2
   Insn 37: point = 36, n_alt = 0
   Insn 36: point = 36, n_alt = 0
   Insn 35: point = 36, n_alt = 1
   Insn 34: point = 38, n_alt = -2
   Insn 33: point = 39, n_alt = 0
   Insn 32: point = 39, n_alt = 0
   Insn 31: point = 39, n_alt = -2
   Insn 30: point = 39, n_alt = 0
   Insn 29: point = 39, n_alt = 0
   Insn 81: point = 39, n_alt = 1
	   Creating copy r121->r123@1000
   Insn 28: point = 41, n_alt = 0
   Insn 27: point = 43, n_alt = 0
   Insn 26: point = 44, n_alt = 1
   Insn 25: point = 45, n_alt = 0
   Insn 24: point = 46, n_alt = -2
   Insn 23: point = 47, n_alt = 0
   Insn 22: point = 47, n_alt = 0
   Insn 21: point = 48, n_alt = 0
   Insn 20: point = 49, n_alt = 0
   Insn 19: point = 50, n_alt = 0
   Insn 18: point = 50, n_alt = 0
   Insn 17: point = 52, n_alt = 0
   Insn 16: point = 53, n_alt = 3
   Insn 15: point = 55, n_alt = 0
   Insn 14: point = 57, n_alt = -2
   Insn 13: point = 58, n_alt = 0
   Insn 12: point = 58, n_alt = 0
   Insn 11: point = 58, n_alt = -2
   Insn 10: point = 58, n_alt = 0
   Insn 9: point = 58, n_alt = 0
   Insn 8: point = 58, n_alt = 0
   Insn 7: point = 60, n_alt = 0
   Insn 6: point = 61, n_alt = 0
   Insn 5: point = 63, n_alt = 0
   Insn 79: point = 64, n_alt = 0
 r87: [8..64]
 r88: [47..61]
 r89: [56..58]
 r90: [56..57]
 r91: [54..55]
 r92: [49..53]
 r93: [48..50]
 r94: [44..46]
 r96: [37..38]
 r97: [26..36]
 r98: [25..35]
 r99: [28..32]
 r100: [28..29]
 r101: [24..27]
 r102: [11..18]
 r103: [13..15]
 r104: [13..14]
 r105: [11..12]
 r106: [9..10]
 r107: [3..4]
 r108: [0..2]
 r109: [3..7]
 r110: [62..63]
 r111: [59..60]
 r112: [51..52]
 r113: [44..45]
 r114: [42..43]
 r115: [33..34]
 r116: [30..31]
 r117: [19..20]
 r118: [16..17]
 r119: [5..6]
 r120: [0..1]
 r121: [40..41]
 r122: [21..22]
 r123: [23..39]
Compressing live ranges: from 65 to 46 - 70%
Ranges after the compression:
 r87: [6..45]
 r88: [34..43]
 r89: [40..41]
 r90: [40..41]
 r91: [38..39]
 r92: [34..37]
 r93: [34..35]
 r94: [32..33]
 r96: [26..27]
 r97: [18..25]
 r98: [18..25]
 r99: [20..23]
 r100: [20..21]
 r101: [18..19]
 r102: [8..13]
 r103: [10..11]
 r104: [10..11]
 r105: [8..9]
 r106: [6..7]
 r107: [2..3]
 r108: [0..1]
 r109: [2..5]
 r110: [44..45]
 r111: [42..43]
 r112: [36..37]
 r113: [32..33]
 r114: [30..31]
 r115: [24..25]
 r116: [22..23]
 r117: [14..15]
 r118: [12..13]
 r119: [4..5]
 r120: [0..1]
 r121: [28..29]
 r122: [16..17]
 r123: [18..27]

********** Assignment #1: **********

	 Assigning to 123 (cl=GENERAL_REGS, orig=95, freq=2000, tfirst=121, tfreq=2000)...
	 Assigning to 121 (cl=GENERAL_REGS, orig=95, freq=2000, tfirst=121, tfreq=2000)...
	   Assign 0 to reload r121 (freq=2000)
	Hard reg 0 is preferable by r123 with profit 1000
	Hard reg 0 is preferable by r122 with profit 500
	 Assigning to 122 (cl=INDEX_REGS, orig=95, freq=2000, tfirst=121, tfreq=2000)...
	   Assign 0 to reload r122 (freq=2000)
	Hard reg 0 is preferable by r123 with profit 2000
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   82: r122:SI=r95:SI
      REG_DEAD r95:SI
   Insn after restoring regs:
   81: r95:SI=r121:SI
      REG_DEAD r121:SI

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #2: **********

  BB 2
   Insn 78: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = 1
   Insn 74: point = 1, n_alt = 0
   Insn 73: point = 2, n_alt = 0
   Insn 72: point = 4, n_alt = 0
   Insn 71: point = 6, n_alt = 0
   Insn 70: point = 7, n_alt = -2
   Insn 69: point = 8, n_alt = 0
   Insn 68: point = 8, n_alt = 0
   Insn 67: point = 8, n_alt = -2
   Insn 66: point = 9, n_alt = 0
   Insn 65: point = 9, n_alt = 0
   Insn 64: point = 9, n_alt = 8
   Insn 63: point = 10, n_alt = 0
   Insn 62: point = 12, n_alt = 0
   Insn 61: point = 14, n_alt = -2
   Insn 60: point = 15, n_alt = 0
   Insn 59: point = 15, n_alt = 0
   Insn 58: point = 15, n_alt = -2
   Insn 57: point = 15, n_alt = 0
   Insn 56: point = 15, n_alt = 0
   Insn 55: point = 15, n_alt = 0
   Insn 54: point = 17, n_alt = 0
   Insn 53: point = 18, n_alt = 0
   Insn 52: point = 20, n_alt = 0
   Insn 51: point = 21, n_alt = 0
   Insn 50: point = 21, n_alt = 0
   Insn 82: point = 22, n_alt = 0
   Insn 49: point = 24, n_alt = 0
   Insn 48: point = 25, n_alt = 0
   Insn 47: point = 26, n_alt = 0
   Insn 46: point = 27, n_alt = 0
   Insn 45: point = 29, n_alt = 0
   Insn 44: point = 31, n_alt = 0
   Insn 43: point = 32, n_alt = 0
   Insn 42: point = 34, n_alt = 0
   Insn 41: point = 35, n_alt = -2
   Insn 40: point = 36, n_alt = 0
   Insn 39: point = 36, n_alt = 0
   Insn 38: point = 36, n_alt = -2
   Insn 37: point = 36, n_alt = 0
   Insn 36: point = 36, n_alt = 0
   Insn 35: point = 36, n_alt = 1
   Insn 34: point = 38, n_alt = -2
   Insn 33: point = 39, n_alt = 0
   Insn 32: point = 39, n_alt = 0
   Insn 31: point = 39, n_alt = -2
   Insn 30: point = 39, n_alt = 0
   Insn 29: point = 39, n_alt = 0
   Insn 81: point = 39, n_alt = 1
   Insn 28: point = 41, n_alt = 0
   Insn 27: point = 43, n_alt = 0
   Insn 26: point = 44, n_alt = 1
   Insn 25: point = 45, n_alt = 0
   Insn 24: point = 46, n_alt = -2
   Insn 23: point = 47, n_alt = 0
   Insn 22: point = 47, n_alt = 0
   Insn 21: point = 48, n_alt = 0
   Insn 20: point = 49, n_alt = 0
   Insn 19: point = 50, n_alt = 0
   Insn 18: point = 50, n_alt = 0
   Insn 17: point = 52, n_alt = 0
   Insn 16: point = 53, n_alt = 3
   Insn 15: point = 55, n_alt = 0
   Insn 14: point = 57, n_alt = -2
   Insn 13: point = 58, n_alt = 0
   Insn 12: point = 58, n_alt = 0
   Insn 11: point = 58, n_alt = -2
   Insn 10: point = 58, n_alt = 0
   Insn 9: point = 58, n_alt = 0
   Insn 8: point = 58, n_alt = 0
   Insn 7: point = 60, n_alt = 0
   Insn 6: point = 61, n_alt = 0
   Insn 5: point = 63, n_alt = 0
   Insn 79: point = 64, n_alt = 0
 r95: [23..39]
Compressing live ranges: from 65 to 2 - 3%
Ranges after the compression:
 r95: [0..1]
  Slot 0 regnos (width = 0):	 95
Changing spilled pseudos to memory in insn #81
Changing spilled pseudos to memory in insn #82
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #82
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
Reusing alternative 1 for insn #81
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=-24)
changing reg in insn 79
changing reg in insn 67
changing reg in insn 58
changing reg in insn 38
changing reg in insn 31
changing reg in insn 27
changing reg in insn 11
changing reg in insn 5
changing reg in insn 6
changing reg in insn 22
changing reg in insn 8
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 18
changing reg in insn 21
changing reg in insn 24
changing reg in insn 26
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 47
changing reg in insn 41
changing reg in insn 48
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 53
changing reg in insn 55
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 70
changing reg in insn 73
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 17
changing reg in insn 18
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
deleting insn with uid = 11.
deleting insn with uid = 14.
deleting insn with uid = 31.
deleting insn with uid = 34.
deleting insn with uid = 38.
deleting insn with uid = 58.
deleting insn with uid = 61.
deleting insn with uid = 67.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
rescanning insn with uid = 22.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 39.
rescanning insn with uid = 50.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 68.


string::operator+=

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={28d,26u} r1={13d,5u} r2={9d,1u} r3={1d,7u} r4={3d,3u} r5={3d,3u} r6={1d,18u} r7={24d,45u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={27d} r18={7d} r19={7d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} 
;;    total ref usage 709{600d,109u,0e} in 67{60 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120
(note 3 1 79 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 79 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 79 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [110])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 4 si [orig:88 _1 ] [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [110])
                (const_int 28 [0x1c])) [19 api.mm.realloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 5 di [orig:89 _2 ] [89])
        (mem:SI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 4 [0x4])) [1 this_23(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 10 9 12 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 12 10 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 13 12 15 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 13 16 2 (parallel [
            (set (reg:SI 0 ax [orig:91 _4 ] [91])
                (plus:SI (reg:SI 0 ax [orig:90 _3 ] [90])
                    (reg:SI 5 di [orig:89 _2 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 194 {*addsi_1}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:SI 1 dx [orig:92 _5 ] [92])
                (plus:SI (reg:SI 0 ax [orig:91 _4 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 194 {*addsi_1}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 0 ax [orig:93 _6 ] [93])
        (mem/f:SI (reg/f:SI 0 ax [112]) [2 this_23(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 20 19 21 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:92 _5 ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 21 20 22 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:93 _6 ] [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 4 si [orig:88 _1 ] [88]) [0 *_1 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 565 {*call_value}
     (nil)
    (nil))
(insn 23 22 24 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 24 23 25 2 (set (reg/f:SI 1 dx [orig:94 _7 ] [94])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/f:SI (reg/f:SI 0 ax [113]) [2 this_23(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:94 _7 ] [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":134 79 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:SI 0 ax [114])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(insn 28 27 81 2 (set (reg/f:SI 0 ax [orig:95 _8 ] [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 24 [0x18])) [18 api.mm.memcpy+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(insn 81 28 83 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [22 %sfp+-4 S4 A32])
        (reg/f:SI 0 ax [orig:95 _8 ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(note 83 81 29 2 NOTE_INSN_DELETED)
(insn 29 83 30 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 30 29 32 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 32 30 33 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 33 32 35 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 35 33 36 2 (set (reg:DI 4 si [orig:97 _10 ] [97])
        (zero_extend:DI (reg:SI 0 ax [orig:96 _9 ] [96]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 120 {*zero_extendsidi2}
     (nil))
(insn 36 35 37 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 37 36 39 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 39 37 40 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string11toCharArrayEv") [flags 0x1]  <function_decl 0x7ff72fe37f00 toCharArray>) [0 toCharArray S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 40 39 41 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 41 40 42 2 (set (reg/f:SI 2 cx [orig:98 _11 ] [98])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg/f:SI 1 dx [orig:99 _12 ] [99])
        (mem/f:SI (reg/f:SI 0 ax [115]) [2 this_23(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(insn 44 43 45 2 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:SI 0 ax [orig:100 _13 ] [100])
        (mem:SI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 4 [0x4])) [1 this_23(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (parallel [
            (set (reg/f:SI 0 ax [orig:101 _14 ] [101])
                (plus:SI (reg:SI 0 ax [orig:100 _13 ] [100])
                    (reg/f:SI 1 dx [orig:99 _12 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 194 {*addsi_1}
     (nil))
(insn 47 46 48 2 (set (mem:DI (pre_dec:SI (reg/f:SI 7 sp)) [21  S8 A64])
        (reg:DI 4 si [orig:97 _10 ] [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 59 {*pushdi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 48 47 49 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 2 cx [orig:98 _11 ] [98])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 49 48 82 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:101 _14 ] [101])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 82 49 50 2 (set (reg/f:SI 0 ax [orig:95 _8 ] [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [22 %sfp+-4 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 79 {*movsi_internal}
     (nil))
(call_insn 50 82 51 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:95 _8 ] [95]) [0 *_8 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 565 {*call_value}
     (nil)
    (nil))
(insn 51 50 52 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":135 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 52 51 53 2 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 79 {*movsi_internal}
     (nil))
(insn 53 52 54 2 (set (reg/f:SI 4 si [orig:102 _15 ] [102])
        (mem/f:SI (reg/f:SI 0 ax [117]) [2 this_23(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 79 {*movsi_internal}
     (nil))
(insn 54 53 55 2 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 79 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:SI 5 di [orig:103 _16 ] [103])
        (mem:SI (plus:SI (reg/f:SI 0 ax [118])
                (const_int 4 [0x4])) [1 this_23(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 79 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 57 56 59 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 59 57 60 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 60 59 62 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 62 60 63 2 (parallel [
            (set (reg:SI 0 ax [orig:105 _18 ] [105])
                (plus:SI (reg:SI 0 ax [orig:104 _17 ] [104])
                    (reg:SI 5 di [orig:103 _16 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 194 {*addsi_1}
     (nil))
(insn 63 62 64 2 (parallel [
            (set (reg/f:SI 0 ax [orig:106 _19 ] [106])
                (plus:SI (reg:SI 0 ax [orig:105 _18 ] [105])
                    (reg/f:SI 4 si [orig:102 _15 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 194 {*addsi_1}
     (nil))
(insn 64 63 65 2 (set (mem:QI (reg/f:SI 0 ax [orig:106 _19 ] [106]) [0 *_19+0 S1 A8])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":136 81 {*movqi_internal}
     (nil))
(insn 65 64 66 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 66 65 68 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 68 66 69 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 69 68 70 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 70 69 71 2 (set (reg:SI 1 dx [orig:109 _34 ] [109])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 79 {*movsi_internal}
     (nil))
(insn 71 70 72 2 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 79 {*movsi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 0 ax [orig:107 _20 ] [107])
        (mem:SI (plus:SI (reg/f:SI 0 ax [119])
                (const_int 4 [0x4])) [1 this_23(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 79 {*movsi_internal}
     (nil))
(insn 73 72 74 2 (parallel [
            (set (reg:SI 1 dx [orig:108 _21 ] [108])
                (plus:SI (reg:SI 1 dx [orig:109 _34 ] [109])
                    (reg:SI 0 ax [orig:107 _20 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 194 {*addsi_1}
     (nil))
(insn 74 73 75 2 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 79 {*movsi_internal}
     (nil))
(insn 75 74 78 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [120])
                (const_int 4 [0x4])) [1 this_23(D)->_length+0 S4 A32])
        (reg:SI 1 dx [orig:108 _21 ] [108])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":137 79 {*movsi_internal}
     (nil))
(insn 78 75 80 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":138 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 80 78 0 NOTE_INSN_DELETED)

;; Function string::operator+= (_ZN6stringpLEc, funcdef_no=40, decl_uid=1366, cgraph_uid=29, symbol_order=30)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 29:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 36:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 39:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 44: point = 0, n_alt = -1
   Insn 41: point = 0, n_alt = 1
   Insn 40: point = 1, n_alt = 0
   Insn 39: point = 2, n_alt = 3
   Insn 38: point = 4, n_alt = 0
   Insn 37: point = 6, n_alt = 0
   Insn 36: point = 7, n_alt = 8
   Insn 35: point = 8, n_alt = 0
   Insn 34: point = 10, n_alt = 0
   Insn 33: point = 12, n_alt = 0
   Insn 32: point = 14, n_alt = 0
   Insn 31: point = 15, n_alt = 0
   Insn 30: point = 17, n_alt = 0
   Insn 29: point = 18, n_alt = 8
   Insn 28: point = 19, n_alt = 4
   Insn 27: point = 20, n_alt = 0
   Insn 26: point = 22, n_alt = 0
   Insn 25: point = 24, n_alt = 0
   Insn 24: point = 25, n_alt = 0
   Insn 23: point = 27, n_alt = 0
   Insn 22: point = 28, n_alt = 1
   Insn 21: point = 29, n_alt = 0
   Insn 20: point = 30, n_alt = -2
   Insn 19: point = 31, n_alt = 0
   Insn 18: point = 31, n_alt = 0
   Insn 17: point = 32, n_alt = 0
   Insn 16: point = 33, n_alt = 0
   Insn 15: point = 34, n_alt = 0
   Insn 14: point = 34, n_alt = 0
   Insn 13: point = 36, n_alt = 0
   Insn 12: point = 37, n_alt = 3
   Insn 11: point = 39, n_alt = 0
   Insn 10: point = 41, n_alt = 0
   Insn 9: point = 42, n_alt = 0
   Insn 8: point = 44, n_alt = 0
   Insn 4: point = 46, n_alt = 8
   Insn 3: point = 47, n_alt = 0
   Insn 2: point = 49, n_alt = 0
   Insn 45: point = 50, n_alt = 0
 r87: [45..50]
 r88: [31..42]
 r89: [38..39]
 r90: [33..37]
 r91: [32..34]
 r92: [28..30]
 r93: [21..25]
 r94: [21..22]
 r95: [18..20]
 r96: [9..15]
 r97: [11..12]
 r98: [9..10]
 r99: [7..8]
 r100: [3..4]
 r101: [0..2]
 r102: [48..49]
 r103: [46..47]
 r104: [43..44]
 r105: [40..41]
 r106: [35..36]
 r107: [28..29]
 r108: [26..27]
 r109: [23..24]
 r110: [18..19]
 r111: [16..17]
 r112: [13..14]
 r113: [5..6]
 r114: [0..1]
Compressing live ranges: from 51 to 40 - 78%
Ranges after the compression:
 r87: [36..39]
 r88: [26..33]
 r89: [30..31]
 r90: [26..29]
 r91: [26..27]
 r92: [24..25]
 r93: [18..21]
 r94: [18..19]
 r95: [16..17]
 r96: [8..13]
 r97: [10..11]
 r98: [8..9]
 r99: [6..7]
 r100: [2..3]
 r101: [0..1]
 r102: [38..39]
 r103: [36..37]
 r104: [34..35]
 r105: [32..33]
 r106: [28..29]
 r107: [24..25]
 r108: [22..23]
 r109: [20..21]
 r110: [16..17]
 r111: [14..15]
 r112: [12..13]
 r113: [4..5]
 r114: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 45
changing reg in insn 8
changing reg in insn 9
changing reg in insn 18
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 14
changing reg in insn 17
changing reg in insn 20
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 18.


string::operator+=

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={18d,17u} r1={13d,11u} r2={3d,1u} r6={1d,14u} r7={5d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={9d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 173{120d,53u,0e} in 39{38 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
(note 6 1 45 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 45 6 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 45 3 2 (set (reg:SI 1 dx [102])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 c+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":140 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 1 dx [103])
        (reg:QI 1 dx [102])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":140 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c+0 S1 A32])
        (reg:QI 1 dx [103])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":140 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 0 ax [104])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [104])
                (const_int 28 [0x1c])) [19 api.mm.realloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 1 dx [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [orig:89 _2 ] [89])
        (mem:SI (plus:SI (reg/f:SI 1 dx [105])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 2 cx [orig:90 _3 ] [90])
                (plus:SI (reg:SI 1 dx [orig:89 _2 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 194 {*addsi_1}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 1 dx [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 1 dx [orig:91 _4 ] [91])
        (mem/f:SI (reg/f:SI 1 dx [106]) [2 this_16(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 16 15 17 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 2 cx [orig:90 _3 ] [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 17 16 18 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 565 {*call_value}
     (nil)
    (nil))
(insn 19 18 20 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 20 19 21 2 (set (reg/f:SI 1 dx [orig:92 _5 ] [92])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/f:SI (reg/f:SI 0 ax [107]) [2 this_16(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:92 _5 ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":141 79 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":142 79 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg/f:SI 1 dx [orig:93 _6 ] [93])
        (mem/f:SI (reg/f:SI 0 ax [108]) [2 this_16(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":142 79 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":142 79 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 ax [orig:94 _7 ] [94])
        (mem:SI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":142 79 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg/f:SI 1 dx [orig:95 _8 ] [95])
                (plus:SI (reg/f:SI 1 dx [orig:93 _6 ] [93])
                    (reg:SI 0 ax [orig:94 _7 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":142 194 {*addsi_1}
     (nil))
(insn 28 27 29 2 (set (reg:QI 0 ax [110])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c+0 S1 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":142 81 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (set (mem:QI (reg/f:SI 1 dx [orig:95 _8 ] [95]) [0 *_8+0 S1 A8])
        (reg:QI 0 ax [110])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":142 81 {*movqi_internal}
     (nil))
(insn 30 29 31 2 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":143 79 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg/f:SI 1 dx [orig:96 _9 ] [96])
        (mem/f:SI (reg/f:SI 0 ax [111]) [2 this_16(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":143 79 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":143 79 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:SI 0 ax [orig:97 _10 ] [97])
        (mem:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":143 79 {*movsi_internal}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg:SI 0 ax [orig:98 _11 ] [98])
                (plus:SI (reg:SI 0 ax [orig:97 _10 ] [97])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":143 194 {*addsi_1}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg/f:SI 0 ax [orig:99 _12 ] [99])
                (plus:SI (reg:SI 0 ax [orig:98 _11 ] [98])
                    (reg/f:SI 1 dx [orig:96 _9 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":143 194 {*addsi_1}
     (nil))
(insn 36 35 37 2 (set (mem:QI (reg/f:SI 0 ax [orig:99 _12 ] [99]) [0 *_12+0 S1 A8])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":143 81 {*movqi_internal}
     (nil))
(insn 37 36 38 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":144 79 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:SI 0 ax [orig:100 _13 ] [100])
        (mem:SI (plus:SI (reg/f:SI 0 ax [113])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":144 79 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (parallel [
            (set (reg:SI 1 dx [orig:101 _14 ] [101])
                (plus:SI (reg:SI 0 ax [orig:100 _13 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":144 194 {*addsi_1}
     (nil))
(insn 40 39 41 2 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":144 79 {*movsi_internal}
     (nil))
(insn 41 40 44 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])
        (reg:SI 1 dx [orig:101 _14 ] [101])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":144 79 {*movsi_internal}
     (nil))
(insn 44 41 46 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":145 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 46 44 0 NOTE_INSN_DELETED)

;; Function string::operator[] (_ZN6stringixEj, funcdef_no=41, decl_uid=1369, cgraph_uid=30, symbol_order=31)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 13
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) q  (1) m {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) q  (1) n {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 22: point = 1, n_alt = -2
  BB 3
   Insn 29: point = 4, n_alt = -1
   Insn 14: point = 4, n_alt = 4
   Insn 13: point = 6, n_alt = 0
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 9, n_alt = 0
   Insn 10: point = 11, n_alt = 0
  BB 4
   Insn 19: point = 12, n_alt = 3
  BB 2
   Insn 8: point = 13, n_alt = -1
   Insn 7: point = 13, n_alt = 0
   Insn 6: point = 14, n_alt = 0
   Insn 5: point = 16, n_alt = 0
   Insn 31: point = 17, n_alt = 0
 r87: [17..17]
 r88: [13..14]
 r89: [7..9]
 r90: [5..6]
 r91: [12..12] [2..4]
 r92: [0..1]
 r93: [15..16]
 r94: [10..11]
 r95: [7..8]
Compressing live ranges: from 18 to 16 - 88%
Ranges after the compression:
 r87: [15..15]
 r88: [11..12]
 r89: [6..7]
 r90: [4..5]
 r91: [10..10] [2..3]
 r92: [0..1]
 r93: [13..14]
 r94: [8..9]
 r95: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 31
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 14
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns


string::operator[]

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 17 [flags]
;;  ref usage 	r0={10d,8u} r1={2d,1u,1e} r2={1d} r6={1d,9u} r7={1d,5u} r16={1e} r17={3d,1u} r20={1d,1u} 
;;    total ref usage 46{19d,25u,2e} in 14{14 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 93
(note 3 1 31 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 31 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 31 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":148 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 4 [0x4])) [1 this_6(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":148 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [1 i+0 S4 A32])
            (reg:SI 0 ax [orig:88 _1 ] [88]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":148 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":148 548 {*jcc}
     (nil)
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 94 95
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":149 79 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [94]) [2 this_6(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":149 79 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":149 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
                (plus:SI (reg:SI 0 ax [95])
                    (reg/f:SI 1 dx [orig:89 _2 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":149 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 1 dx [orig:89 _2 ] [89])
            (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 i+0 S4 A32]))
        (nil)))
(insn 14 13 29 3 (set (reg:QI 0 ax [orig:91 _4 ] [91])
        (mem:QI (reg/f:SI 0 ax [orig:90 _3 ] [90]) [0 *_3+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":149 81 {*movqi_internal}
     (nil))
(jump_insn 29 14 30 3 (set (pc)
        (label_ref 20)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":149 549 {jump}
     (nil)
 -> 20)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

(barrier 30 29 17)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91
(code_label 17 30 18 4 47 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:QI 0 ax [orig:91 _4 ] [91])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":153 81 {*movqi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
;; lr  def 	 0 [ax] 92
(code_label 20 19 21 5 48 (nil) [1 uses])
(note 21 20 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 21 27 5 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:92 <retval> ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":154 81 {*movqi_internal}
     (nil))
(insn 27 26 32 5 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":154 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 32 27 0 NOTE_INSN_DELETED)

;; Function string::operator== (_ZN6stringeqES_, funcdef_no=42, decl_uid=1372, cgraph_uid=31, symbol_order=32)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 22: point = 1, n_alt = -2
   Insn 19: point = 3, n_alt = -2
   Insn 18: point = 4, n_alt = 0
   Insn 17: point = 4, n_alt = 0
   Insn 16: point = 4, n_alt = -2
   Insn 15: point = 5, n_alt = 0
   Insn 14: point = 6, n_alt = 0
   Insn 13: point = 7, n_alt = 0
   Insn 12: point = 7, n_alt = 0
   Insn 11: point = 9, n_alt = 0
   Insn 10: point = 10, n_alt = -2
   Insn 9: point = 11, n_alt = 0
   Insn 8: point = 11, n_alt = 0
   Insn 7: point = 11, n_alt = -2
   Insn 6: point = 11, n_alt = 0
   Insn 5: point = 11, n_alt = 0
   Insn 29: point = 11, n_alt = 0
 r87: [4..11]
 r88: [6..10]
 r89: [5..7]
 r90: [2..3]
 r91: [0..1]
 r92: [8..9]
Compressing live ranges: from 12 to 8 - 66%
Ranges after the compression:
 r87: [4..7]
 r88: [4..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 29
changing reg in insn 16
changing reg in insn 7
changing reg in insn 10
changing reg in insn 14
changing reg in insn 12
changing reg in insn 15
changing reg in insn 19
changing reg in insn 22
changing reg in insn 22
changing reg in insn 26
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 7.
deleting insn with uid = 16.
deleting insn with uid = 19.
deleting insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 17.


string::operator==

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,6u} r1={4d,1u} r2={3d} r3={1d,2u} r6={1d,4u} r7={8d,15u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 200{171d,29u,0e} in 15{13 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92
(note 3 1 29 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 29 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 29 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string11toCharArrayEv") [flags 0x1]  <function_decl 0x7ff72fe37f00 toCharArray>) [0 toCharArray S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg/f:SI 1 dx [orig:88 _1 ] [88])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [92]) [2 this_6(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 14 13 15 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 15 14 17 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 17 15 18 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strcmpPcS_") [flags 0x1]  <function_decl 0x7ff72fe41600 strcmp>) [0 strcmp S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 18 17 26 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":157 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 26 18 27 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:91 <retval> ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":158 81 {*movqi_internal}
     (nil))
(insn 27 26 30 2 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":158 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 30 27 0 NOTE_INSN_DELETED)

;; Function string::operator!= (_ZN6stringneES_, funcdef_no=43, decl_uid=1375, cgraph_uid=32, symbol_order=33)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -2
   Insn 20: point = 3, n_alt = 0
   Insn 19: point = 5, n_alt = -2
   Insn 18: point = 6, n_alt = 0
   Insn 17: point = 6, n_alt = 0
   Insn 16: point = 6, n_alt = -2
   Insn 15: point = 7, n_alt = 0
   Insn 14: point = 8, n_alt = 0
   Insn 13: point = 9, n_alt = 0
   Insn 12: point = 9, n_alt = 0
   Insn 11: point = 11, n_alt = 0
   Insn 10: point = 12, n_alt = -2
   Insn 9: point = 13, n_alt = 0
   Insn 8: point = 13, n_alt = 0
   Insn 7: point = 13, n_alt = -2
   Insn 6: point = 13, n_alt = 0
   Insn 5: point = 13, n_alt = 0
   Insn 30: point = 13, n_alt = 0
 r87: [6..13]
 r88: [8..12]
 r89: [7..9]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [10..11]
Compressing live ranges: from 14 to 10 - 71%
Ranges after the compression:
 r87: [6..9]
 r88: [6..9]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 30
changing reg in insn 16
changing reg in insn 7
changing reg in insn 10
changing reg in insn 14
changing reg in insn 12
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 7.
deleting insn with uid = 16.
deleting insn with uid = 19.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 17.


string::operator!=

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,7u} r1={4d,1u} r2={3d} r3={1d,2u} r6={1d,4u} r7={8d,15u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={8d} r18={2d} r19={2d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 203{173d,30u,0e} in 16{14 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93
(note 3 1 30 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 30 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 30 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string11toCharArrayEv") [flags 0x1]  <function_decl 0x7ff72fe37f00 toCharArray>) [0 toCharArray S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg/f:SI 1 dx [orig:88 _1 ] [88])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [93]) [2 this_7(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 14 13 15 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 15 14 17 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 17 15 18 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strcmpPcS_") [flags 0x1]  <function_decl 0x7ff72fe41600 strcmp>) [0 strcmp S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 18 17 20 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 20 18 27 2 (parallel [
            (set (reg:QI 0 ax [orig:91 _9 ] [91])
                (xor:QI (reg:QI 0 ax [orig:90 _3 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":161 368 {*xorqi_1}
     (nil))
(insn 27 20 28 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:92 <retval> ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":162 81 {*movqi_internal}
     (nil))
(insn 28 27 31 2 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":162 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 31 28 0 NOTE_INSN_DELETED)

;; Function string::operator== (_ZN6stringeqEPc, funcdef_no=44, decl_uid=1378, cgraph_uid=33, symbol_order=34)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = -2
   Insn 12: point = 4, n_alt = 0
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 4, n_alt = -2
   Insn 9: point = 5, n_alt = 0
   Insn 8: point = 6, n_alt = 0
   Insn 7: point = 6, n_alt = 0
   Insn 6: point = 6, n_alt = 0
   Insn 5: point = 8, n_alt = 0
   Insn 23: point = 9, n_alt = 0
 r87: [4..9]
 r88: [5..6]
 r89: [2..3]
 r90: [0..1]
 r91: [7..8]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r87: [4..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 23
changing reg in insn 10
changing reg in insn 6
changing reg in insn 9
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 13.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


string::operator==

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,4u} r1={4d,2u} r2={2d} r3={1d,1u} r6={1d,4u} r7={5d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 113{92d,21u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91
(note 3 1 23 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 23 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 23 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 1 dx [orig:88 _1 ] [88])
        (mem/f:SI (reg/f:SI 1 dx [91]) [2 this_3(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 8 7 9 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 9 8 10 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [87])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 79 {*movsi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strcmpPcS_") [flags 0x1]  <function_decl 0x7ff72fe41600 strcmp>) [0 strcmp S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 12 11 20 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":165 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 20 12 21 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:90 <retval> ] [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":166 81 {*movqi_internal}
     (nil))
(insn 21 20 24 2 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":166 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 24 21 0 NOTE_INSN_DELETED)

;; Function string::operator!= (_ZN6stringneEPc, funcdef_no=45, decl_uid=1381, cgraph_uid=34, symbol_order=35)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=13,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 22: point = 0, n_alt = -1
   Insn 21: point = 0, n_alt = -2
   Insn 17: point = 1, n_alt = -2
   Insn 14: point = 3, n_alt = 0
   Insn 13: point = 5, n_alt = -2
   Insn 12: point = 6, n_alt = 0
   Insn 11: point = 6, n_alt = 0
   Insn 10: point = 6, n_alt = -2
   Insn 9: point = 7, n_alt = 0
   Insn 8: point = 8, n_alt = 0
   Insn 7: point = 8, n_alt = 0
   Insn 6: point = 8, n_alt = 0
   Insn 5: point = 10, n_alt = 0
   Insn 24: point = 11, n_alt = 0
 r87: [6..11]
 r88: [7..8]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [9..10]
Compressing live ranges: from 12 to 10 - 83%
Ranges after the compression:
 r87: [6..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 24
changing reg in insn 10
changing reg in insn 6
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 17
changing reg in insn 17
changing reg in insn 21
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.


string::operator!=

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={4d,2u} r2={2d} r3={1d,1u} r6={1d,4u} r7={5d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 116{94d,22u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92
(note 3 1 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 24 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 24 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 1 dx [orig:88 _1 ] [88])
        (mem/f:SI (reg/f:SI 1 dx [92]) [2 this_4(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 8 7 9 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 9 8 10 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:88 _1 ] [88])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [87])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 79 {*movsi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strcmpPcS_") [flags 0x1]  <function_decl 0x7ff72fe41600 strcmp>) [0 strcmp S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 12 11 14 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 14 12 21 2 (parallel [
            (set (reg:QI 0 ax [orig:90 _7 ] [90])
                (xor:QI (reg:QI 0 ax [orig:89 _2 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":169 368 {*xorqi_1}
     (nil))
(insn 21 14 22 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:91 <retval> ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":170 81 {*movqi_internal}
     (nil))
(insn 22 21 25 2 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":170 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 25 22 0 NOTE_INSN_DELETED)

;; Function string::operator= (_ZN6stringaSES_, funcdef_no=46, decl_uid=1384, cgraph_uid=35, symbol_order=36)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=4: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=6,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            alt=8: Bad operand -- refuse
            alt=9: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=11: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=12,overall=13,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=13: Bad operand -- refuse
            alt=14: Bad operand -- refuse
            alt=15: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=16: Bad operand -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=116 from oldreg=96, assigning class GENERAL_REGS to r116
   41: r116:SI=[r111:SI+0x18]
      REG_DEAD r111:SI
    Inserting insn reload after:
   69: r96:SI=r116:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) ?r  (1) rm {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =<  (1) riF*o {*pushdi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 56:  (1) lBwBz {*call_value} (sp_off=-16)
      Creating newreg=117 from oldreg=96, assigning class INDEX_REGS to r117
   56: ax:SI=call [r117:SI] argc:0x10
      REG_DEAD r96:SI
      REG_UNUSED ax:SI
    Inserting insn reload before:
   70: r117:SI=r96:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 63:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=118 from oldreg=96, assigning class GENERAL_REGS to inheritance r118
    Original reg change 96->118 (bb4):
   69: r118:SI=r116:SI
    Add original<-inheritance after:
   71: r96:SI=r118:SI

    Inheritance reuse change 96->118 (bb4):
   70: r117:SI=r118:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    71: r96:SI=r118:SI
deleting insn with uid = 71.

********** Pseudo live ranges #1: **********

  BB 4
   Insn 66: point = 0, n_alt = -1
   Insn 63: point = 0, n_alt = 8
   Insn 62: point = 1, n_alt = 0
   Insn 61: point = 3, n_alt = 0
   Insn 60: point = 5, n_alt = 0
   Insn 59: point = 6, n_alt = 0
   Insn 58: point = 8, n_alt = 0
   Insn 57: point = 9, n_alt = 0
   Insn 56: point = 9, n_alt = 0
   Insn 70: point = 10, n_alt = 0
	   Creating copy r117<-r118@1000
   Insn 55: point = 12, n_alt = 0
   Insn 54: point = 13, n_alt = 0
   Insn 53: point = 14, n_alt = 0
   Insn 52: point = 15, n_alt = 0
   Insn 51: point = 17, n_alt = 0
   Insn 50: point = 18, n_alt = -2
   Insn 49: point = 19, n_alt = 0
   Insn 48: point = 19, n_alt = 0
   Insn 47: point = 19, n_alt = -2
   Insn 46: point = 20, n_alt = 0
   Insn 45: point = 20, n_alt = 0
   Insn 44: point = 20, n_alt = 1
   Insn 43: point = 22, n_alt = 0
   Insn 42: point = 24, n_alt = 0
   Insn 69: point = 25, n_alt = 1
	   Creating copy r116->r118@1000
   Insn 41: point = 27, n_alt = 0
   Insn 40: point = 29, n_alt = 0
   Insn 39: point = 30, n_alt = 1
   Insn 38: point = 31, n_alt = 0
   Insn 37: point = 32, n_alt = -2
   Insn 36: point = 33, n_alt = 0
   Insn 35: point = 33, n_alt = 0
   Insn 34: point = 34, n_alt = 0
   Insn 33: point = 35, n_alt = 0
   Insn 32: point = 35, n_alt = 0
   Insn 31: point = 37, n_alt = 0
   Insn 30: point = 39, n_alt = 0
   Insn 29: point = 40, n_alt = 0
   Insn 28: point = 42, n_alt = 0
   Insn 27: point = 43, n_alt = 1
   Insn 26: point = 44, n_alt = 0
   Insn 25: point = 45, n_alt = -2
   Insn 24: point = 46, n_alt = 0
   Insn 23: point = 46, n_alt = 0
   Insn 22: point = 46, n_alt = -2
   Insn 21: point = 46, n_alt = 0
   Insn 20: point = 46, n_alt = 0
  BB 3
   Insn 17: point = 47, n_alt = 0
   Insn 16: point = 47, n_alt = 0
   Insn 15: point = 48, n_alt = 0
   Insn 14: point = 49, n_alt = 0
   Insn 13: point = 49, n_alt = 0
   Insn 12: point = 51, n_alt = 0
   Insn 11: point = 52, n_alt = 0
   Insn 10: point = 54, n_alt = 0
  BB 2
   Insn 8: point = 56, n_alt = -1
   Insn 7: point = 56, n_alt = 0
   Insn 6: point = 57, n_alt = 4
   Insn 5: point = 59, n_alt = 0
   Insn 67: point = 60, n_alt = 0
 r87: [19..60]
 r88: [56..57]
 r89: [47..52]
 r90: [48..49]
 r91: [43..45]
 r92: [33..40]
 r93: [36..37]
 r94: [34..35]
 r95: [30..32]
 r97: [21..22]
 r98: [14..20]
 r99: [13..18]
 r100: [12..15]
 r101: [2..6]
 r102: [2..3]
 r103: [0..1]
 r104: [58..59]
 r105: [53..54]
 r106: [50..51]
 r107: [43..44]
 r108: [41..42]
 r109: [38..39]
 r110: [30..31]
 r111: [28..29]
 r112: [23..24]
 r113: [16..17]
 r114: [7..8]
 r115: [4..5]
 r116: [26..27]
 r117: [9..10]
 r118: [11..25]
Compressing live ranges: from 61 to 46 - 75%
Ranges after the compression:
 r87: [14..45]
 r88: [42..43]
 r89: [36..39]
 r90: [36..37]
 r91: [34..35]
 r92: [26..31]
 r93: [28..29]
 r94: [26..27]
 r95: [24..25]
 r97: [16..17]
 r98: [10..15]
 r99: [10..13]
 r100: [10..11]
 r101: [2..5]
 r102: [2..3]
 r103: [0..1]
 r104: [44..45]
 r105: [40..41]
 r106: [38..39]
 r107: [34..35]
 r108: [32..33]
 r109: [30..31]
 r110: [24..25]
 r111: [22..23]
 r112: [18..19]
 r113: [12..13]
 r114: [6..7]
 r115: [4..5]
 r116: [20..21]
 r117: [8..9]
 r118: [10..19]

********** Assignment #1: **********

	 Assigning to 118 (cl=GENERAL_REGS, orig=96, freq=2000, tfirst=116, tfreq=2000)...
	 Assigning to 116 (cl=GENERAL_REGS, orig=96, freq=2000, tfirst=116, tfreq=2000)...
	   Assign 0 to reload r116 (freq=2000)
	Hard reg 0 is preferable by r118 with profit 1000
	Hard reg 0 is preferable by r117 with profit 500
	 Assigning to 117 (cl=INDEX_REGS, orig=96, freq=2000, tfirst=116, tfreq=2000)...
	   Assign 0 to reload r117 (freq=2000)
	Hard reg 0 is preferable by r118 with profit 2000
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   70: r117:SI=r96:SI
      REG_DEAD r96:SI
   Insn after restoring regs:
   69: r96:SI=r116:SI
      REG_DEAD r116:SI

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #2: **********

  BB 4
   Insn 66: point = 0, n_alt = -1
   Insn 63: point = 0, n_alt = 8
   Insn 62: point = 1, n_alt = 0
   Insn 61: point = 3, n_alt = 0
   Insn 60: point = 5, n_alt = 0
   Insn 59: point = 6, n_alt = 0
   Insn 58: point = 8, n_alt = 0
   Insn 57: point = 9, n_alt = 0
   Insn 56: point = 9, n_alt = 0
   Insn 70: point = 10, n_alt = 0
   Insn 55: point = 12, n_alt = 0
   Insn 54: point = 13, n_alt = 0
   Insn 53: point = 14, n_alt = 0
   Insn 52: point = 15, n_alt = 0
   Insn 51: point = 17, n_alt = 0
   Insn 50: point = 18, n_alt = -2
   Insn 49: point = 19, n_alt = 0
   Insn 48: point = 19, n_alt = 0
   Insn 47: point = 19, n_alt = -2
   Insn 46: point = 20, n_alt = 0
   Insn 45: point = 20, n_alt = 0
   Insn 44: point = 20, n_alt = 1
   Insn 43: point = 22, n_alt = 0
   Insn 42: point = 24, n_alt = 0
   Insn 69: point = 25, n_alt = 1
   Insn 41: point = 27, n_alt = 0
   Insn 40: point = 29, n_alt = 0
   Insn 39: point = 30, n_alt = 1
   Insn 38: point = 31, n_alt = 0
   Insn 37: point = 32, n_alt = -2
   Insn 36: point = 33, n_alt = 0
   Insn 35: point = 33, n_alt = 0
   Insn 34: point = 34, n_alt = 0
   Insn 33: point = 35, n_alt = 0
   Insn 32: point = 35, n_alt = 0
   Insn 31: point = 37, n_alt = 0
   Insn 30: point = 39, n_alt = 0
   Insn 29: point = 40, n_alt = 0
   Insn 28: point = 42, n_alt = 0
   Insn 27: point = 43, n_alt = 1
   Insn 26: point = 44, n_alt = 0
   Insn 25: point = 45, n_alt = -2
   Insn 24: point = 46, n_alt = 0
   Insn 23: point = 46, n_alt = 0
   Insn 22: point = 46, n_alt = -2
   Insn 21: point = 46, n_alt = 0
   Insn 20: point = 46, n_alt = 0
  BB 3
   Insn 17: point = 47, n_alt = 0
   Insn 16: point = 47, n_alt = 0
   Insn 15: point = 48, n_alt = 0
   Insn 14: point = 49, n_alt = 0
   Insn 13: point = 49, n_alt = 0
   Insn 12: point = 51, n_alt = 0
   Insn 11: point = 52, n_alt = 0
   Insn 10: point = 54, n_alt = 0
  BB 2
   Insn 8: point = 56, n_alt = -1
   Insn 7: point = 56, n_alt = 0
   Insn 6: point = 57, n_alt = 4
   Insn 5: point = 59, n_alt = 0
   Insn 67: point = 60, n_alt = 0
 r96: [11..25]
Compressing live ranges: from 61 to 2 - 3%
Ranges after the compression:
 r96: [0..1]
  Slot 0 regnos (width = 0):	 96
Changing spilled pseudos to memory in insn #69
Changing spilled pseudos to memory in insn #70
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #70
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
Reusing alternative 1 for insn #69
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=-24)
changing reg in insn 67
changing reg in insn 47
changing reg in insn 40
changing reg in insn 28
changing reg in insn 22
changing reg in insn 10
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 16
changing reg in insn 13
changing reg in insn 15
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 35
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 37
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 53
changing reg in insn 50
changing reg in insn 54
changing reg in insn 52
changing reg in insn 55
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 51
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
deleting insn with uid = 22.
deleting insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 16.
verify found no changes in insn with uid = 23.
rescanning insn with uid = 35.
verify found no changes in insn with uid = 48.
rescanning insn with uid = 56.


string::operator=

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={25d,22u} r1={15d,9u} r2={6d} r3={1d,5u} r4={1d,1u} r5={1d,1u} r6={1d,17u} r7={17d,34u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={18d,1u} r18={5d} r19={5d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 527{436d,91u,0e} in 58{53 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 104
(note 3 1 67 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 67 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 67 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":173 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:QI 0 ax [orig:88 _1 ] [88])
        (mem:QI (plus:SI (reg/f:SI 0 ax [104])
                (const_int 8 [0x8])) [6 this_19(D)->_init+0 S1 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":173 81 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _1 ] [88])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":173 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":173 548 {*jcc}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 105 106
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [105])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 79 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 20 [0x14])) [17 api.mm.free+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 79 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 1 dx [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg/f:SI 1 dx [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 1 dx [106]) [2 this_19(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 79 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 15 14 16 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:90 _3 ] [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 16 15 17 3 (call (mem:QI (reg/f:SI 0 ax [orig:89 _2 ] [89]) [0 *_2 S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 554 {*call}
     (nil)
    (nil))
(insn 17 16 18 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":174 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 97 98 99 100 101 102 103 107 108 109 110 111 112 113 114 115
(code_label 18 17 19 4 58 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":176 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 21 20 23 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":176 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 21 24 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":176 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":176 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 25 24 26 4 (set (reg:SI 1 dx [orig:91 _4 ] [91])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":176 79 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":176 79 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [107])
                (const_int 4 [0x4])) [1 this_19(D)->_length+0 S4 A32])
        (reg:SI 1 dx [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":176 79 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 0 ax [108])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 79 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg/f:SI 0 ax [orig:92 _5 ] [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [108])
                (const_int 16 [0x10])) [16 api.mm.malloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 79 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg/f:SI 1 dx [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 79 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 1 dx [orig:93 _6 ] [93])
        (mem:SI (plus:SI (reg/f:SI 1 dx [109])
                (const_int 4 [0x4])) [1 this_19(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 79 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 1 dx [orig:94 _7 ] [94])
                (plus:SI (reg:SI 1 dx [orig:93 _6 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 194 {*addsi_1}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 34 33 35 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:94 _7 ] [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 35 34 36 4 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:92 _5 ] [92]) [0 *_5 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 565 {*call_value}
     (nil)
    (nil))
(insn 36 35 37 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 37 36 38 4 (set (reg/f:SI 1 dx [orig:95 _8 ] [95])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 79 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 79 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (mem/f:SI (reg/f:SI 0 ax [110]) [2 this_19(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:95 _8 ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":177 79 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg/f:SI 0 ax [111])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(insn 41 40 69 4 (set (reg/f:SI 0 ax [orig:96 _9 ] [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 24 [0x18])) [18 api.mm.memcpy+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(insn 69 41 71 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [22 %sfp+-4 S4 A32])
        (reg/f:SI 0 ax [orig:96 _9 ] [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(note 71 69 42 4 NOTE_INSN_DELETED)
(insn 42 71 43 4 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:SI 0 ax [orig:97 _10 ] [97])
        (mem:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 4 [0x4])) [1 this_19(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 4 si [orig:98 _11 ] [98])
        (zero_extend:DI (reg:SI 0 ax [orig:97 _10 ] [97]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 120 {*zero_extendsidi2}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 46 45 48 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 48 46 49 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string11toCharArrayEv") [flags 0x1]  <function_decl 0x7ff72fe37f00 toCharArray>) [0 toCharArray S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 49 48 50 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 50 49 51 4 (set (reg/f:SI 1 dx [orig:99 _12 ] [99])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg/f:SI 0 ax [orig:100 _13 ] [100])
        (mem/f:SI (reg/f:SI 0 ax [113]) [2 this_19(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(insn 53 52 54 4 (set (mem:DI (pre_dec:SI (reg/f:SI 7 sp)) [21  S8 A64])
        (reg:DI 4 si [orig:98 _11 ] [98])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 59 {*pushdi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 54 53 55 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:99 _12 ] [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 55 54 70 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:100 _13 ] [100])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 70 55 56 4 (set (reg/f:SI 0 ax [orig:96 _9 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [22 %sfp+-4 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 79 {*movsi_internal}
     (nil))
(call_insn 56 70 57 4 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:96 _9 ] [96]) [0 *_9 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 565 {*call_value}
     (nil)
    (nil))
(insn 57 56 58 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":178 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 58 57 59 4 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":179 79 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg/f:SI 1 dx [orig:101 _14 ] [101])
        (mem/f:SI (reg/f:SI 0 ax [114]) [2 this_19(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":179 79 {*movsi_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":179 79 {*movsi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:SI 0 ax [orig:102 _15 ] [102])
        (mem:SI (plus:SI (reg/f:SI 0 ax [115])
                (const_int 4 [0x4])) [1 this_19(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":179 79 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg/f:SI 0 ax [orig:103 _16 ] [103])
                (plus:SI (reg:SI 0 ax [orig:102 _15 ] [102])
                    (reg/f:SI 1 dx [orig:101 _14 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":179 194 {*addsi_1}
     (nil))
(insn 63 62 66 4 (set (mem:QI (reg/f:SI 0 ax [orig:103 _16 ] [103]) [0 *_16+0 S1 A8])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":179 81 {*movqi_internal}
     (nil))
(insn 66 63 68 4 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":180 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 68 66 0 NOTE_INSN_DELETED)

;; Function string::operator= (_ZN6stringaSEPc, funcdef_no=47, decl_uid=1387, cgraph_uid=36, symbol_order=37)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) 0 {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =<  (1) riF*o {*pushdi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 57:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 60: point = 0, n_alt = -1
   Insn 57: point = 0, n_alt = 8
   Insn 56: point = 1, n_alt = 0
   Insn 55: point = 3, n_alt = 0
   Insn 54: point = 5, n_alt = 0
   Insn 53: point = 6, n_alt = 0
   Insn 52: point = 8, n_alt = 0
   Insn 51: point = 9, n_alt = 0
   Insn 50: point = 9, n_alt = 0
   Insn 49: point = 10, n_alt = 0
   Insn 48: point = 11, n_alt = 0
   Insn 47: point = 11, n_alt = 0
   Insn 46: point = 12, n_alt = 0
   Insn 45: point = 14, n_alt = 0
   Insn 44: point = 15, n_alt = 0
   Insn 43: point = 17, n_alt = 0
   Insn 42: point = 19, n_alt = 0
   Insn 41: point = 20, n_alt = 0
   Insn 40: point = 22, n_alt = 0
   Insn 39: point = 24, n_alt = 1
   Insn 38: point = 25, n_alt = 0
   Insn 37: point = 26, n_alt = -2
   Insn 36: point = 27, n_alt = 0
   Insn 35: point = 27, n_alt = 0
   Insn 34: point = 28, n_alt = 0
   Insn 33: point = 29, n_alt = 0
   Insn 32: point = 29, n_alt = 0
   Insn 31: point = 31, n_alt = 0
   Insn 30: point = 33, n_alt = 0
   Insn 29: point = 34, n_alt = 0
   Insn 28: point = 36, n_alt = 0
   Insn 27: point = 37, n_alt = 1
   Insn 26: point = 38, n_alt = 0
   Insn 25: point = 39, n_alt = -2
   Insn 24: point = 40, n_alt = 0
   Insn 23: point = 40, n_alt = 0
   Insn 22: point = 40, n_alt = -2
   Insn 21: point = 40, n_alt = 0
   Insn 20: point = 40, n_alt = 0
  BB 3
   Insn 17: point = 41, n_alt = 0
   Insn 16: point = 41, n_alt = 0
   Insn 15: point = 42, n_alt = 0
   Insn 14: point = 43, n_alt = 0
   Insn 13: point = 43, n_alt = 0
   Insn 12: point = 45, n_alt = 0
   Insn 11: point = 46, n_alt = 0
   Insn 10: point = 48, n_alt = 0
  BB 2
   Insn 8: point = 50, n_alt = -1
   Insn 7: point = 50, n_alt = 0
   Insn 6: point = 51, n_alt = 4
   Insn 5: point = 53, n_alt = 0
   Insn 61: point = 54, n_alt = 0
 r87: [23..54]
 r88: [50..51]
 r89: [41..46]
 r90: [42..43]
 r91: [37..39]
 r92: [27..34]
 r93: [30..31]
 r94: [28..29]
 r95: [24..26]
 r96: [9..20]
 r97: [16..17]
 r98: [11..15]
 r99: [10..12]
 r100: [2..6]
 r101: [2..3]
 r102: [0..1]
 r103: [52..53]
 r104: [47..48]
 r105: [44..45]
 r106: [37..38]
 r107: [35..36]
 r108: [32..33]
 r109: [24..25]
 r110: [21..22]
 r111: [18..19]
 r112: [13..14]
 r113: [7..8]
 r114: [4..5]
Compressing live ranges: from 55 to 40 - 72%
Ranges after the compression:
 r87: [18..39]
 r88: [36..37]
 r89: [30..33]
 r90: [30..31]
 r91: [28..29]
 r92: [20..25]
 r93: [22..23]
 r94: [20..21]
 r95: [18..19]
 r96: [8..15]
 r97: [12..13]
 r98: [8..11]
 r99: [8..9]
 r100: [2..5]
 r101: [2..3]
 r102: [0..1]
 r103: [38..39]
 r104: [34..35]
 r105: [32..33]
 r106: [28..29]
 r107: [26..27]
 r108: [24..25]
 r109: [18..19]
 r110: [16..17]
 r111: [14..15]
 r112: [10..11]
 r113: [6..7]
 r114: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 61
changing reg in insn 40
changing reg in insn 28
changing reg in insn 22
changing reg in insn 10
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 16
changing reg in insn 13
changing reg in insn 15
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 35
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 37
changing reg in insn 39
changing reg in insn 41
changing reg in insn 50
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 47
changing reg in insn 46
changing reg in insn 49
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
deleting insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 16.
verify found no changes in insn with uid = 23.
rescanning insn with uid = 35.
rescanning insn with uid = 50.


string::operator=

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={21d,18u} r1={14d,9u} r2={6d,1u} r3={3d,6u} r6={1d,15u} r7={14d,28u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={15d,1u} r18={4d} r19={4d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 434{355d,79u,0e} in 51{47 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 103
(note 3 1 61 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 61 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 61 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":183 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:QI 0 ax [orig:88 _1 ] [88])
        (mem:QI (plus:SI (reg/f:SI 0 ax [103])
                (const_int 8 [0x8])) [6 this_18(D)->_init+0 S1 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":183 81 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _1 ] [88])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":183 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":183 548 {*jcc}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 104 105
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [104])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 79 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [104])
                (const_int 20 [0x14])) [17 api.mm.free+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 79 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 1 dx [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg/f:SI 1 dx [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 1 dx [105]) [2 this_18(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 79 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 15 14 16 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:90 _3 ] [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 16 15 17 3 (call (mem:QI (reg/f:SI 0 ax [orig:89 _2 ] [89]) [0 *_2 S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 554 {*call}
     (nil)
    (nil))
(insn 17 16 18 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":184 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 97 98 99 100 101 102 106 107 108 109 110 111 112 113 114
(code_label 18 17 19 4 60 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":186 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 21 20 23 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":186 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 21 24 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Z6strlenPc") [flags 0x1]  <function_decl 0x7ff72fe41500 strlen>) [0 strlen S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":186 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":186 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 25 24 26 4 (set (reg:SI 1 dx [orig:91 _4 ] [91])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":186 79 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":186 79 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [106])
                (const_int 4 [0x4])) [1 this_18(D)->_length+0 S4 A32])
        (reg:SI 1 dx [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":186 79 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 0 ax [107])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 79 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg/f:SI 0 ax [orig:92 _5 ] [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [107])
                (const_int 16 [0x10])) [16 api.mm.malloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 79 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg/f:SI 1 dx [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 79 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 1 dx [orig:93 _6 ] [93])
        (mem:SI (plus:SI (reg/f:SI 1 dx [108])
                (const_int 4 [0x4])) [1 this_18(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 79 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 1 dx [orig:94 _7 ] [94])
                (plus:SI (reg:SI 1 dx [orig:93 _6 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 194 {*addsi_1}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 34 33 35 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:94 _7 ] [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 35 34 36 4 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:92 _5 ] [92]) [0 *_5 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 565 {*call_value}
     (nil)
    (nil))
(insn 36 35 37 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 37 36 38 4 (set (reg/f:SI 1 dx [orig:95 _8 ] [95])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 79 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 79 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (mem/f:SI (reg/f:SI 0 ax [109]) [2 this_18(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:95 _8 ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":187 79 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg/f:SI 0 ax [110])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 79 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg/f:SI 2 cx [orig:96 _9 ] [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [110])
                (const_int 24 [0x18])) [18 api.mm.memcpy+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 79 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 79 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:SI 0 ax [orig:97 _10 ] [97])
        (mem:SI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 4 [0x4])) [1 this_18(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 79 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 0 ax [orig:98 _11 ] [98])
        (zero_extend:DI (reg:SI 0 ax [orig:97 _10 ] [97]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 120 {*zero_extendsidi2}
     (nil))
(insn 45 44 46 4 (set (reg/f:SI 3 bx [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 79 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg/f:SI 3 bx [orig:99 _12 ] [99])
        (mem/f:SI (reg/f:SI 3 bx [112]) [2 this_18(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 79 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (mem:DI (pre_dec:SI (reg/f:SI 7 sp)) [21  S8 A64])
        (reg:DI 0 ax [orig:98 _11 ] [98])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 59 {*pushdi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 48 47 49 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [2 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 49 48 50 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 3 bx [orig:99 _12 ] [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 50 49 51 4 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 2 cx [orig:96 _9 ] [96]) [0 *_9 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 565 {*call_value}
     (nil)
    (nil))
(insn 51 50 52 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":188 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 52 51 53 4 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":189 79 {*movsi_internal}
     (nil))
(insn 53 52 54 4 (set (reg/f:SI 1 dx [orig:100 _13 ] [100])
        (mem/f:SI (reg/f:SI 0 ax [113]) [2 this_18(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":189 79 {*movsi_internal}
     (nil))
(insn 54 53 55 4 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":189 79 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:SI 0 ax [orig:101 _14 ] [101])
        (mem:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 4 [0x4])) [1 this_18(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":189 79 {*movsi_internal}
     (nil))
(insn 56 55 57 4 (parallel [
            (set (reg/f:SI 0 ax [orig:102 _15 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 _14 ] [101])
                    (reg/f:SI 1 dx [orig:100 _13 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":189 194 {*addsi_1}
     (nil))
(insn 57 56 60 4 (set (mem:QI (reg/f:SI 0 ax [orig:102 _15 ] [102]) [0 *_15+0 S1 A8])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":189 81 {*movqi_internal}
     (nil))
(insn 60 57 62 4 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":190 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 62 60 0 NOTE_INSN_DELETED)

;; Function string::length (_ZN6string6lengthEv, funcdef_no=48, decl_uid=1391, cgraph_uid=37, symbol_order=38)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 0
   Insn 5: point = 5, n_alt = 0
   Insn 16: point = 6, n_alt = 0
 r87: [6..6]
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]
Compressing live ranges: from 7 to 7 - 100%
Ranges after the compression:
 r87: [6..6]
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


string::length

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 6 [bp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={1d} r2={1d} r6={1d,3u} r7={1d,2u} r17={1d} r20={1d,1u} 
;;    total ref usage 21{11d,10u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90
(note 3 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 16 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 16 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":193 79 {*movsi_internal}
     (nil))
(insn 6 5 13 2 (set (reg:SI 0 ax [orig:88 _3 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [90])
                (const_int 4 [0x4])) [1 this_2(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":193 79 {*movsi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:89 <retval> ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":194 79 {*movsi_internal}
     (nil))
(insn 14 13 17 2 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":194 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 14 0 NOTE_INSN_DELETED)

;; Function string::toCharArray (_ZN6string11toCharArrayEv, funcdef_no=49, decl_uid=1389, cgraph_uid=38, symbol_order=39)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 0
   Insn 5: point = 5, n_alt = 0
   Insn 16: point = 6, n_alt = 0
 r87: [6..6]
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]
Compressing live ranges: from 7 to 7 - 100%
Ranges after the compression:
 r87: [6..6]
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


string::toCharArray

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 6 [bp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={1d} r2={1d} r6={1d,3u} r7={1d,2u} r17={1d} r20={1d,1u} 
;;    total ref usage 21{11d,10u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90
(note 3 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 16 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 16 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":197 79 {*movsi_internal}
     (nil))
(insn 6 5 13 2 (set (reg/f:SI 0 ax [orig:88 _3 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [90]) [2 this_2(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":197 79 {*movsi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:SI 0 ax)
        (reg/f:SI 0 ax [orig:89 <retval> ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":198 79 {*movsi_internal}
     (nil))
(insn 14 13 17 2 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":198 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 14 0 NOTE_INSN_DELETED)

;; Function string::reserve (_ZN6string7reserveEj, funcdef_no=50, decl_uid=1394, cgraph_uid=39, symbol_order=40)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
  BB 5
   Insn 32: point = 0, n_alt = -1
  BB 3
   Insn 23: point = 0, n_alt = 1
   Insn 22: point = 1, n_alt = 0
   Insn 21: point = 2, n_alt = -2
   Insn 20: point = 3, n_alt = 0
   Insn 19: point = 3, n_alt = 0
   Insn 18: point = 4, n_alt = 0
   Insn 17: point = 5, n_alt = 0
   Insn 16: point = 6, n_alt = 0
   Insn 15: point = 6, n_alt = 0
   Insn 14: point = 8, n_alt = 0
   Insn 13: point = 9, n_alt = 3
   Insn 12: point = 11, n_alt = 0
   Insn 11: point = 12, n_alt = 0
   Insn 10: point = 14, n_alt = 0
  BB 2
   Insn 8: point = 17, n_alt = -1
   Insn 7: point = 17, n_alt = 0
   Insn 6: point = 18, n_alt = 0
   Insn 5: point = 20, n_alt = 0
   Insn 33: point = 21, n_alt = 0
 r87: [15..21]
 r88: [17..18]
 r89: [3..12]
 r90: [5..9]
 r91: [4..6]
 r92: [0..2]
 r93: [19..20]
 r94: [13..14]
 r95: [10..11]
 r96: [7..8]
 r97: [0..1]
Compressing live ranges: from 22 to 14 - 63%
Ranges after the compression:
 r87: [10..13]
 r88: [10..11]
 r89: [2..7]
 r90: [2..5]
 r91: [2..3]
 r92: [0..1]
 r93: [12..13]
 r94: [8..9]
 r95: [6..7]
 r96: [4..5]
 r97: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 33
changing reg in insn 10
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 19
changing reg in insn 13
changing reg in insn 17
changing reg in insn 15
changing reg in insn 18
changing reg in insn 21
changing reg in insn 23
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 23
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 19.


string::reserve

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,5u} r1={8d,6u} r2={3d,1u} r6={1d,10u} r7={5d,12u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1e} r17={6d,1u} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 137{100d,36u,1e} in 20{19 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 93
(note 3 1 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 33 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 33 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":201 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 1 dx [93])
                (const_int 4 [0x4])) [1 this_8(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":201 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [1 len+0 S4 A32])
            (reg:SI 1 dx [orig:88 _1 ] [88]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":201 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 31)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":201 548 {*jcc}
     (nil)
 -> 31)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 94 95 96 97
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [94])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [94])
                (const_int 28 [0x1c])) [19 api.mm.realloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 1 dx [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [1 len+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:SI 2 cx [orig:90 _3 ] [90])
                (plus:SI (reg:SI 1 dx [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 len+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 14 13 15 3 (set (reg/f:SI 1 dx [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 1 dx [orig:91 _4 ] [91])
        (mem/f:SI (reg/f:SI 1 dx [96]) [2 this_8(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 17 16 18 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 2 cx [orig:90 _3 ] [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 18 17 19 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 1 dx [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 19 18 20 3 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:89 _2 ] [89]) [0 *_2 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 565 {*call_value}
     (nil)
    (nil))
(insn 20 19 21 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 21 20 22 3 (set (reg/f:SI 1 dx [orig:92 _5 ] [92])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg/f:SI 0 ax [97])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
(insn 23 22 31 3 (set (mem/f:SI (reg/f:SI 0 ax [97]) [2 this_8(D)->_str+0 S4 A32])
        (reg/f:SI 1 dx [orig:92 _5 ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":202 79 {*movsi_internal}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 31 23 30 5 67 (nil) [1 uses])
(note 30 31 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 30 26 5 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":204 584 {nop}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [always]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 26 32 27 4 65 (nil) [0 uses])
(note 27 26 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 34 27 0 NOTE_INSN_DELETED)

;; Function string::substring (_ZN6string9substringEj, funcdef_no=51, decl_uid=1397, cgraph_uid=40, symbol_order=41)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 22
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 37: point = 0, n_alt = -1
   Insn 36: point = 0, n_alt = 0
  BB 5
   Insn 43: point = 0, n_alt = -1
  BB 3
   Insn 28: point = 0, n_alt = 0
   Insn 27: point = 0, n_alt = 0
   Insn 26: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = 0
   Insn 24: point = 1, n_alt = 0
   Insn 23: point = 2, n_alt = 0
   Insn 22: point = 2, n_alt = 0
   Insn 21: point = 4, n_alt = 0
   Insn 20: point = 5, n_alt = -2
   Insn 19: point = 6, n_alt = 0
   Insn 18: point = 6, n_alt = 0
   Insn 17: point = 6, n_alt = -2
   Insn 16: point = 6, n_alt = 0
   Insn 15: point = 6, n_alt = 0
  BB 2
   Insn 13: point = 7, n_alt = -1
   Insn 12: point = 7, n_alt = 0
   Insn 11: point = 8, n_alt = 0
   Insn 10: point = 10, n_alt = 0
   Insn 9: point = 11, n_alt = 0
   Insn 8: point = 11, n_alt = 0
   Insn 7: point = 11, n_alt = -2
   Insn 6: point = 11, n_alt = 0
   Insn 5: point = 11, n_alt = 0
   Insn 44: point = 11, n_alt = 0
 r87: [0..11]
 r88: [7..8]
 r89: [3..5]
 r90: [1..2]
 r91: [9..10]
 r92: [3..4]
Compressing live ranges: from 12 to 8 - 66%
Ranges after the compression:
 r87: [0..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [6..7]
 r92: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 44
changing reg in insn 26
changing reg in insn 17
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 10
changing reg in insn 11
changing reg in insn 21
deleting insn with uid = 7.
deleting insn with uid = 17.
deleting insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 27.


string::substring

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,7u} r1={5d,1u,1e} r2={4d} r3={1d,3u} r6={1d,12u} r7={11d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1e} r17={12d,1u} r18={3d} r19={3d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 305{254d,49u,2e} in 24{21 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 91
(note 3 1 44 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 44 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 44 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":207 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":207 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":207 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":207 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":208 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [91])
                (const_int 4 [0x4])) [1 this_8(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":208 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [1 index+0 S4 A32])
            (reg:SI 0 ax [orig:88 _1 ] [88]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":208 11 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 42)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":208 548 {*jcc}
     (nil)
 -> 42)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 92
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 16 15 18 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 18 16 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string11toCharArrayEv") [flags 0x1]  <function_decl 0x7ff72fe37f00 toCharArray>) [0 toCharArray S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 19 18 20 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 20 19 21 3 (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 79 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [1 index+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 79 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
                (plus:SI (reg:SI 0 ax [92])
                    (reg/f:SI 1 dx [orig:89 _2 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 1 dx [orig:89 _2 ] [89])
            (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [1 index+0 S4 A32]))
        (nil)))
(insn 23 22 24 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 24 23 25 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:90 _3 ] [90])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 25 24 27 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 27 25 28 3 (call (mem:QI (symbol_ref:SI ("_ZN6stringaSEPc") [flags 0x1]  <function_decl 0x7ff72fe37e00 operator=>) [0 operator= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 28 27 42 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":209 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 42 28 41 5 71 (nil) [1 uses])
(note 41 42 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 43 41 35 5 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":211 584 {nop}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [always]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 35 43 38 4 68 (nil) [0 uses])
(note 38 35 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 38 37 4 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":212 79 {*movsi_internal}
     (nil))
(insn 37 36 45 4 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":212 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 45 37 0 NOTE_INSN_DELETED)

;; Function string::substring (_ZN6string9substringEjj, funcdef_no=52, decl_uid=1401, cgraph_uid=41, symbol_order=42)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 39:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 7
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 53: point = 0, n_alt = -1
   Insn 52: point = 0, n_alt = 0
  BB 7
   Insn 59: point = 0, n_alt = -1
  BB 4
   Insn 25: point = 0, n_alt = -1
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 1, n_alt = 0
   Insn 22: point = 3, n_alt = 0
   Insn 21: point = 4, n_alt = 0
  BB 5
   Insn 55: point = 6, n_alt = -1
   Insn 39: point = 6, n_alt = 1
   Insn 38: point = 6, n_alt = 0
   Insn 37: point = 6, n_alt = 0
   Insn 36: point = 6, n_alt = -2
   Insn 35: point = 6, n_alt = 0
   Insn 34: point = 6, n_alt = 0
   Insn 33: point = 7, n_alt = 0
   Insn 32: point = 7, n_alt = 0
   Insn 31: point = 9, n_alt = 4
   Insn 30: point = 11, n_alt = 0
   Insn 29: point = 13, n_alt = 0
   Insn 28: point = 14, n_alt = 0
   Insn 27: point = 16, n_alt = 0
  BB 3
   Insn 19: point = 18, n_alt = 1
   Insn 18: point = 19, n_alt = 0
  BB 2
   Insn 16: point = 21, n_alt = -1
   Insn 15: point = 21, n_alt = 0
   Insn 14: point = 22, n_alt = 0
   Insn 13: point = 24, n_alt = 0
   Insn 12: point = 25, n_alt = 0
   Insn 11: point = 27, n_alt = 0
   Insn 10: point = 28, n_alt = 0
   Insn 9: point = 29, n_alt = 0
   Insn 8: point = 29, n_alt = 0
   Insn 7: point = 29, n_alt = -2
   Insn 6: point = 29, n_alt = 0
   Insn 5: point = 29, n_alt = 0
   Insn 60: point = 29, n_alt = 0
 r87: [0..29]
 r88: [21..25]
 r89: [21..22]
 r90: [0..1]
 r91: [12..14]
 r92: [10..11]
 r93: [8..9]
 r94: [6..7]
 r95: [26..28]
 r96: [26..27]
 r97: [23..24]
 r98: [18..19]
 r99: [2..4]
 r100: [2..3]
 r101: [15..16]
 r102: [12..13]
Compressing live ranges: from 30 to 22 - 73%
Ranges after the compression:
 r87: [0..21]
 r88: [16..19]
 r89: [16..17]
 r90: [0..1]
 r91: [10..11]
 r92: [8..9]
 r93: [6..7]
 r94: [4..5]
 r95: [20..21]
 r96: [20..21]
 r97: [18..19]
 r98: [14..15]
 r99: [2..3]
 r100: [2..3]
 r101: [12..13]
 r102: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 60
changing reg in insn 36
changing reg in insn 7
changing reg in insn 12
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 7.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 37.


string::substring

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={15d,13u} r1={7d,4u,1e} r2={3d} r3={1d,2u} r6={1d,22u} r7={8d,20u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={4e} r17={13d,2u} r18={2d} r19={2d} r20={1d,1u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 259{189d,64u,6e} in 35{33 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 95 96 97
(note 3 1 60 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 60 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 60 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":215 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":215 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":215 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":215 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 1 dx [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [1 index+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":216 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [1 length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":216 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 1 dx [orig:88 _1 ] [88])
                (plus:SI (reg:SI 1 dx [95])
                    (reg:SI 0 ax [96])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":216 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [1 index+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 12 [0xc])) [1 length+0 S4 A32]))
        (nil)))
(insn 13 12 14 2 (set (reg/f:SI 0 ax [97])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":216 79 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:89 _2 ] [89])
        (mem:SI (plus:SI (reg/f:SI 0 ax [97])
                (const_int 4 [0x4])) [1 this_16(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":216 79 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:88 _1 ] [88])
            (reg:SI 0 ax [orig:89 _2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":216 11 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 58)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":216 548 {*jcc}
     (nil)
 -> 58)
;;  succ:       3 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 98
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [1 index+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 79 {*movsi_internal}
     (nil))
(insn 19 18 40 3 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (reg:SI 0 ax [98])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 79 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              5 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 99 100
(code_label 40 19 20 4 75 (nil) [1 uses])
(note 20 40 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 1 dx [99])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [1 index+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 79 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [1 length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 79 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg:SI 0 ax [orig:90 _3 ] [90])
                (plus:SI (reg:SI 0 ax [100])
                    (reg:SI 1 dx [99])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [1 index+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 12 [0xc])) [1 length+0 S4 A32]))
        (nil)))
(insn 24 23 25 4 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
            (reg:SI 0 ax [orig:90 _3 ] [90]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 11 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 58)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 548 {*jcc}
     (nil)
 -> 58)
;;  succ:       7
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 101 102
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 79 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:SI 1 dx [orig:91 _4 ] [91])
        (mem/f:SI (reg/f:SI 0 ax [101]) [2 this_16(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 79 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 79 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg/f:SI 0 ax [orig:92 _5 ] [92])
                (plus:SI (reg:SI 0 ax [102])
                    (reg/f:SI 1 dx [orig:91 _4 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 1 dx [orig:91 _4 ] [91])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 31 30 32 5 (set (reg:QI 0 ax [orig:93 _6 ] [93])
        (mem:QI (reg/f:SI 0 ax [orig:92 _5 ] [92]) [0 *_5+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 81 {*movqi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:SI 0 ax [orig:94 _7 ] [94])
        (sign_extend:SI (reg:QI 0 ax [orig:93 _6 ] [93]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 134 {extendqisi2}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 34 33 35 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:94 _7 ] [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 35 34 37 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 37 35 38 5 (call (mem:QI (symbol_ref:SI ("_ZN6stringpLEc") [flags 0x1]  <function_decl 0x7ff72fe37700 operator+=>) [0 operator+= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 38 37 39 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":218 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 39 38 55 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 194 {*addsi_1}
     (nil))
(jump_insn 55 39 56 5 (set (pc)
        (label_ref 40)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":217 549 {jump}
     (nil)
 -> 40)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 56 55 58)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              4
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 58 56 57 7 77 (nil) [2 uses])
(note 57 58 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 57 51 7 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":221 584 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 51 59 54 6 72 (nil) [0 uses])
(note 54 51 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 52 54 53 6 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":222 79 {*movsi_internal}
     (nil))
(insn 53 52 61 6 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":222 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 61 53 0 NOTE_INSN_DELETED)

;; Function string::startsWith (_ZN6string10startsWithES_, funcdef_no=53, decl_uid=1404, cgraph_uid=42, symbol_order=43)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=7,overall=13,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
	 Choosing alt 4 in insn 40:  (0) q  (1) m {*movqi_internal}
      Creating newreg=104 from oldreg=92, assigning class Q_REGS to r104
   40: r104:QI=[r91:SI]
      REG_DEAD r91:SI
    Inserting insn reload after:
   82: r92:QI=r104:QI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=616,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=608,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=622,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 82:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) qm  (1) qn {*cmpqi_1}
      Creating newreg=105 from oldreg=92, assigning class Q_REGS to r105
      Making reload reg 105 for reg 92 optional
   48: flags:CCZ=cmp(r105:QI,r93:QI)
      REG_DEAD r93:QI
      REG_DEAD r92:QI
    Inserting insn reload before:
   83: r105:QI=r92:QI

            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=4,overall=2,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) q  (1) n {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 58:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) q  (1) n {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=106 from oldreg=92, assigning class Q_REGS to inheritance r106
    Original reg change 92->106 (bb6):
   82: r106:QI=r104:QI
    Add original<-inheritance after:
   84: r92:QI=r106:QI

    Inheritance reuse change 92->106 (bb6):
   83: r105:QI=r106:QI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    84: r92:QI=r106:QI
deleting insn with uid = 84.
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 72: point = 0, n_alt = -1
   Insn 71: point = 0, n_alt = -2
   Insn 67: point = 1, n_alt = -2
  BB 7
   Insn 76: point = 4, n_alt = -1
   Insn 53: point = 4, n_alt = 3
  BB 3
   Insn 74: point = 5, n_alt = -1
   Insn 18: point = 5, n_alt = 3
  BB 9
   Insn 64: point = 6, n_alt = 3
  BB 5
   Insn 34: point = 7, n_alt = -1
   Insn 33: point = 7, n_alt = 1
   Insn 32: point = 8, n_alt = 0
  BB 8
   Insn 78: point = 10, n_alt = -1
   Insn 58: point = 10, n_alt = 1
  BB 6
   Insn 51: point = 11, n_alt = -1
   Insn 50: point = 11, n_alt = 0
   Insn 49: point = 12, n_alt = 0
   Insn 48: point = 13, n_alt = 0
   Insn 83: point = 14, n_alt = 4
	   Creating copy r105<-r106@1000
   Insn 47: point = 16, n_alt = -2
   Insn 46: point = 17, n_alt = 0
   Insn 45: point = 17, n_alt = 0
   Insn 44: point = 17, n_alt = -2
   Insn 43: point = 17, n_alt = 0
   Insn 42: point = 17, n_alt = 0
   Insn 41: point = 17, n_alt = 0
   Insn 82: point = 17, n_alt = 8
	   Creating copy r104->r106@1000
   Insn 40: point = 19, n_alt = 4
   Insn 39: point = 21, n_alt = 0
   Insn 38: point = 23, n_alt = 0
   Insn 37: point = 24, n_alt = 0
   Insn 36: point = 26, n_alt = 0
  BB 4
   Insn 30: point = 28, n_alt = 1
   Insn 29: point = 28, n_alt = 1
   Insn 28: point = 29, n_alt = -2
   Insn 27: point = 30, n_alt = 0
   Insn 26: point = 30, n_alt = 0
   Insn 25: point = 30, n_alt = -2
   Insn 24: point = 30, n_alt = 0
   Insn 23: point = 30, n_alt = 0
  BB 2
   Insn 16: point = 31, n_alt = -1
   Insn 15: point = 31, n_alt = 0
   Insn 14: point = 32, n_alt = 0
   Insn 13: point = 33, n_alt = 0
   Insn 12: point = 34, n_alt = 0
   Insn 11: point = 36, n_alt = 0
   Insn 10: point = 37, n_alt = -2
   Insn 9: point = 38, n_alt = 0
   Insn 8: point = 38, n_alt = 0
   Insn 7: point = 38, n_alt = -2
   Insn 6: point = 38, n_alt = 0
   Insn 5: point = 38, n_alt = 0
   Insn 80: point = 38, n_alt = 0
 r87: [7..38]
 r88: [33..37]
 r89: [33..34]
 r90: [22..24]
 r91: [20..21]
 r93: [13..16]
 r94: [2..6]
 r95: [31..32]
 r96: [11..12]
 r97: [0..1]
 r98: [35..36]
 r99: [28..29]
 r100: [7..8]
 r101: [25..26]
 r102: [22..23]
 r104: [18..19]
 r105: [13..14]
 r106: [15..17]
Compressing live ranges: from 39 to 28 - 71%
Ranges after the compression:
 r87: [4..27]
 r88: [24..27]
 r89: [24..25]
 r90: [16..17]
 r91: [14..15]
 r93: [8..11]
 r94: [2..3]
 r95: [22..23]
 r96: [6..7]
 r97: [0..1]
 r98: [26..27]
 r99: [20..21]
 r100: [4..5]
 r101: [18..19]
 r102: [16..17]
 r104: [12..13]
 r105: [8..9]
 r106: [10..11]

********** Assignment #1: **********

	 Assigning to 104 (cl=Q_REGS, orig=92, freq=2000, tfirst=104, tfreq=2000)...
	   Assign 0 to reload r104 (freq=2000)
	Hard reg 0 is preferable by r106 with profit 1000
	Hard reg 0 is preferable by r105 with profit 500
	 Assigning to 105 (cl=Q_REGS, orig=92, freq=2000, tfirst=104, tfreq=2000)...
	   Assign 2 to optional reload r105 (freq=2000)
	Hard reg 0 is preferable by r106 with profit 1000
	Hard reg 2 is preferable by r106 with profit 1000
	 Assigning to 106 (cl=Q_REGS, orig=92, freq=2000, tfirst=104, tfreq=2000)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   83: r105:QI=r92:QI
      REG_DEAD r92:QI
   Insn after restoring regs:
   82: r92:QI=r104:QI
      REG_DEAD r104:QI
Remove optional reload reg 105
  Restoring original insn:
   48: flags:CCZ=cmp(r92:QI,r93:QI)
      REG_DEAD r92:QI
      REG_DEAD r93:QI
  Deleting move 83
   83: r105:QI=r92:QI
      REG_DEAD r92:QI
deleting insn with uid = 83.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) qm  (1) qn {*cmpqi_1}
      Creating newreg=107 from oldreg=92, assigning class Q_REGS to r107
      Making reload reg 107 for reg 92 optional
   48: flags:CCZ=cmp(r107:QI,r93:QI)
      REG_DEAD r92:QI
      REG_DEAD r93:QI
    Inserting insn reload before:
   85: r107:QI=r92:QI

            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=4,overall=2,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) q  (1) m {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2 3
EBB 4
EBB 5 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=108 from oldreg=92, assigning class Q_REGS to inheritance r108
    Original reg change 92->108 (bb6):
   82: r108:QI=r104:QI
      REG_DEAD r104:QI
    Add original<-inheritance after:
   86: r92:QI=r108:QI

    Inheritance reuse change 92->108 (bb6):
   85: r107:QI=r108:QI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    86: r92:QI=r108:QI
deleting insn with uid = 86.
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #2: **********

  BB 10
   Insn 72: point = 0, n_alt = -1
   Insn 71: point = 0, n_alt = -2
   Insn 67: point = 1, n_alt = -2
  BB 7
   Insn 76: point = 4, n_alt = -1
   Insn 53: point = 4, n_alt = 3
  BB 3
   Insn 74: point = 5, n_alt = -1
   Insn 18: point = 5, n_alt = 3
  BB 9
   Insn 64: point = 6, n_alt = 3
  BB 5
   Insn 34: point = 7, n_alt = -1
   Insn 33: point = 7, n_alt = 1
   Insn 32: point = 8, n_alt = 0
  BB 8
   Insn 78: point = 10, n_alt = -1
   Insn 58: point = 10, n_alt = 1
  BB 6
   Insn 51: point = 11, n_alt = -1
   Insn 50: point = 11, n_alt = 0
   Insn 49: point = 12, n_alt = 0
   Insn 48: point = 13, n_alt = 0
   Insn 85: point = 14, n_alt = 4
	   Creating copy r107<-r108@1000
   Insn 47: point = 16, n_alt = -2
   Insn 46: point = 17, n_alt = 0
   Insn 45: point = 17, n_alt = 0
   Insn 44: point = 17, n_alt = -2
   Insn 43: point = 17, n_alt = 0
   Insn 42: point = 17, n_alt = 0
   Insn 41: point = 17, n_alt = 0
   Insn 82: point = 17, n_alt = 8
	   Creating copy r104->r108@1000
   Insn 40: point = 19, n_alt = 4
   Insn 39: point = 21, n_alt = 0
   Insn 38: point = 23, n_alt = 0
   Insn 37: point = 24, n_alt = 0
   Insn 36: point = 26, n_alt = 0
  BB 4
   Insn 30: point = 28, n_alt = 1
   Insn 29: point = 28, n_alt = 1
   Insn 28: point = 29, n_alt = -2
   Insn 27: point = 30, n_alt = 0
   Insn 26: point = 30, n_alt = 0
   Insn 25: point = 30, n_alt = -2
   Insn 24: point = 30, n_alt = 0
   Insn 23: point = 30, n_alt = 0
  BB 2
   Insn 16: point = 31, n_alt = -1
   Insn 15: point = 31, n_alt = 0
   Insn 14: point = 32, n_alt = 0
   Insn 13: point = 33, n_alt = 0
   Insn 12: point = 34, n_alt = 0
   Insn 11: point = 36, n_alt = 0
   Insn 10: point = 37, n_alt = -2
   Insn 9: point = 38, n_alt = 0
   Insn 8: point = 38, n_alt = 0
   Insn 7: point = 38, n_alt = -2
   Insn 6: point = 38, n_alt = 0
   Insn 5: point = 38, n_alt = 0
   Insn 80: point = 38, n_alt = 0
 r87: [7..38]
 r88: [33..37]
 r89: [33..34]
 r90: [22..24]
 r91: [20..21]
 r93: [13..16]
 r94: [2..6]
 r95: [31..32]
 r96: [11..12]
 r97: [0..1]
 r98: [35..36]
 r99: [28..29]
 r100: [7..8]
 r101: [25..26]
 r102: [22..23]
 r104: [18..19]
 r107: [13..14]
 r108: [15..17]
Compressing live ranges: from 39 to 28 - 71%
Ranges after the compression:
 r87: [4..27]
 r88: [24..27]
 r89: [24..25]
 r90: [16..17]
 r91: [14..15]
 r93: [8..11]
 r94: [2..3]
 r95: [22..23]
 r96: [6..7]
 r97: [0..1]
 r98: [26..27]
 r99: [20..21]
 r100: [4..5]
 r101: [18..19]
 r102: [16..17]
 r104: [12..13]
 r107: [8..9]
 r108: [10..11]

********** Assignment #2: **********

	 Assigning to 107 (cl=Q_REGS, orig=92, freq=2000, tfirst=107, tfreq=2000)...
	   Assign 2 to optional reload r107 (freq=2000)
	Hard reg 2 is preferable by r108 with profit 1000
	 Assigning to 108 (cl=Q_REGS, orig=92, freq=2000, tfirst=107, tfreq=2000)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   85: r107:QI=r92:QI
      REG_DEAD r92:QI
   Insn after restoring regs:
   82: r92:QI=r104:QI
      REG_DEAD r104:QI
Keep optional reload reg 105
Remove optional reload reg 107
  Restoring original insn:
   48: flags:CCZ=cmp(r92:QI,r93:QI)
      REG_DEAD r92:QI
      REG_DEAD r93:QI
  Deleting move 85
   85: r107:QI=r92:QI
      REG_DEAD r92:QI
deleting insn with uid = 85.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) qm  (1) qn {*cmpqi_1}
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #3: **********

  BB 10
   Insn 72: point = 0, n_alt = -1
   Insn 71: point = 0, n_alt = -2
   Insn 67: point = 1, n_alt = -2
  BB 7
   Insn 76: point = 4, n_alt = -1
   Insn 53: point = 4, n_alt = 3
  BB 3
   Insn 74: point = 5, n_alt = -1
   Insn 18: point = 5, n_alt = 3
  BB 9
   Insn 64: point = 6, n_alt = 3
  BB 5
   Insn 34: point = 7, n_alt = -1
   Insn 33: point = 7, n_alt = 1
   Insn 32: point = 8, n_alt = 0
  BB 8
   Insn 78: point = 10, n_alt = -1
   Insn 58: point = 10, n_alt = 1
  BB 6
   Insn 51: point = 11, n_alt = -1
   Insn 50: point = 11, n_alt = 0
   Insn 49: point = 12, n_alt = 0
   Insn 48: point = 13, n_alt = 0
   Insn 47: point = 14, n_alt = -2
   Insn 46: point = 15, n_alt = 0
   Insn 45: point = 15, n_alt = 0
   Insn 44: point = 15, n_alt = -2
   Insn 43: point = 15, n_alt = 0
   Insn 42: point = 15, n_alt = 0
   Insn 41: point = 15, n_alt = 0
   Insn 82: point = 15, n_alt = 8
   Insn 40: point = 17, n_alt = 4
   Insn 39: point = 19, n_alt = 0
   Insn 38: point = 21, n_alt = 0
   Insn 37: point = 22, n_alt = 0
   Insn 36: point = 24, n_alt = 0
  BB 4
   Insn 30: point = 26, n_alt = 1
   Insn 29: point = 26, n_alt = 1
   Insn 28: point = 27, n_alt = -2
   Insn 27: point = 28, n_alt = 0
   Insn 26: point = 28, n_alt = 0
   Insn 25: point = 28, n_alt = -2
   Insn 24: point = 28, n_alt = 0
   Insn 23: point = 28, n_alt = 0
  BB 2
   Insn 16: point = 29, n_alt = -1
   Insn 15: point = 29, n_alt = 0
   Insn 14: point = 30, n_alt = 0
   Insn 13: point = 31, n_alt = 0
   Insn 12: point = 32, n_alt = 0
   Insn 11: point = 34, n_alt = 0
   Insn 10: point = 35, n_alt = -2
   Insn 9: point = 36, n_alt = 0
   Insn 8: point = 36, n_alt = 0
   Insn 7: point = 36, n_alt = -2
   Insn 6: point = 36, n_alt = 0
   Insn 5: point = 36, n_alt = 0
   Insn 80: point = 36, n_alt = 0
 r92: [13..15]
Compressing live ranges: from 37 to 2 - 5%
Ranges after the compression:
 r92: [0..1]
  Slot 0 regnos (width = 0):	 92
Changing spilled pseudos to memory in insn #82
Changing spilled pseudos to memory in insn #48
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #48
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) qm  (1) qn {*cmpqi_1}
Reusing alternative 8 for insn #82
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 82:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 80
changing reg in insn 44
changing reg in insn 25
changing reg in insn 7
changing reg in insn 10
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 47
changing reg in insn 48
changing reg in insn 64
changing reg in insn 53
changing reg in insn 18
changing reg in insn 67
changing reg in insn 14
changing reg in insn 15
changing reg in insn 49
changing reg in insn 50
changing reg in insn 67
changing reg in insn 71
changing reg in insn 11
changing reg in insn 12
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
deleting insn with uid = 7.
deleting insn with uid = 25.
deleting insn with uid = 28.
deleting insn with uid = 44.
deleting insn with uid = 47.
deleting insn with uid = 67.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 45.


string::startsWith

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={17d,15u} r1={6d,2u,1e} r2={4d} r3={1d,3u} r6={1d,25u} r7={11d,29u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={17d,5u} r18={3d} r19={3d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 350{268d,80u,2e} in 45{42 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 95 98
(note 3 1 80 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 80 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 80 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:89 _2 ] [89])
        (mem:SI (plus:SI (reg/f:SI 0 ax [98])
                (const_int 4 [0x4])) [1 this_14(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:88 _1 ] [88])
            (reg:SI 0 ax [orig:89 _2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 11 {*cmpsi_1}
     (nil))
(insn 14 13 15 2 (set (reg:QI 0 ax [orig:95 retval.0_15 ] [95])
        (gtu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 544 {*setcc_qi}
     (nil))
(insn 15 14 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 retval.0_15 ] [95])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":225 548 {*jcc}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 74 3 (set (reg:QI 0 ax [orig:94 _8 ] [94])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":226 81 {*movqi_internal}
     (nil))
(jump_insn 74 18 75 3 (set (pc)
        (label_ref 65)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":226 549 {jump}
     (nil)
 -> 65)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

(barrier 75 74 21)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99
(code_label 21 75 22 4 79 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":228 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 24 23 26 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":228 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 26 24 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":228 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 27 26 29 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":228 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 29 27 30 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 len+0 S4 A32])
        (reg:SI 0 ax [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":228 79 {*movsi_internal}
     (nil))
(insn 30 29 59 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":229 79 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              8 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100
(code_label 59 30 31 5 83 (nil) [1 uses])
(note 31 59 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":229 79 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [100])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [1 len+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":229 11 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":229 548 {*jcc}
     (nil)
 -> 62)
;;  succ:       9
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 92 93 96 101 102
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 79 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:SI 1 dx [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 0 ax [101]) [2 this_14(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 79 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 79 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg/f:SI 0 ax [orig:91 _4 ] [91])
                (plus:SI (reg:SI 0 ax [102])
                    (reg/f:SI 1 dx [orig:90 _3 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 1 dx [orig:90 _3 ] [90])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 40 39 82 6 (set (reg:QI 0 ax [orig:92 _5 ] [92])
        (mem:QI (reg/f:SI 0 ax [orig:91 _4 ] [91]) [0 *_4+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 81 {*movqi_internal}
     (nil))
(insn 82 40 86 6 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -25 [0xffffffffffffffe7])) [22 %sfp+-17 S1 A8])
        (reg:QI 0 ax [orig:92 _5 ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 81 {*movqi_internal}
     (nil))
(note 86 82 84 6 NOTE_INSN_DELETED)
(note 84 86 41 6 NOTE_INSN_DELETED)
(insn 41 84 42 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 42 41 43 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 43 42 45 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 45 43 46 6 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6stringixEj") [flags 0x1]  <function_decl 0x7ff72fe37800 operator[]>) [0 operator[] S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 46 45 83 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(note 83 46 85 6 NOTE_INSN_DELETED)
(note 85 83 48 6 NOTE_INSN_DELETED)
(insn 48 85 49 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -25 [0xffffffffffffffe7])) [22 %sfp+-17 S1 A8])
            (reg:QI 0 ax [orig:93 _6 ] [93]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 9 {*cmpqi_1}
     (nil))
(insn 49 48 50 6 (set (reg:QI 0 ax [orig:96 retval.1_21 ] [96])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 544 {*setcc_qi}
     (nil))
(insn 50 49 51 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:96 retval.1_21 ] [96])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 51 50 52 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":230 548 {*jcc}
     (nil)
 -> 56)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 76 7 (set (reg:QI 0 ax [orig:94 _8 ] [94])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":231 81 {*movqi_internal}
     (nil))
(jump_insn 76 53 77 7 (set (pc)
        (label_ref 65)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":231 549 {jump}
     (nil)
 -> 65)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

(barrier 77 76 56)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 56 77 57 8 82 (nil) [1 uses])
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 78 8 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":229 194 {*addsi_1}
     (nil))
(jump_insn 78 58 79 8 (set (pc)
        (label_ref 59)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":229 549 {jump}
     (nil)
 -> 59)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 79 78 62)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(code_label 62 79 63 9 81 (nil) [1 uses])
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg:QI 0 ax [orig:94 _8 ] [94])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":234 81 {*movqi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [always] 
;;              7 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 0 [ax] 97
(code_label 65 64 66 10 80 (nil) [2 uses])
(note 66 65 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 71 66 72 10 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:97 <retval> ] [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":235 81 {*movqi_internal}
     (nil))
(insn 72 71 81 10 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":235 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 81 72 0 NOTE_INSN_DELETED)

;; Function string::endWith (_ZN6string7endWithES_, funcdef_no=54, decl_uid=1407, cgraph_uid=43, symbol_order=44)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 40:  (0) r  (1) 0  (2) rm {*subsi_1}
      Creating newreg=108 from oldreg=91, assigning class GENERAL_REGS to r108
   40: {r108:SI=r108:SI-[frame:SI-0x10];clobber flags:CC;}
      REG_DEAD r91:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   86: r108:SI=r91:SI
    Inserting insn reload after:
   87: r92:SI=r108:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=4,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            alt=7,overall=13,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
	 Choosing alt 4 in insn 44:  (0) q  (1) m {*movqi_internal}
      Creating newreg=109 from oldreg=95, assigning class Q_REGS to r109
   44: r109:QI=[r94:SI]
      REG_DEAD r94:SI
    Inserting insn reload after:
   88: r95:QI=r109:QI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=4,overall=616,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=608,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=622,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 88:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) qm  (1) qn {*cmpqi_1}
      Creating newreg=110 from oldreg=95, assigning class Q_REGS to r110
      Making reload reg 110 for reg 95 optional
   52: flags:CCZ=cmp(r110:QI,r96:QI)
      REG_DEAD r96:QI
      REG_DEAD r95:QI
    Inserting insn reload before:
   89: r110:QI=r95:QI

            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=4,overall=2,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) q  (1) n {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 62:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) q  (1) n {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=111 from oldreg=95, assigning class Q_REGS to inheritance r111
    Original reg change 95->111 (bb6):
   88: r111:QI=r109:QI
    Add original<-inheritance after:
   90: r95:QI=r111:QI

    Inheritance reuse change 95->111 (bb6):
   89: r110:QI=r111:QI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    90: r95:QI=r111:QI
deleting insn with uid = 90.
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 76: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = -2
   Insn 71: point = 1, n_alt = -2
  BB 7
   Insn 80: point = 4, n_alt = -1
   Insn 57: point = 4, n_alt = 3
  BB 3
   Insn 78: point = 5, n_alt = -1
   Insn 18: point = 5, n_alt = 3
  BB 9
   Insn 68: point = 6, n_alt = 3
  BB 5
   Insn 34: point = 7, n_alt = -1
   Insn 33: point = 7, n_alt = 1
   Insn 32: point = 8, n_alt = 0
  BB 8
   Insn 82: point = 10, n_alt = -1
   Insn 62: point = 10, n_alt = 1
  BB 6
   Insn 55: point = 11, n_alt = -1
   Insn 54: point = 11, n_alt = 0
   Insn 53: point = 12, n_alt = 0
   Insn 52: point = 13, n_alt = 0
   Insn 89: point = 14, n_alt = 4
	   Creating copy r110<-r111@1000
   Insn 51: point = 16, n_alt = -2
   Insn 50: point = 17, n_alt = 0
   Insn 49: point = 17, n_alt = 0
   Insn 48: point = 17, n_alt = -2
   Insn 47: point = 17, n_alt = 0
   Insn 46: point = 17, n_alt = 0
   Insn 45: point = 17, n_alt = 0
   Insn 88: point = 17, n_alt = 8
	   Creating copy r109->r111@1000
   Insn 44: point = 19, n_alt = 4
   Insn 43: point = 21, n_alt = 0
   Insn 42: point = 23, n_alt = 0
   Insn 41: point = 25, n_alt = 0
   Insn 87: point = 26, n_alt = -2
	Hard reg 2 is preferable by r108 with profit 1000
   Insn 40: point = 28, n_alt = 1
   Insn 86: point = 28, n_alt = -2
	Hard reg 2 is preferable by r108 with profit 1000
	Hard reg 0 is preferable by r108 with profit 1000
   Insn 39: point = 30, n_alt = 0
   Insn 38: point = 32, n_alt = 0
   Insn 37: point = 33, n_alt = 0
   Insn 36: point = 35, n_alt = 0
  BB 4
   Insn 30: point = 37, n_alt = 1
   Insn 29: point = 37, n_alt = 1
   Insn 28: point = 38, n_alt = -2
   Insn 27: point = 39, n_alt = 0
   Insn 26: point = 39, n_alt = 0
   Insn 25: point = 39, n_alt = -2
   Insn 24: point = 39, n_alt = 0
   Insn 23: point = 39, n_alt = 0
  BB 2
   Insn 16: point = 40, n_alt = -1
   Insn 15: point = 40, n_alt = 0
   Insn 14: point = 41, n_alt = 0
   Insn 13: point = 42, n_alt = 0
   Insn 12: point = 43, n_alt = 0
   Insn 11: point = 45, n_alt = 0
   Insn 10: point = 46, n_alt = -2
   Insn 9: point = 47, n_alt = 0
   Insn 8: point = 47, n_alt = 0
   Insn 7: point = 47, n_alt = -2
   Insn 6: point = 47, n_alt = 0
   Insn 5: point = 47, n_alt = 0
   Insn 84: point = 47, n_alt = 0
 r87: [7..47]
 r88: [42..46]
 r89: [42..43]
 r90: [22..33]
 r91: [29..30]
 r92: [24..26]
 r93: [22..23]
 r94: [20..21]
 r96: [13..16]
 r97: [2..6]
 r98: [40..41]
 r99: [11..12]
 r100: [0..1]
 r101: [44..45]
 r102: [37..38]
 r103: [7..8]
 r104: [34..35]
 r105: [31..32]
 r106: [24..25]
 r108: [27..28]
 r109: [18..19]
 r110: [13..14]
 r111: [15..17]
Compressing live ranges: from 48 to 36 - 75%
Ranges after the compression:
 r87: [4..35]
 r88: [32..35]
 r89: [32..33]
 r90: [16..25]
 r91: [22..23]
 r92: [18..19]
 r93: [16..17]
 r94: [14..15]
 r96: [8..11]
 r97: [2..3]
 r98: [30..31]
 r99: [6..7]
 r100: [0..1]
 r101: [34..35]
 r102: [28..29]
 r103: [4..5]
 r104: [26..27]
 r105: [24..25]
 r106: [18..19]
 r108: [20..21]
 r109: [12..13]
 r110: [8..9]
 r111: [10..11]

********** Assignment #1: **********

	 Assigning to 109 (cl=Q_REGS, orig=95, freq=2000, tfirst=109, tfreq=2000)...
	   Assign 0 to reload r109 (freq=2000)
	Hard reg 0 is preferable by r111 with profit 1000
	Hard reg 0 is preferable by r110 with profit 500
	 Assigning to 110 (cl=Q_REGS, orig=95, freq=2000, tfirst=109, tfreq=2000)...
	   Assign 2 to optional reload r110 (freq=2000)
	Hard reg 0 is preferable by r111 with profit 1000
	Hard reg 2 is preferable by r111 with profit 1000
	 Assigning to 111 (cl=Q_REGS, orig=95, freq=2000, tfirst=109, tfreq=2000)...
	 Assigning to 108 (cl=GENERAL_REGS, orig=91, freq=3000, tfirst=108, tfreq=3000)...
	   Assign 0 to reload r108 (freq=3000)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   89: r110:QI=r95:QI
      REG_DEAD r95:QI
   Insn after restoring regs:
   88: r95:QI=r109:QI
      REG_DEAD r109:QI
Remove optional reload reg 110
  Restoring original insn:
   52: flags:CCZ=cmp(r95:QI,r96:QI)
      REG_DEAD r95:QI
      REG_DEAD r96:QI
  Deleting move 89
   89: r110:QI=r95:QI
      REG_DEAD r95:QI
deleting insn with uid = 89.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) qm  (1) qn {*cmpqi_1}
      Creating newreg=112 from oldreg=95, assigning class Q_REGS to r112
      Making reload reg 112 for reg 95 optional
   52: flags:CCZ=cmp(r112:QI,r96:QI)
      REG_DEAD r95:QI
      REG_DEAD r96:QI
    Inserting insn reload before:
   91: r112:QI=r95:QI

            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=4,overall=2,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) q  (1) m {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2 3
EBB 4
EBB 5 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=113 from oldreg=95, assigning class Q_REGS to inheritance r113
    Original reg change 95->113 (bb6):
   88: r113:QI=r109:QI
      REG_DEAD r109:QI
    Add original<-inheritance after:
   92: r95:QI=r113:QI

    Inheritance reuse change 95->113 (bb6):
   91: r112:QI=r113:QI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    92: r95:QI=r113:QI
deleting insn with uid = 92.
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #2: **********

  BB 10
   Insn 76: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = -2
   Insn 71: point = 1, n_alt = -2
  BB 7
   Insn 80: point = 4, n_alt = -1
   Insn 57: point = 4, n_alt = 3
  BB 3
   Insn 78: point = 5, n_alt = -1
   Insn 18: point = 5, n_alt = 3
  BB 9
   Insn 68: point = 6, n_alt = 3
  BB 5
   Insn 34: point = 7, n_alt = -1
   Insn 33: point = 7, n_alt = 1
   Insn 32: point = 8, n_alt = 0
  BB 8
   Insn 82: point = 10, n_alt = -1
   Insn 62: point = 10, n_alt = 1
  BB 6
   Insn 55: point = 11, n_alt = -1
   Insn 54: point = 11, n_alt = 0
   Insn 53: point = 12, n_alt = 0
   Insn 52: point = 13, n_alt = 0
   Insn 91: point = 14, n_alt = 4
	   Creating copy r112<-r113@1000
   Insn 51: point = 16, n_alt = -2
   Insn 50: point = 17, n_alt = 0
   Insn 49: point = 17, n_alt = 0
   Insn 48: point = 17, n_alt = -2
   Insn 47: point = 17, n_alt = 0
   Insn 46: point = 17, n_alt = 0
   Insn 45: point = 17, n_alt = 0
   Insn 88: point = 17, n_alt = 8
	   Creating copy r109->r113@1000
   Insn 44: point = 19, n_alt = 4
   Insn 43: point = 21, n_alt = 0
   Insn 42: point = 23, n_alt = 0
   Insn 41: point = 25, n_alt = 0
   Insn 87: point = 26, n_alt = -2
	Hard reg 2 is preferable by r108 with profit 1000
   Insn 40: point = 28, n_alt = 1
   Insn 86: point = 28, n_alt = -2
	Hard reg 2 is preferable by r108 with profit 1000
	Hard reg 0 is preferable by r108 with profit 1000
   Insn 39: point = 30, n_alt = 0
   Insn 38: point = 32, n_alt = 0
   Insn 37: point = 33, n_alt = 0
   Insn 36: point = 35, n_alt = 0
  BB 4
   Insn 30: point = 37, n_alt = 1
   Insn 29: point = 37, n_alt = 1
   Insn 28: point = 38, n_alt = -2
   Insn 27: point = 39, n_alt = 0
   Insn 26: point = 39, n_alt = 0
   Insn 25: point = 39, n_alt = -2
   Insn 24: point = 39, n_alt = 0
   Insn 23: point = 39, n_alt = 0
  BB 2
   Insn 16: point = 40, n_alt = -1
   Insn 15: point = 40, n_alt = 0
   Insn 14: point = 41, n_alt = 0
   Insn 13: point = 42, n_alt = 0
   Insn 12: point = 43, n_alt = 0
   Insn 11: point = 45, n_alt = 0
   Insn 10: point = 46, n_alt = -2
   Insn 9: point = 47, n_alt = 0
   Insn 8: point = 47, n_alt = 0
   Insn 7: point = 47, n_alt = -2
   Insn 6: point = 47, n_alt = 0
   Insn 5: point = 47, n_alt = 0
   Insn 84: point = 47, n_alt = 0
 r87: [7..47]
 r88: [42..46]
 r89: [42..43]
 r90: [22..33]
 r91: [29..30]
 r92: [24..26]
 r93: [22..23]
 r94: [20..21]
 r96: [13..16]
 r97: [2..6]
 r98: [40..41]
 r99: [11..12]
 r100: [0..1]
 r101: [44..45]
 r102: [37..38]
 r103: [7..8]
 r104: [34..35]
 r105: [31..32]
 r106: [24..25]
 r108: [27..28]
 r109: [18..19]
 r112: [13..14]
 r113: [15..17]
Compressing live ranges: from 48 to 36 - 75%
Ranges after the compression:
 r87: [4..35]
 r88: [32..35]
 r89: [32..33]
 r90: [16..25]
 r91: [22..23]
 r92: [18..19]
 r93: [16..17]
 r94: [14..15]
 r96: [8..11]
 r97: [2..3]
 r98: [30..31]
 r99: [6..7]
 r100: [0..1]
 r101: [34..35]
 r102: [28..29]
 r103: [4..5]
 r104: [26..27]
 r105: [24..25]
 r106: [18..19]
 r108: [20..21]
 r109: [12..13]
 r112: [8..9]
 r113: [10..11]

********** Assignment #2: **********

	 Assigning to 112 (cl=Q_REGS, orig=95, freq=2000, tfirst=112, tfreq=2000)...
	   Assign 2 to optional reload r112 (freq=2000)
	Hard reg 2 is preferable by r113 with profit 1000
	 Assigning to 113 (cl=Q_REGS, orig=95, freq=2000, tfirst=112, tfreq=2000)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
   91: r112:QI=r95:QI
      REG_DEAD r95:QI
   Insn after restoring regs:
   88: r95:QI=r109:QI
      REG_DEAD r109:QI
Keep optional reload reg 110
Remove optional reload reg 112
  Restoring original insn:
   52: flags:CCZ=cmp(r95:QI,r96:QI)
      REG_DEAD r95:QI
      REG_DEAD r96:QI
  Deleting move 91
   91: r112:QI=r95:QI
      REG_DEAD r95:QI
deleting insn with uid = 91.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) qm  (1) qn {*cmpqi_1}
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #3: **********

  BB 10
   Insn 76: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = -2
   Insn 71: point = 1, n_alt = -2
  BB 7
   Insn 80: point = 4, n_alt = -1
   Insn 57: point = 4, n_alt = 3
  BB 3
   Insn 78: point = 5, n_alt = -1
   Insn 18: point = 5, n_alt = 3
  BB 9
   Insn 68: point = 6, n_alt = 3
  BB 5
   Insn 34: point = 7, n_alt = -1
   Insn 33: point = 7, n_alt = 1
   Insn 32: point = 8, n_alt = 0
  BB 8
   Insn 82: point = 10, n_alt = -1
   Insn 62: point = 10, n_alt = 1
  BB 6
   Insn 55: point = 11, n_alt = -1
   Insn 54: point = 11, n_alt = 0
   Insn 53: point = 12, n_alt = 0
   Insn 52: point = 13, n_alt = 0
   Insn 51: point = 14, n_alt = -2
   Insn 50: point = 15, n_alt = 0
   Insn 49: point = 15, n_alt = 0
   Insn 48: point = 15, n_alt = -2
   Insn 47: point = 15, n_alt = 0
   Insn 46: point = 15, n_alt = 0
   Insn 45: point = 15, n_alt = 0
   Insn 88: point = 15, n_alt = 8
   Insn 44: point = 17, n_alt = 4
   Insn 43: point = 19, n_alt = 0
   Insn 42: point = 21, n_alt = 0
   Insn 41: point = 23, n_alt = 0
   Insn 87: point = 24, n_alt = -2
   Insn 40: point = 26, n_alt = 1
   Insn 86: point = 26, n_alt = -2
   Insn 39: point = 28, n_alt = 0
   Insn 38: point = 30, n_alt = 0
   Insn 37: point = 31, n_alt = 0
   Insn 36: point = 33, n_alt = 0
  BB 4
   Insn 30: point = 35, n_alt = 1
   Insn 29: point = 35, n_alt = 1
   Insn 28: point = 36, n_alt = -2
   Insn 27: point = 37, n_alt = 0
   Insn 26: point = 37, n_alt = 0
   Insn 25: point = 37, n_alt = -2
   Insn 24: point = 37, n_alt = 0
   Insn 23: point = 37, n_alt = 0
  BB 2
   Insn 16: point = 38, n_alt = -1
   Insn 15: point = 38, n_alt = 0
   Insn 14: point = 39, n_alt = 0
   Insn 13: point = 40, n_alt = 0
   Insn 12: point = 41, n_alt = 0
   Insn 11: point = 43, n_alt = 0
   Insn 10: point = 44, n_alt = -2
   Insn 9: point = 45, n_alt = 0
   Insn 8: point = 45, n_alt = 0
   Insn 7: point = 45, n_alt = -2
   Insn 6: point = 45, n_alt = 0
   Insn 5: point = 45, n_alt = 0
   Insn 84: point = 45, n_alt = 0
 r95: [13..15]
Compressing live ranges: from 46 to 2 - 4%
Ranges after the compression:
 r95: [0..1]
  Slot 0 regnos (width = 0):	 95
Changing spilled pseudos to memory in insn #88
Changing spilled pseudos to memory in insn #52
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #52
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) qm  (1) qn {*cmpqi_1}
Reusing alternative 8 for insn #88
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 88:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 84
changing reg in insn 48
changing reg in insn 25
changing reg in insn 7
changing reg in insn 10
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 51
changing reg in insn 52
changing reg in insn 68
changing reg in insn 57
changing reg in insn 18
changing reg in insn 71
changing reg in insn 14
changing reg in insn 15
changing reg in insn 53
changing reg in insn 54
changing reg in insn 71
changing reg in insn 75
changing reg in insn 11
changing reg in insn 12
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
deleting insn with uid = 7.
deleting insn with uid = 25.
deleting insn with uid = 28.
deleting insn with uid = 86.
deleting insn with uid = 48.
deleting insn with uid = 51.
deleting insn with uid = 71.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 49.


string::endWith

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={21d,19u} r1={6d,2u} r2={5d,1u,1e} r3={1d,3u} r6={1d,27u} r7={11d,29u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={19d,5u} r18={3d} r19={3d} r20={1d,1u,1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 364{275d,87u,2e} in 50{47 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 98 101
(note 3 1 84 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 84 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 84 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:89 _2 ] [89])
        (mem:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 4 [0x4])) [1 this_17(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:88 _1 ] [88])
            (reg:SI 0 ax [orig:89 _2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 11 {*cmpsi_1}
     (nil))
(insn 14 13 15 2 (set (reg:QI 0 ax [orig:98 retval.2_18 ] [98])
        (gtu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 544 {*setcc_qi}
     (nil))
(insn 15 14 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 retval.2_18 ] [98])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":238 548 {*jcc}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 78 3 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":239 81 {*movqi_internal}
     (nil))
(jump_insn 78 18 79 3 (set (pc)
        (label_ref 69)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":239 549 {jump}
     (nil)
 -> 69)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97

(barrier 79 78 21)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102
(code_label 21 79 22 4 85 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":241 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 24 23 26 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":241 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 26 24 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6string6lengthEv") [flags 0x1]  <function_decl 0x7ff72fe3d000 length>) [0 length S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":241 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 27 26 29 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":241 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 29 27 30 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 len+0 S4 A32])
        (reg:SI 0 ax [102])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":241 79 {*movsi_internal}
     (nil))
(insn 30 29 63 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":242 79 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              8 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103
(code_label 63 30 31 5 89 (nil) [1 uses])
(note 31 63 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":242 79 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [103])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [1 len+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":242 11 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":242 548 {*jcc}
     (nil)
 -> 66)
;;  succ:       9
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 92 93 94 95 96 99 104 105 106
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 79 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:SI 1 dx [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 0 ax [104]) [2 this_17(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 79 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (reg/f:SI 0 ax [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 79 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:SI 0 ax [orig:91 _4 ] [91])
        (mem:SI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 4 [0x4])) [1 this_17(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 79 {*movsi_internal}
     (nil))
(insn 40 39 87 6 (parallel [
            (set (reg:SI 0 ax [orig:91 _4 ] [91])
                (minus:SI (reg:SI 0 ax [orig:91 _4 ] [91])
                    (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [1 len+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 244 {*subsi_1}
     (nil))
(insn 87 40 41 6 (set (reg:SI 2 cx [orig:92 _5 ] [92])
        (reg:SI 0 ax [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 79 {*movsi_internal}
     (nil))
(insn 41 87 42 6 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 79 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (parallel [
            (set (reg:SI 0 ax [orig:93 _6 ] [93])
                (plus:SI (reg:SI 0 ax [106])
                    (reg:SI 2 cx [orig:92 _5 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 cx [orig:92 _5 ] [92])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 43 42 44 6 (parallel [
            (set (reg/f:SI 0 ax [orig:94 _7 ] [94])
                (plus:SI (reg:SI 0 ax [orig:93 _6 ] [93])
                    (reg/f:SI 1 dx [orig:90 _3 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 194 {*addsi_1}
     (nil))
(insn 44 43 88 6 (set (reg:QI 0 ax [orig:95 _8 ] [95])
        (mem:QI (reg/f:SI 0 ax [orig:94 _7 ] [94]) [0 *_7+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 81 {*movqi_internal}
     (nil))
(insn 88 44 92 6 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -25 [0xffffffffffffffe7])) [22 %sfp+-17 S1 A8])
        (reg:QI 0 ax [orig:95 _8 ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 81 {*movqi_internal}
     (nil))
(note 92 88 90 6 NOTE_INSN_DELETED)
(note 90 92 45 6 NOTE_INSN_DELETED)
(insn 45 90 46 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 46 45 47 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 47 46 49 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 49 47 50 6 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZN6stringixEj") [flags 0x1]  <function_decl 0x7ff72fe37800 operator[]>) [0 operator[] S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 50 49 89 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(note 89 50 91 6 NOTE_INSN_DELETED)
(note 91 89 52 6 NOTE_INSN_DELETED)
(insn 52 91 53 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -25 [0xffffffffffffffe7])) [22 %sfp+-17 S1 A8])
            (reg:QI 0 ax [orig:96 _9 ] [96]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 9 {*cmpqi_1}
     (nil))
(insn 53 52 54 6 (set (reg:QI 0 ax [orig:99 retval.3_24 ] [99])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 544 {*setcc_qi}
     (nil))
(insn 54 53 55 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 retval.3_24 ] [99])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 55 54 56 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":243 548 {*jcc}
     (nil)
 -> 60)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(note 56 55 57 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 80 7 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":244 81 {*movqi_internal}
     (nil))
(jump_insn 80 57 81 7 (set (pc)
        (label_ref 69)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":244 549 {jump}
     (nil)
 -> 69)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97

(barrier 81 80 60)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 60 81 61 8 88 (nil) [1 uses])
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 82 8 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":242 194 {*addsi_1}
     (nil))
(jump_insn 82 62 83 8 (set (pc)
        (label_ref 63)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":242 549 {jump}
     (nil)
 -> 63)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 83 82 66)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(code_label 66 83 67 9 87 (nil) [1 uses])
(note 67 66 68 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 9 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":247 81 {*movqi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [always] 
;;              7 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 97
;; lr  def 	 0 [ax] 100
(code_label 69 68 70 10 86 (nil) [2 uses])
(note 70 69 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 75 70 76 10 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:100 <retval> ] [100])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":248 81 {*movqi_internal}
     (nil))
(insn 76 75 85 10 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":248 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 85 76 0 NOTE_INSN_DELETED)

;; Function string::toUpper (_ZN6string7toUpperEv, funcdef_no=55, decl_uid=1409, cgraph_uid=44, symbol_order=45)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 39:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 51: point = 0, n_alt = -1
   Insn 50: point = 0, n_alt = 0
  BB 9
   Insn 57: point = 0, n_alt = -1
  BB 3
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 1, n_alt = 0
   Insn 12: point = 3, n_alt = 0
  BB 7
   Insn 53: point = 5, n_alt = -1
   Insn 39: point = 5, n_alt = 1
   Insn 38: point = 5, n_alt = 0
   Insn 37: point = 5, n_alt = 0
   Insn 36: point = 5, n_alt = -2
   Insn 35: point = 5, n_alt = 0
   Insn 34: point = 5, n_alt = 0
   Insn 33: point = 6, n_alt = 0
   Insn 32: point = 6, n_alt = 0
  BB 6
   Insn 29: point = 8, n_alt = 0
  BB 5
   Insn 27: point = 9, n_alt = -1
   Insn 26: point = 9, n_alt = 0
  BB 4
   Insn 24: point = 10, n_alt = -1
   Insn 23: point = 10, n_alt = 0
   Insn 22: point = 10, n_alt = 8
   Insn 21: point = 11, n_alt = 4
   Insn 20: point = 13, n_alt = 0
   Insn 19: point = 15, n_alt = 0
   Insn 18: point = 16, n_alt = 0
   Insn 17: point = 18, n_alt = 0
  BB 2
   Insn 10: point = 20, n_alt = 1
   Insn 9: point = 20, n_alt = 0
   Insn 8: point = 20, n_alt = 0
   Insn 7: point = 20, n_alt = -2
   Insn 6: point = 20, n_alt = 0
   Insn 5: point = 20, n_alt = 0
   Insn 58: point = 20, n_alt = 0
 r87: [0..20]
 r88: [0..1]
 r89: [14..16]
 r90: [12..13]
 r91: [5..6]
 r92: [2..3]
 r93: [17..18]
 r94: [14..15]
 r95: [10..11]
Compressing live ranges: from 21 to 14 - 66%
Ranges after the compression:
 r87: [0..13]
 r88: [0..1]
 r89: [10..11]
 r90: [8..9]
 r91: [4..5]
 r92: [2..3]
 r93: [12..13]
 r94: [10..11]
 r95: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 58
changing reg in insn 36
changing reg in insn 7
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 32
changing reg in insn 34
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
deleting insn with uid = 7.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 37.


string::toUpper

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,9u} r1={4d,1u,1e} r2={3d} r3={1d,2u} r6={1d,25u} r7={8d,22u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={13d,3u} r18={2d} r19={2d} r20={1d,1u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 247{182d,63u,2e} in 32{30 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 3 1 58 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 58 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 58 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":251 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":251 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":251 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":251 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 40 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":252 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 92
(code_label 40 10 11 3 93 (nil) [1 uses])
(note 11 40 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":252 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:SI 0 ax [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [92])
                (const_int 4 [0x4])) [1 this_12(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":252 79 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
            (reg:SI 0 ax [orig:88 _1 ] [88]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":252 11 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 56)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":252 548 {*jcc}
     (nil)
 -> 56)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 93 94 95
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":253 79 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [93]) [2 this_12(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":253 79 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":253 79 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
                (plus:SI (reg:SI 0 ax [94])
                    (reg/f:SI 1 dx [orig:89 _2 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":253 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 1 dx [orig:89 _2 ] [89])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 21 20 22 4 (set (reg:QI 0 ax [95])
        (mem:QI (reg/f:SI 0 ax [orig:90 _3 ] [90]) [0 *_3+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":253 81 {*movqi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 0 ax [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":253 81 {*movqi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
            (const_int 96 [0x60]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":254 9 {*cmpqi_1}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":254 548 {*jcc}
     (nil)
 -> 30)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
            (const_int 122 [0x7a]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":254 9 {*cmpqi_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":254 548 {*jcc}
     (nil)
 -> 30)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (parallel [
            (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                        (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
                (and:QI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                            (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
                    (const_int -33 [0xffffffffffffffdf])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":255 343 {*andqi_1}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91
(code_label 30 29 31 7 92 (nil) [2 uses])
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 7 (set (reg:SI 0 ax [orig:91 _4 ] [91])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":257 134 {extendqisi2}
     (nil))
(insn 33 32 34 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":257 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 34 33 35 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":257 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 35 34 37 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":257 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 37 35 38 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringpLEc") [flags 0x1]  <function_decl 0x7ff72fe37700 operator+=>) [0 operator+= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":257 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 38 37 39 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":257 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 39 38 53 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":252 194 {*addsi_1}
     (nil))
(jump_insn 53 39 54 7 (set (pc)
        (label_ref 40)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":252 549 {jump}
     (nil)
 -> 40)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 54 53 56)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 56 54 55 9 95 (nil) [1 uses])
(note 55 56 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 55 49 9 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":259 584 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 49 57 52 8 90 (nil) [0 uses])
(note 52 49 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 52 51 8 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":260 79 {*movsi_internal}
     (nil))
(insn 51 50 59 8 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":260 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 59 51 0 NOTE_INSN_DELETED)

;; Function string::toLower (_ZN6string7toLowerEv, funcdef_no=56, decl_uid=1411, cgraph_uid=45, symbol_order=46)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 29:  (0) m  (1) 0  (2) qn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 39:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 51: point = 0, n_alt = -1
   Insn 50: point = 0, n_alt = 0
  BB 9
   Insn 57: point = 0, n_alt = -1
  BB 3
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 1, n_alt = 0
   Insn 12: point = 3, n_alt = 0
  BB 7
   Insn 53: point = 5, n_alt = -1
   Insn 39: point = 5, n_alt = 1
   Insn 38: point = 5, n_alt = 0
   Insn 37: point = 5, n_alt = 0
   Insn 36: point = 5, n_alt = -2
   Insn 35: point = 5, n_alt = 0
   Insn 34: point = 5, n_alt = 0
   Insn 33: point = 6, n_alt = 0
   Insn 32: point = 6, n_alt = 0
  BB 6
   Insn 29: point = 8, n_alt = 1
  BB 5
   Insn 27: point = 9, n_alt = -1
   Insn 26: point = 9, n_alt = 0
  BB 4
   Insn 24: point = 10, n_alt = -1
   Insn 23: point = 10, n_alt = 0
   Insn 22: point = 10, n_alt = 8
   Insn 21: point = 11, n_alt = 4
   Insn 20: point = 13, n_alt = 0
   Insn 19: point = 15, n_alt = 0
   Insn 18: point = 16, n_alt = 0
   Insn 17: point = 18, n_alt = 0
  BB 2
   Insn 10: point = 20, n_alt = 1
   Insn 9: point = 20, n_alt = 0
   Insn 8: point = 20, n_alt = 0
   Insn 7: point = 20, n_alt = -2
   Insn 6: point = 20, n_alt = 0
   Insn 5: point = 20, n_alt = 0
   Insn 58: point = 20, n_alt = 0
 r87: [0..20]
 r88: [0..1]
 r89: [14..16]
 r90: [12..13]
 r91: [5..6]
 r92: [2..3]
 r93: [17..18]
 r94: [14..15]
 r95: [10..11]
Compressing live ranges: from 21 to 14 - 66%
Ranges after the compression:
 r87: [0..13]
 r88: [0..1]
 r89: [10..11]
 r90: [8..9]
 r91: [4..5]
 r92: [2..3]
 r93: [12..13]
 r94: [10..11]
 r95: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 58
changing reg in insn 36
changing reg in insn 7
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 32
changing reg in insn 34
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
deleting insn with uid = 7.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 37.


string::toLower

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,9u} r1={4d,1u,1e} r2={3d} r3={1d,2u} r6={1d,25u} r7={8d,22u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={13d,3u} r18={2d} r19={2d} r20={1d,1u,1e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 247{182d,63u,2e} in 32{30 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 3 1 58 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 58 3 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 58 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":263 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":263 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":263 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":263 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 10 9 40 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":264 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              7 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 92
(code_label 40 10 11 3 99 (nil) [1 uses])
(note 11 40 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":264 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:SI 0 ax [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [92])
                (const_int 4 [0x4])) [1 this_12(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":264 79 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
            (reg:SI 0 ax [orig:88 _1 ] [88]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":264 11 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 56)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":264 548 {*jcc}
     (nil)
 -> 56)
;;  succ:       9
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 93 94 95
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":265 79 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [93]) [2 this_12(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":265 79 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":265 79 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _3 ] [90])
                (plus:SI (reg:SI 0 ax [94])
                    (reg/f:SI 1 dx [orig:89 _2 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":265 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 1 dx [orig:89 _2 ] [89])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32]))
        (nil)))
(insn 21 20 22 4 (set (reg:QI 0 ax [95])
        (mem:QI (reg/f:SI 0 ax [orig:90 _3 ] [90]) [0 *_3+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":265 81 {*movqi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 0 ax [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":265 81 {*movqi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
            (const_int 64 [0x40]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":266 9 {*cmpqi_1}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":266 548 {*jcc}
     (nil)
 -> 30)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
            (const_int 90 [0x5a]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":266 9 {*cmpqi_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":266 548 {*jcc}
     (nil)
 -> 30)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (parallel [
            (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                        (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
                (ior:QI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                            (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":267 367 {*iorqi_1}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91
(code_label 30 29 31 7 98 (nil) [2 uses])
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 7 (set (reg:SI 0 ax [orig:91 _4 ] [91])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":269 134 {extendqisi2}
     (nil))
(insn 33 32 34 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":269 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 34 33 35 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:91 _4 ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":269 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 35 34 37 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":269 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 37 35 38 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringpLEc") [flags 0x1]  <function_decl 0x7ff72fe37700 operator+=>) [0 operator+= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":269 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 38 37 39 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":269 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 39 38 53 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":264 194 {*addsi_1}
     (nil))
(jump_insn 53 39 54 7 (set (pc)
        (label_ref 40)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":264 549 {jump}
     (nil)
 -> 40)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 54 53 56)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 56 54 55 9 101 (nil) [1 uses])
(note 55 56 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 55 49 9 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":271 584 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax]
(code_label 49 57 52 8 96 (nil) [0 uses])
(note 52 49 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 52 51 8 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [8 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":272 79 {*movsi_internal}
     (nil))
(insn 51 50 59 8 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":272 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 59 51 0 NOTE_INSN_DELETED)

;; Function string::c_str (_ZN6string5c_strEv, funcdef_no=57, decl_uid=1413, cgraph_uid=46, symbol_order=47)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 0
   Insn 5: point = 5, n_alt = 0
   Insn 16: point = 6, n_alt = 0
 r87: [6..6]
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]
Compressing live ranges: from 7 to 7 - 100%
Ranges after the compression:
 r87: [6..6]
 r88: [2..3]
 r89: [0..1]
 r90: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


string::c_str

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 6 [bp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={1d} r2={1d} r6={1d,3u} r7={1d,2u} r17={1d} r20={1d,1u} 
;;    total ref usage 21{11d,10u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 87 88 89 90
(note 3 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 16 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 16 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":275 79 {*movsi_internal}
     (nil))
(insn 6 5 13 2 (set (reg/f:SI 0 ax [orig:88 _3 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [90]) [2 this_2(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":275 79 {*movsi_internal}
     (nil))
(insn 13 6 14 2 (set (reg/i:SI 0 ax)
        (reg/f:SI 0 ax [orig:89 <retval> ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":276 79 {*movsi_internal}
     (nil))
(insn 14 13 17 2 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":276 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 17 14 0 NOTE_INSN_DELETED)

;; Function string::split (_ZN6string5splitEc, funcdef_no=58, decl_uid=1417, cgraph_uid=47, symbol_order=48)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) lBwBz  (2) i {*call_pop} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 45:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 51:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 58:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 70:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 77:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=123 from oldreg=97, assigning class GENERAL_REGS to r123
   86: {r123:SI=r123:SI-r98:SI;clobber flags:CC;}
      REG_DEAD r98:SI
      REG_DEAD r97:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  138: r123:SI=r97:SI
    Inserting insn reload after:
  139: r99:SI=r123:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) lBwBz  (2) i {*call_pop} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 112:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 130: point = 0, n_alt = -1
   Insn 129: point = 0, n_alt = 0
   Insn 133: point = 0, n_alt = -1
   Insn 123: point = 0, n_alt = 0
   Insn 122: point = 0, n_alt = 0
   Insn 121: point = 0, n_alt = -2
   Insn 120: point = 1, n_alt = 0
   Insn 119: point = 2, n_alt = 3
   Insn 118: point = 3, n_alt = 0
   Insn 132: point = 3, n_alt = -1
   Insn 116: point = 3, n_alt = 0
   Insn 115: point = 3, n_alt = 0
   Insn 114: point = 3, n_alt = -2
   Insn 113: point = 3, n_alt = 0
   Insn 112: point = 4, n_alt = 3
   Insn 111: point = 5, n_alt = 0
   Insn 110: point = 5, n_alt = 0
   Insn 109: point = 5, n_alt = 0
   Insn 108: point = 5, n_alt = -2
   Insn 107: point = 5, n_alt = 0
   Insn 106: point = 5, n_alt = 0
   Insn 105: point = 6, n_alt = 3
   Insn 104: point = 7, n_alt = 0
   Insn 103: point = 7, n_alt = 0
   Insn 102: point = 7, n_alt = 0
   Insn 101: point = 7, n_alt = -2
   Insn 100: point = 7, n_alt = 0
   Insn 99: point = 8, n_alt = 3
   Insn 98: point = 9, n_alt = 0
   Insn 97: point = 10, n_alt = 3
   Insn 96: point = 11, n_alt = 0
   Insn 95: point = 11, n_alt = 0
   Insn 94: point = 11, n_alt = 0
   Insn 93: point = 11, n_alt = -2
   Insn 92: point = 11, n_alt = 0
   Insn 91: point = 12, n_alt = 0
   Insn 90: point = 12, n_alt = 0
   Insn 89: point = 13, n_alt = 0
   Insn 88: point = 14, n_alt = 3
   Insn 87: point = 15, n_alt = 0
   Insn 139: point = 16, n_alt = -2
	Hard reg 2 is preferable by r123 with profit 1000
   Insn 86: point = 18, n_alt = 0
   Insn 138: point = 19, n_alt = -2
	Hard reg 2 is preferable by r123 with profit 1000
	Hard reg 1 is preferable by r123 with profit 1000
   Insn 85: point = 21, n_alt = 0
   Insn 84: point = 22, n_alt = 0
   Insn 83: point = 24, n_alt = 0
  BB 3
   Insn 20: point = 26, n_alt = -1
   Insn 19: point = 26, n_alt = 0
   Insn 18: point = 27, n_alt = 0
   Insn 17: point = 28, n_alt = 0
   Insn 16: point = 30, n_alt = 0
  BB 6
   Insn 134: point = 32, n_alt = -1
   Insn 77: point = 32, n_alt = 1
  BB 5
   Insn 74: point = 33, n_alt = 0
   Insn 73: point = 33, n_alt = 0
   Insn 72: point = 33, n_alt = -2
   Insn 71: point = 33, n_alt = 0
   Insn 70: point = 34, n_alt = 3
   Insn 69: point = 35, n_alt = 0
   Insn 68: point = 35, n_alt = 1
   Insn 67: point = 36, n_alt = 0
   Insn 66: point = 38, n_alt = 0
   Insn 62: point = 39, n_alt = 0
   Insn 61: point = 39, n_alt = 0
   Insn 60: point = 39, n_alt = -2
   Insn 59: point = 39, n_alt = 0
   Insn 58: point = 40, n_alt = 3
   Insn 57: point = 41, n_alt = 0
   Insn 56: point = 41, n_alt = 0
   Insn 55: point = 41, n_alt = 0
   Insn 54: point = 41, n_alt = -2
   Insn 53: point = 41, n_alt = 0
   Insn 52: point = 41, n_alt = 0
   Insn 51: point = 42, n_alt = 3
   Insn 50: point = 43, n_alt = 0
   Insn 49: point = 43, n_alt = 0
   Insn 48: point = 43, n_alt = 0
   Insn 47: point = 43, n_alt = -2
   Insn 46: point = 43, n_alt = 0
   Insn 45: point = 44, n_alt = 3
   Insn 44: point = 45, n_alt = 0
   Insn 43: point = 46, n_alt = 3
   Insn 42: point = 47, n_alt = 0
   Insn 41: point = 47, n_alt = 0
   Insn 40: point = 47, n_alt = 0
   Insn 39: point = 47, n_alt = -2
   Insn 38: point = 47, n_alt = 0
   Insn 37: point = 48, n_alt = 0
   Insn 36: point = 48, n_alt = 0
   Insn 35: point = 49, n_alt = 0
   Insn 34: point = 50, n_alt = 3
   Insn 33: point = 51, n_alt = 0
   Insn 32: point = 52, n_alt = -2
   Insn 31: point = 54, n_alt = 1
   Insn 30: point = 56, n_alt = 0
  BB 4
   Insn 28: point = 58, n_alt = -1
   Insn 27: point = 58, n_alt = 0
   Insn 26: point = 59, n_alt = 4
   Insn 25: point = 61, n_alt = 0
   Insn 24: point = 63, n_alt = 0
   Insn 23: point = 64, n_alt = 0
   Insn 22: point = 66, n_alt = 0
  BB 2
   Insn 14: point = 68, n_alt = 1
   Insn 13: point = 68, n_alt = 1
   Insn 12: point = 68, n_alt = 0
   Insn 11: point = 68, n_alt = 0
   Insn 10: point = 68, n_alt = -2
   Insn 9: point = 68, n_alt = 0
   Insn 8: point = 68, n_alt = 0
   Insn 4: point = 68, n_alt = 8
   Insn 3: point = 69, n_alt = 0
   Insn 2: point = 71, n_alt = 0
   Insn 136: point = 72, n_alt = 0
 r87: [0..72]
 r88: [26..28]
 r89: [26..27]
 r90: [62..64]
 r91: [62..63]
 r92: [60..61]
 r93: [58..59]
 r94: [53..54]
 r95: [49..52]
 r96: [48..51]
 r97: [20..22]
 r98: [18..21]
 r99: [13..16]
 r100: [12..15]
 r101: [70..71]
 r102: [68..69]
 r103: [29..30]
 r104: [65..66]
 r105: [55..56]
 r106: [47..50]
 r107: [45..46]
 r108: [43..44]
 r109: [41..42]
 r110: [39..40]
 r113: [35..36]
 r114: [37..38]
 r115: [33..34]
 r116: [23..24]
 r117: [11..14]
 r118: [9..10]
 r119: [7..8]
 r120: [5..6]
 r121: [3..4]
 r122: [1..2]
 r123: [17..19]
Compressing live ranges: from 73 to 54 - 73%
Ranges after the compression:
 r87: [0..53]
 r88: [18..19]
 r89: [18..19]
 r90: [46..47]
 r91: [46..47]
 r92: [44..45]
 r93: [42..43]
 r94: [38..39]
 r95: [36..37]
 r96: [36..37]
 r97: [14..15]
 r98: [12..15]
 r99: [10..11]
 r100: [10..11]
 r101: [52..53]
 r102: [50..51]
 r103: [20..21]
 r104: [48..49]
 r105: [40..41]
 r106: [36..37]
 r107: [34..35]
 r108: [32..33]
 r109: [30..31]
 r110: [28..29]
 r113: [24..25]
 r114: [26..27]
 r115: [22..23]
 r116: [16..17]
 r117: [10..11]
 r118: [8..9]
 r119: [6..7]
 r120: [4..5]
 r121: [2..3]
 r122: [0..1]
 r123: [12..13]

********** Assignment #1: **********

	 Assigning to 123 (cl=GENERAL_REGS, orig=97, freq=3000, tfirst=123, tfreq=3000)...
	   Assign 2 to reload r123 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 136
changing reg in insn 121
changing reg in insn 114
changing reg in insn 108
changing reg in insn 101
changing reg in insn 93
changing reg in insn 72
changing reg in insn 60
changing reg in insn 54
changing reg in insn 47
changing reg in insn 39
changing reg in insn 10
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 35
changing reg in insn 33
changing reg in insn 36
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 89
changing reg in insn 87
changing reg in insn 90
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 38
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 51
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 67
changing reg in insn 68
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 83
changing reg in insn 84
changing reg in insn 88
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 105
changing reg in insn 106
changing reg in insn 112
changing reg in insn 113
changing reg in insn 119
changing reg in insn 120
deleting insn with uid = 10.
deleting insn with uid = 39.
deleting insn with uid = 47.
deleting insn with uid = 54.
deleting insn with uid = 60.
deleting insn with uid = 72.
deleting insn with uid = 139.
deleting insn with uid = 93.
deleting insn with uid = 101.
deleting insn with uid = 108.
deleting insn with uid = 114.
deleting insn with uid = 121.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 122.


string::split

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={39d,28u} r1={17d,5u} r2={15d,3u} r3={1d,11u} r6={1d,44u} r7={44d,83u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={51d,2u} r18={11d} r19={11d} r20={1d,1u,3e} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={11d} r38={11d} r39={11d} r40={11d} r41={11d} r42={11d} r43={11d} r44={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} 
;;    total ref usage 1119{939d,177u,3e} in 101{90 regular + 11 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 101 102
(note 6 1 136 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 136 6 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 136 3 2 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 c+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":278 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [102])
        (reg:QI 0 ax [101])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":278 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 c+0 S1 A32])
        (reg:QI 0 ax [102])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":278 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":279 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 9 8 11 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [24  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [24 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":279 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 11 9 12 2 (call (mem:QI (symbol_ref/i:SI ("_ZN6vectorI6stringEC1Ev") [flags 0x1]  <function_decl 0x7ff72fe7e400 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":279 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":279 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 13 12 14 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 last+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":280 79 {*movsi_internal}
     (nil))
(insn 14 13 78 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 103
(code_label 78 14 15 3 107 (nil) [1 uses])
(note 15 78 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 79 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [103])
                (const_int 4 [0x4])) [1 this_24(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 79 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 ax [orig:89 i.4_2 ] [89])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 79 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:88 _1 ] [88])
            (reg:SI 0 ax [orig:89 i.4_2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 11 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 548 {*jcc}
     (nil)
 -> 81)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 104
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":282 79 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:SI 1 dx [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 0 ax [104]) [2 this_24(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":282 79 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 0 ax [orig:91 i.5_4 ] [91])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":282 79 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg/f:SI 0 ax [orig:92 _5 ] [92])
                (plus:SI (reg:SI 0 ax [orig:91 i.5_4 ] [91])
                    (reg/f:SI 1 dx [orig:90 _3 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":282 194 {*addsi_1}
     (nil))
(insn 26 25 27 4 (set (reg:QI 0 ax [orig:93 _6 ] [93])
        (mem:QI (reg/f:SI 0 ax [orig:92 _5 ] [92]) [0 *_5+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":282 81 {*movqi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 c+0 S1 A32])
            (reg:QI 0 ax [orig:93 _6 ] [93]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":282 9 {*cmpqi_1}
     (nil))
(jump_insn 28 27 29 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":282 548 {*jcc}
     (nil)
 -> 75)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 96 105 106 107 108 109 110 113 114 115
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 79 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg:SI 0 ax [orig:94 _7 ] [94])
                (minus:SI (reg:SI 0 ax [105])
                    (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [1 last+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 244 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 last+0 S4 A32]))
        (nil)))
(insn 32 31 33 5 (set (reg:SI 2 cx [orig:95 _8 ] [95])
        (reg:SI 0 ax [orig:94 _7 ] [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 79 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:SI 1 dx [orig:96 last.6_9 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 last+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 79 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg:SI 0 ax [106])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 194 {*addsi_1}
     (nil))
(insn 35 34 36 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 2 cx [orig:95 _8 ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 36 35 37 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:96 last.6_9 ] [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 37 36 38 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 38 37 40 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [106])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 40 38 41 5 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZN6string9substringEjj") [flags 0x1]  <function_decl 0x7ff72fe3d300 substring>) [0 substring S1 A8])
                (const_int 16 [0x10]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 562 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 41 40 42 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 42 41 43 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 43 42 44 5 (parallel [
            (set (reg:SI 0 ax [107])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (nil))
(insn 44 43 45 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [107])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 45 44 46 5 (parallel [
            (set (reg:SI 0 ax [108])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (nil))
(insn 46 45 48 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [108])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 48 46 49 5 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 49 48 50 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 50 49 51 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 51 50 52 5 (parallel [
            (set (reg:SI 0 ax [109])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (nil))
(insn 52 51 53 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [109])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 53 52 55 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [24  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [24 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 55 53 56 5 (call (mem:QI (symbol_ref/i:SI ("_ZN6vectorI6stringE9push_backES0_") [flags 0x1]  <function_decl 0x7ff72fe6d400 push_back>) [0 push_back S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 56 55 57 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 57 56 58 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 58 57 59 5 (parallel [
            (set (reg:SI 0 ax [110])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (nil))
(insn 59 58 61 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [110])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 61 59 62 5 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 62 61 66 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":284 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 66 62 67 5 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":285 79 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (parallel [
            (set (reg:SI 0 ax [113])
                (plus:SI (reg:SI 0 ax [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":285 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 68 67 69 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 last+0 S4 A32])
        (reg:SI 0 ax [113])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":285 79 {*movsi_internal}
     (nil))
(insn 69 68 70 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 70 69 71 5 (parallel [
            (set (reg:SI 0 ax [115])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 194 {*addsi_1}
     (nil))
(insn 71 70 73 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [115])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 73 71 74 5 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 74 73 75 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":283 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 75 74 76 6 106 (nil) [1 uses])
(note 76 75 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 134 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 194 {*addsi_1}
     (nil))
(jump_insn 134 77 135 6 (set (pc)
        (label_ref 78)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":281 549 {jump}
     (nil)
 -> 78)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 135 134 81)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 99 100 116 117 118 119 120 121 122
(code_label 81 135 82 7 105 (nil) [1 uses])
(note 82 81 83 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 7 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 79 {*movsi_internal}
     (nil))
(insn 84 83 85 7 (set (reg:SI 1 dx [orig:97 _10 ] [97])
        (mem:SI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 4 [0x4])) [1 this_24(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 79 {*movsi_internal}
     (nil))
(insn 85 84 138 7 (set (reg:SI 0 ax [orig:98 last.7_11 ] [98])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 last+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 79 {*movsi_internal}
     (nil))
(insn 138 85 86 7 (set (reg:SI 2 cx [orig:97 _10 ] [97])
        (reg:SI 1 dx [orig:97 _10 ] [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 79 {*movsi_internal}
     (nil))
(insn 86 138 87 7 (parallel [
            (set (reg:SI 2 cx [orig:97 _10 ] [97])
                (minus:SI (reg:SI 2 cx [orig:97 _10 ] [97])
                    (reg:SI 0 ax [orig:98 last.7_11 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 244 {*subsi_1}
     (nil))
(insn 87 86 88 7 (set (reg:SI 1 dx [orig:100 last.8_13 ] [100])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 last+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 79 {*movsi_internal}
     (nil))
(insn 88 87 89 7 (parallel [
            (set (reg:SI 0 ax [117])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 194 {*addsi_1}
     (nil))
(insn 89 88 90 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 2 cx [orig:99 _12 ] [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 90 89 91 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:100 last.8_13 ] [100])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 91 90 92 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 92 91 94 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [117])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 94 92 95 7 (parallel [
            (call (mem:QI (symbol_ref:SI ("_ZN6string9substringEjj") [flags 0x1]  <function_decl 0x7ff72fe3d300 substring>) [0 substring S1 A8])
                (const_int 16 [0x10]))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 562 {*call_pop}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 95 94 96 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 96 95 97 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 97 96 98 7 (parallel [
            (set (reg:SI 0 ax [118])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (nil))
(insn 98 97 99 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [118])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 99 98 100 7 (parallel [
            (set (reg:SI 0 ax [119])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (nil))
(insn 100 99 102 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [119])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 102 100 103 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 103 102 104 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 104 103 105 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 105 104 106 7 (parallel [
            (set (reg:SI 0 ax [120])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (nil))
(insn 106 105 107 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [120])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 107 106 109 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [24  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [24 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 109 107 110 7 (call (mem:QI (symbol_ref/i:SI ("_ZN6vectorI6stringE9push_backES0_") [flags 0x1]  <function_decl 0x7ff72fe6d400 push_back>) [0 push_back S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 110 109 111 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 111 110 112 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 112 111 113 7 (parallel [
            (set (reg:SI 0 ax [121])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (nil))
(insn 113 112 115 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [121])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 115 113 116 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 116 115 132 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":289 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 132 116 118 7 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":290 584 {nop}
     (nil))
(insn 118 132 119 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 119 118 120 7 (parallel [
            (set (reg:SI 0 ax [122])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 194 {*addsi_1}
     (nil))
(insn 120 119 122 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [122])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 122 120 123 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 123 122 133 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":288 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 133 123 129 7 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":290 584 {nop}
     (nil))
(insn 129 133 130 7 (set (reg/i:SI 0 ax)
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [24 <retval>+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":291 79 {*movsi_internal}
     (nil))
(insn 130 129 137 7 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":291 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 137 130 0 NOTE_INSN_DELETED)

;; Function string::lastIndexOf (_ZN6string11lastIndexOfEc, funcdef_no=59, decl_uid=1420, cgraph_uid=48, symbol_order=49)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 43: point = 0, n_alt = -1
   Insn 42: point = 0, n_alt = -2
   Insn 38: point = 1, n_alt = -2
  BB 5
   Insn 45: point = 4, n_alt = -1
   Insn 24: point = 4, n_alt = 0
  BB 7
   Insn 35: point = 5, n_alt = 0
  BB 3
   Insn 14: point = 6, n_alt = -1
   Insn 13: point = 6, n_alt = 1
  BB 6
   Insn 47: point = 6, n_alt = -1
   Insn 29: point = 6, n_alt = 1
  BB 4
   Insn 22: point = 6, n_alt = -1
   Insn 21: point = 6, n_alt = 0
   Insn 20: point = 7, n_alt = 4
   Insn 19: point = 9, n_alt = 0
   Insn 18: point = 11, n_alt = 0
   Insn 17: point = 12, n_alt = 0
   Insn 16: point = 14, n_alt = 0
  BB 2
   Insn 11: point = 15, n_alt = 1
   Insn 10: point = 16, n_alt = 0
   Insn 9: point = 18, n_alt = 0
   Insn 8: point = 20, n_alt = 0
   Insn 4: point = 21, n_alt = 8
   Insn 3: point = 22, n_alt = 0
   Insn 2: point = 24, n_alt = 0
   Insn 49: point = 25, n_alt = 0
 r87: [25..25]
 r88: [17..18]
 r89: [15..16]
 r90: [10..12]
 r91: [10..11]
 r92: [8..9]
 r93: [6..7]
 r94: [2..5]
 r95: [0..1]
 r96: [23..24]
 r97: [21..22]
 r98: [19..20]
 r99: [13..14]
Compressing live ranges: from 26 to 23 - 88%
Ranges after the compression:
 r87: [22..22]
 r88: [14..15]
 r89: [12..13]
 r90: [8..9]
 r91: [8..9]
 r92: [6..7]
 r93: [4..5]
 r94: [2..3]
 r95: [0..1]
 r96: [20..21]
 r97: [18..19]
 r98: [16..17]
 r99: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 49
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 35
changing reg in insn 24
changing reg in insn 38
changing reg in insn 38
changing reg in insn 42
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 9
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 38.
starting the processing of deferred insns
ending the processing of deferred insns


string::lastIndexOf

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 17 [flags]
;;  ref usage 	r0={14d,12u} r1={2d,1u} r2={1d} r6={1d,19u} r7={1d,8u} r17={6d,2u} r20={1d,1u} 
;;    total ref usage 69{26d,43u,0e} in 24{24 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 96 97 98
(note 6 1 49 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 49 6 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 49 3 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 c+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":293 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [97])
        (reg:QI 0 ax [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":293 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 c+0 S1 A32])
        (reg:QI 0 ax [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":293 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 79 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [98])
                (const_int 4 [0x4])) [1 this_10(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 0 ax [orig:89 _2 ] [89])
                (plus:SI (reg:SI 0 ax [orig:88 _1 ] [88])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 194 {*addsi_1}
     (nil))
(insn 11 10 30 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (reg:SI 0 ax [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 11 12 3 113 (nil) [1 uses])
(note 12 30 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 548 {*jcc}
     (nil)
 -> 33)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 99
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 0 ax [99])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":295 79 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg/f:SI 1 dx [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 0 ax [99]) [2 this_10(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":295 79 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:SI 0 ax [orig:91 i.14_4 ] [91])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":295 79 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg/f:SI 0 ax [orig:92 _5 ] [92])
                (plus:SI (reg:SI 0 ax [orig:91 i.14_4 ] [91])
                    (reg/f:SI 1 dx [orig:90 _3 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":295 194 {*addsi_1}
     (nil))
(insn 20 19 21 4 (set (reg:QI 0 ax [orig:93 _6 ] [93])
        (mem:QI (reg/f:SI 0 ax [orig:92 _5 ] [92]) [0 *_5+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":295 81 {*movqi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 c+0 S1 A32])
            (reg:QI 0 ax [orig:93 _6 ] [93]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":295 9 {*cmpqi_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":295 548 {*jcc}
     (nil)
 -> 27)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 45 5 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":296 79 {*movsi_internal}
     (nil))
(jump_insn 45 24 46 5 (set (pc)
        (label_ref 36)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":296 549 {jump}
     (nil)
 -> 36)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

(barrier 46 45 27)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 27 46 28 6 111 (nil) [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 47 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 194 {*addsi_1}
     (nil))
(jump_insn 47 29 48 6 (set (pc)
        (label_ref 30)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":294 549 {jump}
     (nil)
 -> 30)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 33)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(code_label 33 48 34 7 110 (nil) [1 uses])
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (const_int -1 [0xffffffffffffffff])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":299 79 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              5 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 0 [ax] 95
(code_label 36 35 37 8 112 (nil) [1 uses])
(note 37 36 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 37 43 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:95 <retval> ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":300 79 {*movsi_internal}
     (nil))
(insn 43 42 50 8 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":300 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 50 43 0 NOTE_INSN_DELETED)

;; Function string::firstIndexOf (_ZN6string12firstIndexOfEc, funcdef_no=60, decl_uid=1423, cgraph_uid=49, symbol_order=50)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 43: point = 0, n_alt = -1
   Insn 42: point = 0, n_alt = -2
   Insn 38: point = 1, n_alt = -2
  BB 5
   Insn 45: point = 4, n_alt = -1
   Insn 24: point = 4, n_alt = 0
  BB 7
   Insn 35: point = 5, n_alt = 0
  BB 3
   Insn 14: point = 6, n_alt = -1
   Insn 13: point = 6, n_alt = 0
   Insn 12: point = 7, n_alt = 0
   Insn 11: point = 8, n_alt = 0
   Insn 10: point = 10, n_alt = 0
  BB 6
   Insn 47: point = 11, n_alt = -1
   Insn 29: point = 11, n_alt = 1
  BB 4
   Insn 22: point = 11, n_alt = -1
   Insn 21: point = 11, n_alt = 0
   Insn 20: point = 12, n_alt = 4
   Insn 19: point = 14, n_alt = 0
   Insn 18: point = 16, n_alt = 0
   Insn 17: point = 17, n_alt = 0
   Insn 16: point = 19, n_alt = 0
  BB 2
   Insn 8: point = 20, n_alt = 1
   Insn 4: point = 20, n_alt = 8
   Insn 3: point = 21, n_alt = 0
   Insn 2: point = 23, n_alt = 0
   Insn 49: point = 24, n_alt = 0
 r87: [24..24]
 r88: [6..8]
 r89: [6..7]
 r90: [15..17]
 r91: [15..16]
 r92: [13..14]
 r93: [11..12]
 r94: [2..5]
 r95: [0..1]
 r96: [22..23]
 r97: [20..21]
 r98: [9..10]
 r99: [18..19]
Compressing live ranges: from 25 to 21 - 84%
Ranges after the compression:
 r87: [20..20]
 r88: [4..5]
 r89: [4..5]
 r90: [12..13]
 r91: [12..13]
 r92: [10..11]
 r93: [8..9]
 r94: [2..3]
 r95: [0..1]
 r96: [18..19]
 r97: [16..17]
 r98: [6..7]
 r99: [14..15]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=20, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 49
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 35
changing reg in insn 24
changing reg in insn 38
changing reg in insn 38
changing reg in insn 42
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 38.
starting the processing of deferred insns
ending the processing of deferred insns


string::firstIndexOf

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 17 [flags]
;;  ref usage 	r0={13d,11u} r1={3d,2u} r2={1d} r6={1d,19u} r7={1d,8u} r17={5d,2u} r20={1d,1u} 
;;    total ref usage 68{25d,43u,0e} in 24{24 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 96 97
(note 6 1 49 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 49 6 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 49 3 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 c+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":302 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [97])
        (reg:QI 0 ax [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":302 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 c+0 S1 A32])
        (reg:QI 0 ax [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":302 81 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 30 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 98
(code_label 30 8 9 3 118 (nil) [1 uses])
(note 9 30 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 79 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [98])
                (const_int 4 [0x4])) [1 this_11(D)->_length+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 79 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:89 i.15_2 ] [89])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:88 _1 ] [88])
            (reg:SI 0 ax [orig:89 i.15_2 ] [89]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 548 {*jcc}
     (nil)
 -> 33)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 99
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 0 ax [99])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [7 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":304 79 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg/f:SI 1 dx [orig:90 _3 ] [90])
        (mem/f:SI (reg/f:SI 0 ax [99]) [2 this_11(D)->_str+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":304 79 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:SI 0 ax [orig:91 i.16_4 ] [91])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":304 79 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg/f:SI 0 ax [orig:92 _5 ] [92])
                (plus:SI (reg:SI 0 ax [orig:91 i.16_4 ] [91])
                    (reg/f:SI 1 dx [orig:90 _3 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":304 194 {*addsi_1}
     (nil))
(insn 20 19 21 4 (set (reg:QI 0 ax [orig:93 _6 ] [93])
        (mem:QI (reg/f:SI 0 ax [orig:92 _5 ] [92]) [0 *_5+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":304 81 {*movqi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 c+0 S1 A32])
            (reg:QI 0 ax [orig:93 _6 ] [93]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":304 9 {*cmpqi_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":304 548 {*jcc}
     (nil)
 -> 27)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 45 5 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":305 79 {*movsi_internal}
     (nil))
(jump_insn 45 24 46 5 (set (pc)
        (label_ref 36)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":305 549 {jump}
     (nil)
 -> 36)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

(barrier 46 45 27)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 27 46 28 6 116 (nil) [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 47 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 194 {*addsi_1}
     (nil))
(jump_insn 47 29 48 6 (set (pc)
        (label_ref 30)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":303 549 {jump}
     (nil)
 -> 30)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 33)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(code_label 33 48 34 7 115 (nil) [1 uses])
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (const_int -1 [0xffffffffffffffff])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":308 79 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              5 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 0 [ax] 95
(code_label 36 35 37 8 117 (nil) [1 uses])
(note 37 36 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 37 43 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:95 <retval> ] [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":309 79 {*movsi_internal}
     (nil))
(insn 43 42 50 8 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/string.cpp":309 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 50 43 0 NOTE_INSN_DELETED)

;; Function vector<string>::vector (_ZN6vectorI6stringEC2Ev, funcdef_no=62, decl_uid=1727, cgraph_uid=51, symbol_order=52)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 8:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 21:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 24: point = 0, n_alt = -1
   Insn 21: point = 0, n_alt = 8
   Insn 20: point = 1, n_alt = 0
   Insn 19: point = 2, n_alt = 1
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 4, n_alt = 1
   Insn 16: point = 5, n_alt = 0
   Insn 15: point = 6, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 7, n_alt = 0
   Insn 12: point = 8, n_alt = 0
   Insn 11: point = 8, n_alt = 0
   Insn 10: point = 8, n_alt = 0
   Insn 9: point = 10, n_alt = 0
   Insn 8: point = 12, n_alt = 8
   Insn 7: point = 13, n_alt = 0
   Insn 6: point = 14, n_alt = 1
   Insn 5: point = 15, n_alt = 0
   Insn 25: point = 16, n_alt = 0
 r87: [11..16]
 r88: [7..8]
 r89: [4..6]
 r90: [14..15]
 r91: [12..13]
 r92: [9..10]
 r93: [4..5]
 r94: [2..3]
 r95: [0..1]
Compressing live ranges: from 17 to 14 - 82%
Ranges after the compression:
 r87: [10..13]
 r88: [6..7]
 r89: [4..5]
 r90: [12..13]
 r91: [10..11]
 r92: [8..9]
 r93: [4..5]
 r94: [2..3]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 25
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 13.


vector<string>::vector

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={5d,3u} r2={2d} r6={1d,7u} r7={4d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 121{95d,26u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95
(note 3 1 25 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 25 3 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 25 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":29 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (plus:SI (reg/f:SI 1 dx [90])
                (const_int 4 [0x4])) [1 this_4(D)->itemCount+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":29 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 1 dx [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":29 79 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem:QI (plus:SI (reg/f:SI 1 dx [91])
                (const_int 8 [0x8])) [6 this_4(D)->_init+0 S1 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":29 81 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [92])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [87])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("_ZN4kapi3apiE") [flags 0x40]  <var_decl 0x7ff72fe071b0 api>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [orig:88 _1 ] [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 0 ax [92])
                (const_int 16 [0x10])) [16 api.mm.malloc+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 12 11 13 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 12 [0xc])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:SI 0 ax [orig:88 _1 ] [88]) [0 *_1 S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 565 {*call_value}
     (nil)
    (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 14 16 2 (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
        (reg:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 79 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 79 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f:SI (reg/f:SI 0 ax [93]) [7 this_4(D)->_items+0 S4 A32])
        (reg/f:SI 1 dx [orig:89 _2 ] [89])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":30 79 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":31 79 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [94])
                (const_int 4 [0x4])) [1 this_4(D)->itemCount+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":31 79 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":32 79 {*movsi_internal}
     (nil))
(insn 21 20 24 2 (set (mem:QI (plus:SI (reg/f:SI 0 ax [95])
                (const_int 8 [0x8])) [6 this_4(D)->_init+0 S1 A32])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":32 81 {*movqi_internal}
     (nil))
(insn 24 21 26 2 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":33 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 24 0 NOTE_INSN_DELETED)

;; Function vector<string>::push_back (_ZN6vectorI6stringE9push_backES0_, funcdef_no=67, decl_uid=1692, cgraph_uid=56, symbol_order=57)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=137 from oldreg=105, assigning class GENERAL_REGS to r137
      Making reload reg 137 for reg 105 optional
   46: {r137:SI=r137:SI+0xc;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  157: r137:SI=r105:SI
    Inserting insn reload after:
  158: r105:SI=r137:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 75:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 90:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 102:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 110:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=138 from oldreg=105, assigning class GENERAL_REGS to inheritance r138
    Original reg change 105->138 (bb7):
   42: [--sp:SI]=r138:SI
      REG_ARGS_SIZE 0x10
    Add inheritance<-original before:
  159: r138:SI=r105:SI

    Inheritance reuse change 105->138 (bb7):
  157: r137:SI=r138:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 8
EBB 9 10
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 148: point = 0, n_alt = -1
   Insn 145: point = 0, n_alt = 1
   Insn 144: point = 1, n_alt = 0
   Insn 143: point = 2, n_alt = 0
   Insn 142: point = 3, n_alt = 1
   Insn 141: point = 4, n_alt = 0
   Insn 140: point = 5, n_alt = 3
   Insn 139: point = 7, n_alt = 0
   Insn 138: point = 9, n_alt = 0
   Insn 137: point = 10, n_alt = 0
   Insn 136: point = 10, n_alt = 0
   Insn 135: point = 10, n_alt = -2
   Insn 134: point = 11, n_alt = 0
   Insn 133: point = 12, n_alt = 3
   Insn 132: point = 13, n_alt = 0
   Insn 131: point = 13, n_alt = 0
   Insn 130: point = 13, n_alt = 0
   Insn 129: point = 13, n_alt = -2
   Insn 128: point = 13, n_alt = 0
   Insn 127: point = 14, n_alt = 0
   Insn 126: point = 15, n_alt = 3
   Insn 125: point = 16, n_alt = 0
   Insn 124: point = 16, n_alt = 0
   Insn 123: point = 18, n_alt = 0
   Insn 122: point = 19, n_alt = -2
   Insn 121: point = 21, n_alt = -2
   Insn 120: point = 23, n_alt = 0
   Insn 119: point = 25, n_alt = 0
   Insn 118: point = 26, n_alt = 0
   Insn 117: point = 26, n_alt = -2
   Insn 116: point = 27, n_alt = 0
   Insn 115: point = 29, n_alt = 0
   Insn 114: point = 30, n_alt = 0
   Insn 113: point = 30, n_alt = 0
   Insn 112: point = 30, n_alt = -2
   Insn 111: point = 30, n_alt = 0
   Insn 110: point = 31, n_alt = 3
   Insn 109: point = 32, n_alt = 0
   Insn 108: point = 32, n_alt = 0
  BB 9
   Insn 61: point = 33, n_alt = -1
   Insn 60: point = 33, n_alt = 0
   Insn 59: point = 34, n_alt = 0
   Insn 58: point = 35, n_alt = 0
   Insn 57: point = 37, n_alt = 0
  BB 10
   Insn 153: point = 39, n_alt = -1
   Insn 102: point = 39, n_alt = 1
   Insn 101: point = 39, n_alt = 0
   Insn 100: point = 39, n_alt = 0
   Insn 99: point = 39, n_alt = -2
   Insn 98: point = 39, n_alt = 0
   Insn 97: point = 40, n_alt = 3
   Insn 96: point = 41, n_alt = 0
   Insn 95: point = 41, n_alt = 0
   Insn 94: point = 41, n_alt = 0
   Insn 93: point = 41, n_alt = -2
   Insn 92: point = 41, n_alt = 0
   Insn 91: point = 42, n_alt = 0
   Insn 90: point = 43, n_alt = 3
   Insn 89: point = 44, n_alt = 0
   Insn 88: point = 44, n_alt = 0
   Insn 87: point = 46, n_alt = 0
   Insn 86: point = 47, n_alt = -2
   Insn 85: point = 49, n_alt = -2
   Insn 84: point = 51, n_alt = 0
   Insn 83: point = 53, n_alt = 0
   Insn 82: point = 54, n_alt = 0
   Insn 81: point = 54, n_alt = -2
   Insn 80: point = 55, n_alt = 0
   Insn 79: point = 56, n_alt = 0
   Insn 78: point = 56, n_alt = 0
   Insn 77: point = 56, n_alt = -2
   Insn 76: point = 56, n_alt = 0
   Insn 75: point = 57, n_alt = 3
   Insn 74: point = 58, n_alt = 0
   Insn 73: point = 59, n_alt = 0
   Insn 72: point = 59, n_alt = 0
   Insn 71: point = 61, n_alt = -2
   Insn 70: point = 63, n_alt = -2
   Insn 69: point = 65, n_alt = 0
   Insn 68: point = 67, n_alt = 0
   Insn 67: point = 68, n_alt = 0
   Insn 66: point = 68, n_alt = -2
   Insn 65: point = 69, n_alt = 0
   Insn 64: point = 70, n_alt = 0
   Insn 63: point = 72, n_alt = 0
  BB 8
   Insn 55: point = 74, n_alt = 1
   Insn 54: point = 74, n_alt = 1
   Insn 53: point = 75, n_alt = 3
  BB 6
   Insn 39: point = 78, n_alt = -1
   Insn 38: point = 78, n_alt = 0
  BB 7
   Insn 151: point = 79, n_alt = -1
   Insn 47: point = 79, n_alt = 0
   Insn 158: point = 79, n_alt = 1
   Insn 46: point = 81, n_alt = 1
   Insn 157: point = 81, n_alt = 0
	   Creating copy r137<-r138@1000
   Insn 45: point = 83, n_alt = 0
   Insn 44: point = 83, n_alt = 0
   Insn 43: point = 83, n_alt = -2
   Insn 42: point = 83, n_alt = 0
   Insn 159: point = 83, n_alt = -1
   Insn 41: point = 85, n_alt = 0
  BB 5
   Insn 3: point = 86, n_alt = 1
   Insn 36: point = 88, n_alt = -2
   Insn 35: point = 90, n_alt = 3
   Insn 34: point = 92, n_alt = 3
   Insn 33: point = 93, n_alt = 1
   Insn 32: point = 93, n_alt = -2
   Insn 31: point = 95, n_alt = -2
   Insn 30: point = 96, n_alt = 0
   Insn 29: point = 96, n_alt = 0
   Insn 28: point = 96, n_alt = -2
   Insn 27: point = 96, n_alt = 0
   Insn 26: point = 97, n_alt = 0
  BB 3
   Insn 149: point = 98, n_alt = -1
   Insn 18: point = 98, n_alt = 0
   Insn 17: point = 100, n_alt = -2
   Insn 16: point = 102, n_alt = -2
   Insn 15: point = 104, n_alt = 0
   Insn 14: point = 106, n_alt = 0
   Insn 13: point = 106, n_alt = 0
   Insn 12: point = 106, n_alt = -2
  BB 4
   Insn 23: point = 108, n_alt = 0
  BB 2
   Insn 10: point = 110, n_alt = -1
   Insn 9: point = 110, n_alt = 0
   Insn 8: point = 110, n_alt = 3
   Insn 7: point = 112, n_alt = 0
   Insn 6: point = 114, n_alt = 0
   Insn 155: point = 115, n_alt = 0
 r87: [10..115]
 r88: [111..112]
 r89: [99..100]
 r90: [89..90]
 r91: [33..35]
 r92: [33..34]
 r93: [60..70]
 r94: [67..69]
 r95: [60..61]
 r96: [58..59]
 r97: [53..55]
 r98: [45..47]
 r99: [41..44]
 r100: [25..27]
 r101: [17..19]
 r102: [13..16]
 r103: [6..7]
 r104: [3..5]
 r105: [84..86] [78..79]
 r106: [78..88]
 r107: [108..108] [96..98]
 r108: [91..110]
 r109: [76..93]
 r110: [87..92]
 r111: [113..114]
 r112: [105..106] [101..102]
 r113: [103..104]
 r114: [94..95]
 r115: [74..75]
 r116: [36..37]
 r117: [71..72]
 r118: [66..68] [62..63]
 r119: [64..65]
 r120: [56..57]
 r121: [52..54] [48..49]
 r122: [50..51]
 r123: [45..46]
 r124: [42..43]
 r125: [39..40]
 r126: [30..31]
 r127: [28..29]
 r128: [24..26] [20..21]
 r129: [22..23]
 r130: [17..18]
 r131: [14..15]
 r132: [11..12]
 r133: [8..9]
 r134: [3..4]
 r135: [0..2]
 r136: [0..1]
 r137: [80..81]
 r138: [82..83]
Compressing live ranges: from 116 to 88 - 75%
Ranges after the compression:
 r87: [8..87]
 r88: [84..85]
 r89: [74..75]
 r90: [66..67]
 r91: [24..25]
 r92: [24..25]
 r93: [44..51]
 r94: [50..51]
 r95: [44..45]
 r96: [42..43]
 r97: [38..39]
 r98: [32..33]
 r99: [30..31]
 r100: [18..19]
 r101: [12..13]
 r102: [10..11]
 r103: [4..5]
 r104: [2..3]
 r105: [62..63] [56..57]
 r106: [56..65]
 r107: [82..82] [72..73]
 r108: [68..83]
 r109: [56..69]
 r110: [64..69]
 r111: [86..87]
 r112: [80..81] [76..77]
 r113: [78..79]
 r114: [70..71]
 r115: [54..55]
 r116: [26..27]
 r117: [52..53]
 r118: [50..51] [46..47]
 r119: [48..49]
 r120: [40..41]
 r121: [38..39] [34..35]
 r122: [36..37]
 r123: [32..33]
 r124: [30..31]
 r125: [28..29]
 r126: [22..23]
 r127: [20..21]
 r128: [18..19] [14..15]
 r129: [16..17]
 r130: [12..13]
 r131: [10..11]
 r132: [8..9]
 r133: [6..7]
 r134: [2..3]
 r135: [0..1]
 r136: [0..1]
 r137: [58..59]
 r138: [60..61]

********** Assignment #1: **********

	 Assigning to 137 (cl=GENERAL_REGS, orig=105, freq=3000, tfirst=137, tfreq=4000)...
	   Assign 0 to optional reload r137 (freq=3000)
	Hard reg 0 is preferable by r138 with profit 1000
	 Assigning to 138 (cl=GENERAL_REGS, orig=105, freq=3000, tfirst=137, tfreq=4000)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  157: r137:SI=r105:SI
      REG_DEAD r105:SI
   Insn after restoring regs:
   42: [--sp:SI]=r105:SI
      REG_ARGS_SIZE 0x10
	   Removing inheritance:
  159: r138:SI=r105:SI
      REG_DEAD r105:SI
deleting insn with uid = 159.
Remove optional reload reg 137
  Restoring original insn:
   46: {r105:SI=r105:SI+0xc;clobber flags:CC;}
      REG_UNUSED flags:CC
  Deleting move 157
  157: r137:SI=r105:SI
      REG_DEAD r105:SI
deleting insn with uid = 157.
  Deleting move 158
  158: r105:SI=r137:SI
      REG_DEAD r137:SI
deleting insn with uid = 158.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
      Creating newreg=139 from oldreg=105, assigning class GENERAL_REGS to r139
      Making reload reg 139 for reg 105 optional
   46: {r139:SI=r139:SI+0xc;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  160: r139:SI=r105:SI
    Inserting insn reload after:
  161: r105:SI=r139:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) m  (1) re {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=140 from oldreg=105, assigning class GENERAL_REGS to inheritance r140
    Original reg change 105->140 (bb7):
   42: [--sp:SI]=r140:SI
      REG_ARGS_SIZE 0x10
    Add inheritance<-original before:
  162: r140:SI=r105:SI

    Inheritance reuse change 105->140 (bb7):
  160: r139:SI=r140:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 8
EBB 9 10
EBB 11

********** Pseudo live ranges #2: **********

  BB 11
   Insn 148: point = 0, n_alt = -1
   Insn 145: point = 0, n_alt = 1
   Insn 144: point = 1, n_alt = 0
   Insn 143: point = 2, n_alt = 0
   Insn 142: point = 3, n_alt = 1
   Insn 141: point = 4, n_alt = 0
   Insn 140: point = 5, n_alt = 3
   Insn 139: point = 7, n_alt = 0
   Insn 138: point = 9, n_alt = 0
   Insn 137: point = 10, n_alt = 0
   Insn 136: point = 10, n_alt = 0
   Insn 135: point = 10, n_alt = -2
   Insn 134: point = 11, n_alt = 0
   Insn 133: point = 12, n_alt = 3
   Insn 132: point = 13, n_alt = 0
   Insn 131: point = 13, n_alt = 0
   Insn 130: point = 13, n_alt = 0
   Insn 129: point = 13, n_alt = -2
   Insn 128: point = 13, n_alt = 0
   Insn 127: point = 14, n_alt = 0
   Insn 126: point = 15, n_alt = 3
   Insn 125: point = 16, n_alt = 0
   Insn 124: point = 16, n_alt = 0
   Insn 123: point = 18, n_alt = 0
   Insn 122: point = 19, n_alt = -2
   Insn 121: point = 21, n_alt = -2
   Insn 120: point = 23, n_alt = 0
   Insn 119: point = 25, n_alt = 0
   Insn 118: point = 26, n_alt = 0
   Insn 117: point = 26, n_alt = -2
   Insn 116: point = 27, n_alt = 0
   Insn 115: point = 29, n_alt = 0
   Insn 114: point = 30, n_alt = 0
   Insn 113: point = 30, n_alt = 0
   Insn 112: point = 30, n_alt = -2
   Insn 111: point = 30, n_alt = 0
   Insn 110: point = 31, n_alt = 3
   Insn 109: point = 32, n_alt = 0
   Insn 108: point = 32, n_alt = 0
  BB 9
   Insn 61: point = 33, n_alt = -1
   Insn 60: point = 33, n_alt = 0
   Insn 59: point = 34, n_alt = 0
   Insn 58: point = 35, n_alt = 0
   Insn 57: point = 37, n_alt = 0
  BB 10
   Insn 153: point = 39, n_alt = -1
   Insn 102: point = 39, n_alt = 1
   Insn 101: point = 39, n_alt = 0
   Insn 100: point = 39, n_alt = 0
   Insn 99: point = 39, n_alt = -2
   Insn 98: point = 39, n_alt = 0
   Insn 97: point = 40, n_alt = 3
   Insn 96: point = 41, n_alt = 0
   Insn 95: point = 41, n_alt = 0
   Insn 94: point = 41, n_alt = 0
   Insn 93: point = 41, n_alt = -2
   Insn 92: point = 41, n_alt = 0
   Insn 91: point = 42, n_alt = 0
   Insn 90: point = 43, n_alt = 3
   Insn 89: point = 44, n_alt = 0
   Insn 88: point = 44, n_alt = 0
   Insn 87: point = 46, n_alt = 0
   Insn 86: point = 47, n_alt = -2
   Insn 85: point = 49, n_alt = -2
   Insn 84: point = 51, n_alt = 0
   Insn 83: point = 53, n_alt = 0
   Insn 82: point = 54, n_alt = 0
   Insn 81: point = 54, n_alt = -2
   Insn 80: point = 55, n_alt = 0
   Insn 79: point = 56, n_alt = 0
   Insn 78: point = 56, n_alt = 0
   Insn 77: point = 56, n_alt = -2
   Insn 76: point = 56, n_alt = 0
   Insn 75: point = 57, n_alt = 3
   Insn 74: point = 58, n_alt = 0
   Insn 73: point = 59, n_alt = 0
   Insn 72: point = 59, n_alt = 0
   Insn 71: point = 61, n_alt = -2
   Insn 70: point = 63, n_alt = -2
   Insn 69: point = 65, n_alt = 0
   Insn 68: point = 67, n_alt = 0
   Insn 67: point = 68, n_alt = 0
   Insn 66: point = 68, n_alt = -2
   Insn 65: point = 69, n_alt = 0
   Insn 64: point = 70, n_alt = 0
   Insn 63: point = 72, n_alt = 0
  BB 8
   Insn 55: point = 74, n_alt = 1
   Insn 54: point = 74, n_alt = 1
   Insn 53: point = 75, n_alt = 3
  BB 6
   Insn 39: point = 78, n_alt = -1
   Insn 38: point = 78, n_alt = 0
  BB 7
   Insn 151: point = 79, n_alt = -1
   Insn 47: point = 79, n_alt = 0
   Insn 161: point = 79, n_alt = 1
   Insn 46: point = 81, n_alt = 1
   Insn 160: point = 81, n_alt = 0
	   Creating copy r139<-r140@1000
   Insn 45: point = 83, n_alt = 0
   Insn 44: point = 83, n_alt = 0
   Insn 43: point = 83, n_alt = -2
   Insn 42: point = 83, n_alt = 0
   Insn 162: point = 83, n_alt = -1
   Insn 41: point = 85, n_alt = 0
  BB 5
   Insn 3: point = 86, n_alt = 1
   Insn 36: point = 88, n_alt = -2
   Insn 35: point = 90, n_alt = 3
   Insn 34: point = 92, n_alt = 3
   Insn 33: point = 93, n_alt = 1
   Insn 32: point = 93, n_alt = -2
   Insn 31: point = 95, n_alt = -2
   Insn 30: point = 96, n_alt = 0
   Insn 29: point = 96, n_alt = 0
   Insn 28: point = 96, n_alt = -2
   Insn 27: point = 96, n_alt = 0
   Insn 26: point = 97, n_alt = 0
  BB 3
   Insn 149: point = 98, n_alt = -1
   Insn 18: point = 98, n_alt = 0
   Insn 17: point = 100, n_alt = -2
   Insn 16: point = 102, n_alt = -2
   Insn 15: point = 104, n_alt = 0
   Insn 14: point = 106, n_alt = 0
   Insn 13: point = 106, n_alt = 0
   Insn 12: point = 106, n_alt = -2
  BB 4
   Insn 23: point = 108, n_alt = 0
  BB 2
   Insn 10: point = 110, n_alt = -1
   Insn 9: point = 110, n_alt = 0
   Insn 8: point = 110, n_alt = 3
   Insn 7: point = 112, n_alt = 0
   Insn 6: point = 114, n_alt = 0
   Insn 155: point = 115, n_alt = 0
 r87: [10..115]
 r88: [111..112]
 r89: [99..100]
 r90: [89..90]
 r91: [33..35]
 r92: [33..34]
 r93: [60..70]
 r94: [67..69]
 r95: [60..61]
 r96: [58..59]
 r97: [53..55]
 r98: [45..47]
 r99: [41..44]
 r100: [25..27]
 r101: [17..19]
 r102: [13..16]
 r103: [6..7]
 r104: [3..5]
 r105: [84..86] [78..79]
 r106: [78..88]
 r107: [108..108] [96..98]
 r108: [91..110]
 r109: [76..93]
 r110: [87..92]
 r111: [113..114]
 r112: [105..106] [101..102]
 r113: [103..104]
 r114: [94..95]
 r115: [74..75]
 r116: [36..37]
 r117: [71..72]
 r118: [66..68] [62..63]
 r119: [64..65]
 r120: [56..57]
 r121: [52..54] [48..49]
 r122: [50..51]
 r123: [45..46]
 r124: [42..43]
 r125: [39..40]
 r126: [30..31]
 r127: [28..29]
 r128: [24..26] [20..21]
 r129: [22..23]
 r130: [17..18]
 r131: [14..15]
 r132: [11..12]
 r133: [8..9]
 r134: [3..4]
 r135: [0..2]
 r136: [0..1]
 r139: [80..81]
 r140: [82..83]
Compressing live ranges: from 116 to 88 - 75%
Ranges after the compression:
 r87: [8..87]
 r88: [84..85]
 r89: [74..75]
 r90: [66..67]
 r91: [24..25]
 r92: [24..25]
 r93: [44..51]
 r94: [50..51]
 r95: [44..45]
 r96: [42..43]
 r97: [38..39]
 r98: [32..33]
 r99: [30..31]
 r100: [18..19]
 r101: [12..13]
 r102: [10..11]
 r103: [4..5]
 r104: [2..3]
 r105: [62..63] [56..57]
 r106: [56..65]
 r107: [82..82] [72..73]
 r108: [68..83]
 r109: [56..69]
 r110: [64..69]
 r111: [86..87]
 r112: [80..81] [76..77]
 r113: [78..79]
 r114: [70..71]
 r115: [54..55]
 r116: [26..27]
 r117: [52..53]
 r118: [50..51] [46..47]
 r119: [48..49]
 r120: [40..41]
 r121: [38..39] [34..35]
 r122: [36..37]
 r123: [32..33]
 r124: [30..31]
 r125: [28..29]
 r126: [22..23]
 r127: [20..21]
 r128: [18..19] [14..15]
 r129: [16..17]
 r130: [12..13]
 r131: [10..11]
 r132: [8..9]
 r133: [6..7]
 r134: [2..3]
 r135: [0..1]
 r136: [0..1]
 r139: [58..59]
 r140: [60..61]

********** Assignment #2: **********

	 Assigning to 139 (cl=GENERAL_REGS, orig=105, freq=3000, tfirst=139, tfreq=4000)...
	   Assign 0 to optional reload r139 (freq=3000)
	Hard reg 0 is preferable by r140 with profit 1000
	 Assigning to 140 (cl=GENERAL_REGS, orig=105, freq=3000, tfirst=139, tfreq=4000)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  160: r139:SI=r105:SI
      REG_DEAD r105:SI
   Insn after restoring regs:
   42: [--sp:SI]=r105:SI
      REG_ARGS_SIZE 0x10
	   Removing inheritance:
  162: r140:SI=r105:SI
      REG_DEAD r105:SI
deleting insn with uid = 162.
Keep optional reload reg 137
Remove optional reload reg 139
  Restoring original insn:
   46: {r105:SI=r105:SI+0xc;clobber flags:CC;}
      REG_UNUSED flags:CC
  Deleting move 160
  160: r139:SI=r105:SI
      REG_DEAD r105:SI
deleting insn with uid = 160.
  Deleting move 161
  161: r105:SI=r139:SI
      REG_DEAD r139:SI
deleting insn with uid = 161.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            0 Non input pseudo reload: reject++
            alt=0,overall=7,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=3,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Pseudo live ranges #3: **********

  BB 11
   Insn 148: point = 0, n_alt = -1
   Insn 145: point = 0, n_alt = 1
   Insn 144: point = 1, n_alt = 0
   Insn 143: point = 2, n_alt = 0
   Insn 142: point = 3, n_alt = 1
   Insn 141: point = 4, n_alt = 0
   Insn 140: point = 5, n_alt = 3
   Insn 139: point = 7, n_alt = 0
   Insn 138: point = 9, n_alt = 0
   Insn 137: point = 10, n_alt = 0
   Insn 136: point = 10, n_alt = 0
   Insn 135: point = 10, n_alt = -2
   Insn 134: point = 11, n_alt = 0
   Insn 133: point = 12, n_alt = 3
   Insn 132: point = 13, n_alt = 0
   Insn 131: point = 13, n_alt = 0
   Insn 130: point = 13, n_alt = 0
   Insn 129: point = 13, n_alt = -2
   Insn 128: point = 13, n_alt = 0
   Insn 127: point = 14, n_alt = 0
   Insn 126: point = 15, n_alt = 3
   Insn 125: point = 16, n_alt = 0
   Insn 124: point = 16, n_alt = 0
   Insn 123: point = 18, n_alt = 0
   Insn 122: point = 19, n_alt = -2
   Insn 121: point = 21, n_alt = -2
   Insn 120: point = 23, n_alt = 0
   Insn 119: point = 25, n_alt = 0
   Insn 118: point = 26, n_alt = 0
   Insn 117: point = 26, n_alt = -2
   Insn 116: point = 27, n_alt = 0
   Insn 115: point = 29, n_alt = 0
   Insn 114: point = 30, n_alt = 0
   Insn 113: point = 30, n_alt = 0
   Insn 112: point = 30, n_alt = -2
   Insn 111: point = 30, n_alt = 0
   Insn 110: point = 31, n_alt = 3
   Insn 109: point = 32, n_alt = 0
   Insn 108: point = 32, n_alt = 0
  BB 9
   Insn 61: point = 33, n_alt = -1
   Insn 60: point = 33, n_alt = 0
   Insn 59: point = 34, n_alt = 0
   Insn 58: point = 35, n_alt = 0
   Insn 57: point = 37, n_alt = 0
  BB 10
   Insn 153: point = 39, n_alt = -1
   Insn 102: point = 39, n_alt = 1
   Insn 101: point = 39, n_alt = 0
   Insn 100: point = 39, n_alt = 0
   Insn 99: point = 39, n_alt = -2
   Insn 98: point = 39, n_alt = 0
   Insn 97: point = 40, n_alt = 3
   Insn 96: point = 41, n_alt = 0
   Insn 95: point = 41, n_alt = 0
   Insn 94: point = 41, n_alt = 0
   Insn 93: point = 41, n_alt = -2
   Insn 92: point = 41, n_alt = 0
   Insn 91: point = 42, n_alt = 0
   Insn 90: point = 43, n_alt = 3
   Insn 89: point = 44, n_alt = 0
   Insn 88: point = 44, n_alt = 0
   Insn 87: point = 46, n_alt = 0
   Insn 86: point = 47, n_alt = -2
   Insn 85: point = 49, n_alt = -2
   Insn 84: point = 51, n_alt = 0
   Insn 83: point = 53, n_alt = 0
   Insn 82: point = 54, n_alt = 0
   Insn 81: point = 54, n_alt = -2
   Insn 80: point = 55, n_alt = 0
   Insn 79: point = 56, n_alt = 0
   Insn 78: point = 56, n_alt = 0
   Insn 77: point = 56, n_alt = -2
   Insn 76: point = 56, n_alt = 0
   Insn 75: point = 57, n_alt = 3
   Insn 74: point = 58, n_alt = 0
   Insn 73: point = 59, n_alt = 0
   Insn 72: point = 59, n_alt = 0
   Insn 71: point = 61, n_alt = -2
   Insn 70: point = 63, n_alt = -2
   Insn 69: point = 65, n_alt = 0
   Insn 68: point = 67, n_alt = 0
   Insn 67: point = 68, n_alt = 0
   Insn 66: point = 68, n_alt = -2
   Insn 65: point = 69, n_alt = 0
   Insn 64: point = 70, n_alt = 0
   Insn 63: point = 72, n_alt = 0
  BB 8
   Insn 55: point = 74, n_alt = 1
   Insn 54: point = 74, n_alt = 1
   Insn 53: point = 75, n_alt = 3
  BB 6
   Insn 39: point = 78, n_alt = -1
   Insn 38: point = 78, n_alt = 0
  BB 7
   Insn 151: point = 79, n_alt = -1
   Insn 47: point = 79, n_alt = 0
   Insn 46: point = 79, n_alt = 1
   Insn 45: point = 79, n_alt = 0
   Insn 44: point = 79, n_alt = 0
   Insn 43: point = 79, n_alt = -2
   Insn 42: point = 79, n_alt = 0
   Insn 41: point = 79, n_alt = 0
  BB 5
   Insn 3: point = 80, n_alt = 1
   Insn 36: point = 82, n_alt = -2
   Insn 35: point = 84, n_alt = 3
   Insn 34: point = 86, n_alt = 3
   Insn 33: point = 87, n_alt = 1
   Insn 32: point = 87, n_alt = -2
   Insn 31: point = 89, n_alt = -2
   Insn 30: point = 90, n_alt = 0
   Insn 29: point = 90, n_alt = 0
   Insn 28: point = 90, n_alt = -2
   Insn 27: point = 90, n_alt = 0
   Insn 26: point = 91, n_alt = 0
  BB 3
   Insn 149: point = 92, n_alt = -1
   Insn 18: point = 92, n_alt = 0
   Insn 17: point = 94, n_alt = -2
   Insn 16: point = 96, n_alt = -2
   Insn 15: point = 98, n_alt = 0
   Insn 14: point = 100, n_alt = 0
   Insn 13: point = 100, n_alt = 0
   Insn 12: point = 100, n_alt = -2
  BB 4
   Insn 23: point = 102, n_alt = 0
  BB 2
   Insn 10: point = 104, n_alt = -1
   Insn 9: point = 104, n_alt = 0
   Insn 8: point = 104, n_alt = 3
   Insn 7: point = 106, n_alt = 0
   Insn 6: point = 108, n_alt = 0
   Insn 155: point = 109, n_alt = 0
 r105: [78..80]
Compressing live ranges: from 110 to 2 - 1%
Ranges after the compression:
 r105: [0..1]
  Slot 0 regnos (width = 0):	 105
Changing spilled pseudos to memory in insn #3
Changing spilled pseudos to memory in insn #42
Changing spilled pseudos to memory in insn #46
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 1 for insn #46
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) rm  (1) 0  (2) re {*addsi_1}
Reusing alternative 0 for insn #42
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
Reusing alternative 1 for insn #3
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=-24)
changing reg in insn 155
changing reg in insn 135
changing reg in insn 129
changing reg in insn 112
changing reg in insn 99
changing reg in insn 93
changing reg in insn 77
changing reg in insn 43
changing reg in insn 28
changing reg in insn 7
changing reg in insn 8
changing reg in insn 17
changing reg in insn 18
changing reg in insn 35
changing reg in insn 36
changing reg in insn 58
changing reg in insn 60
changing reg in insn 59
changing reg in insn 60
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 80
changing reg in insn 83
changing reg in insn 81
changing reg in insn 83
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 88
changing reg in insn 92
changing reg in insn 116
changing reg in insn 119
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 124
changing reg in insn 128
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 142
changing reg in insn 47
changing reg in insn 36
changing reg in insn 47
changing reg in insn 38
changing reg in insn 23
changing reg in insn 18
changing reg in insn 27
changing reg in insn 8
changing reg in insn 35
changing reg in insn 33
changing reg in insn 14
changing reg in insn 12
changing reg in insn 9
changing reg in insn 16
changing reg in insn 14
changing reg in insn 32
changing reg in insn 53
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 3
changing reg in insn 6
changing reg in insn 7
changing reg in insn 16
changing reg in insn 14
changing reg in insn 13
changing reg in insn 12
changing reg in insn 17
changing reg in insn 15
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 31
changing reg in insn 32
changing reg in insn 53
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 63
changing reg in insn 64
changing reg in insn 70
changing reg in insn 68
changing reg in insn 67
changing reg in insn 66
changing reg in insn 71
changing reg in insn 69
changing reg in insn 68
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 85
changing reg in insn 83
changing reg in insn 82
changing reg in insn 81
changing reg in insn 86
changing reg in insn 84
changing reg in insn 83
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 97
changing reg in insn 98
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 121
changing reg in insn 119
changing reg in insn 118
changing reg in insn 117
changing reg in insn 122
changing reg in insn 120
changing reg in insn 119
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 133
changing reg in insn 134
changing reg in insn 138
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 144
changing reg in insn 145
deleting insn with uid = 16.
deleting insn with uid = 17.
deleting insn with uid = 28.
deleting insn with uid = 31.
deleting insn with uid = 43.
deleting insn with uid = 70.
deleting insn with uid = 71.
deleting insn with uid = 77.
deleting insn with uid = 85.
deleting insn with uid = 93.
deleting insn with uid = 99.
deleting insn with uid = 112.
deleting insn with uid = 121.
deleting insn with uid = 129.
deleting insn with uid = 135.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 136.


vector<string>::push_back

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={48d,39u} r1={20d,14u,5e} r2={10d,1u} r3={1d,8u} r4={3d,7u,1e} r5={1d,3u} r6={1d,39u} r7={29d,63u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={58d,3u} r18={8d} r19={8d} r20={1d,1u,2e} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 918{732d,178u,8e} in 110{102 regular + 8 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 108 111
(note 4 1 155 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 155 4 2 2 (parallel [
            (set (reg:SI 3 bx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 155 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [orig:88 _1 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 4 [0x4])) [1 this_25(D)->itemCount+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:SI 4 si [orig:108 _26 ] [108])
                (plus:SI (reg:SI 0 ax [orig:88 _1 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (nil))
(insn 9 8 10 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 4 si [orig:108 _26 ] [108])
            (const_int 178956970 [0xaaaaaaa]))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 11 {*cmpsi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 548 {*jcc}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 108

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108
;; lr  def 	 17 [flags] 89 107 112 113
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 ax [112])
        (reg:SI 4 si [orig:108 _26 ] [108])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:SI 0 ax [112])
                (ashift:SI (reg:SI 0 ax [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 446 {*ashlsi3_1}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg:SI 0 ax [112])
                (plus:SI (reg:SI 0 ax [112])
                    (reg:SI 4 si [orig:108 _26 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 4 si [orig:108 _26 ] [108])
            (const_int 3 [0x3]))
        (nil)))
(insn 15 14 18 3 (parallel [
            (set (reg:SI 0 ax [113])
                (ashift:SI (reg:SI 0 ax [112])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 446 {*ashlsi3_1}
     (nil))
(insn 18 15 149 3 (parallel [
            (set (reg:SI 0 ax [orig:107 iftmp.9_21 ] [107])
                (plus:SI (reg:SI 0 ax [orig:89 _2 ] [89])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (nil))
(jump_insn 149 18 150 3 (set (pc)
        (label_ref 24)) 549 {jump}
     (nil)
 -> 24)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 107 108

(barrier 150 149 21)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 107
(code_label 21 150 22 4 121 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:SI 0 ax [orig:107 iftmp.9_21 ] [107])
        (const_int -1 [0xffffffffffffffff])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 107 108

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 107 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 107 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 105 106 109 110 114
(code_label 24 23 25 5 122 (nil) [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 27 26 29 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [26  S4 A32])
        (reg:SI 0 ax [orig:107 iftmp.9_21 ] [107])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 29 27 30 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_Znam") [flags 0x41]  <function_decl 0x7ff72fdef500 operator new []>) [0 operator new [] S1 A8])
            (const_int 16 [0x10]))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 565 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 30 29 32 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 32 30 33 5 (set (reg/f:SI 5 di [orig:109 _30 ] [109])
        (reg/f:SI 0 ax [114])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (mem:SI (reg/f:SI 5 di [orig:109 _30 ] [109]) [1 MEM[(sizetype *)_30]+0 S4 A32])
        (reg:SI 4 si [orig:108 _26 ] [108])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg/f:SI 0 ax [orig:110 _32 ] [110])
                (plus:SI (reg/f:SI 5 di [orig:109 _30 ] [109])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (nil))
(insn 35 34 36 5 (parallel [
            (set (reg:SI 1 dx [orig:90 _3 ] [90])
                (plus:SI (reg:SI 4 si [orig:108 _26 ] [108])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (nil))
(insn 36 35 3 5 (set (reg:SI 4 si [orig:106 _19 ] [106])
        (reg:SI 1 dx [orig:90 _3 ] [90])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
(insn 3 36 48 5 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [22 %sfp+-36 S4 A32])
        (reg/f:SI 0 ax [orig:110 _32 ] [110])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 106 109

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 106 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106
;; lr  def 	 17 [flags]
(code_label 48 3 37 6 124 (nil) [1 uses])
(note 37 48 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 4 si [orig:106 _19 ] [106])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 39 38 40 6 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 548 {*jcc}
     (nil)
 -> 51)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 106 109

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 106 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 105 106
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105 106
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 159 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(note 159 41 162 7 NOTE_INSN_DELETED)
(note 162 159 42 7 NOTE_INSN_DELETED)
(insn 42 162 44 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [22 %sfp+-36 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 44 42 45 7 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1Ev") [flags 0x1]  <function_decl 0x7ff72fe3dd00 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 45 44 157 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(note 157 45 160 7 NOTE_INSN_DELETED)
(note 160 157 46 7 NOTE_INSN_DELETED)
(insn 46 160 161 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -60 [0xffffffffffffffc4])) [22 %sfp+-36 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -60 [0xffffffffffffffc4])) [22 %sfp+-36 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (nil))
(note 161 46 158 7 NOTE_INSN_DELETED)
(note 158 161 47 7 NOTE_INSN_DELETED)
(insn 47 158 151 7 (parallel [
            (set (reg:SI 4 si [orig:106 _19 ] [106])
                (plus:SI (reg:SI 4 si [orig:106 _19 ] [106])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (nil))
(jump_insn 151 47 152 7 (set (pc)
        (label_ref 48)) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 549 {jump}
     (nil)
 -> 48)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 106 109

(barrier 152 151 51)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 109
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109
;; lr  def 	 17 [flags] 115
(code_label 51 152 52 8 123 (nil) [1 uses])
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (parallel [
            (set (reg:SI 0 ax [115])
                (plus:SI (reg/f:SI 5 di [orig:109 _30 ] [109])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 194 {*addsi_1}
     (nil))
(insn 54 53 55 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [7 temp+0 S4 A32])
        (reg:SI 0 ax [115])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":55 79 {*movsi_internal}
     (nil))
(insn 55 54 103 8 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 79 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              10 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 116
(code_label 103 55 56 9 126 (nil) [1 uses])
(note 56 103 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 9 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 79 {*movsi_internal}
     (nil))
(insn 58 57 59 9 (set (reg:SI 1 dx [orig:91 _4 ] [91])
        (mem:SI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 4 [0x4])) [1 this_25(D)->itemCount+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 79 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (set (reg:SI 0 ax [orig:92 i.11_5 ] [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 79 {*movsi_internal}
     (nil))
(insn 60 59 61 9 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:91 _4 ] [91])
            (reg:SI 0 ax [orig:92 i.11_5 ] [92]))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 11 {*cmpsi_1}
     (nil))
(jump_insn 61 60 62 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 106)
            (pc))) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 548 {*jcc}
     (nil)
 -> 106)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 97 98 99 117 118 119 120 121 122 123 124 125
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 64 63 65 10 (set (reg/f:SI 2 cx [orig:93 _6 ] [93])
        (mem/f:SI (reg/f:SI 0 ax [117]) [7 this_25(D)->_items+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 65 64 66 10 (set (reg:SI 1 dx [orig:94 i.12_7 ] [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 66 65 67 10 (set (reg:SI 0 ax [118])
        (reg:SI 1 dx [orig:94 i.12_7 ] [94])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 67 66 68 10 (parallel [
            (set (reg:SI 0 ax [118])
                (ashift:SI (reg:SI 0 ax [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 446 {*ashlsi3_1}
     (nil))
(insn 68 67 69 10 (parallel [
            (set (reg:SI 0 ax [118])
                (plus:SI (reg:SI 0 ax [118])
                    (reg:SI 1 dx [orig:94 i.12_7 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:94 i.12_7 ] [94])
            (const_int 3 [0x3]))
        (nil)))
(insn 69 68 72 10 (parallel [
            (set (reg:SI 0 ax [119])
                (ashift:SI (reg:SI 0 ax [118])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 446 {*ashlsi3_1}
     (nil))
(insn 72 69 73 10 (parallel [
            (set (reg/f:SI 0 ax [orig:96 _9 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 _8 ] [95])
                    (reg/f:SI 2 cx [orig:93 _6 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (nil))
(insn 73 72 74 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 74 73 75 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg/f:SI 0 ax [orig:96 _9 ] [96])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 75 74 76 10 (parallel [
            (set (reg:SI 0 ax [120])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (nil))
(insn 76 75 78 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [120])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 78 76 79 10 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 79 78 80 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 80 79 81 10 (set (reg:SI 1 dx [orig:97 i.13_10 ] [97])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 81 80 82 10 (set (reg:SI 0 ax [121])
        (reg:SI 1 dx [orig:97 i.13_10 ] [97])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 82 81 83 10 (parallel [
            (set (reg:SI 0 ax [121])
                (ashift:SI (reg:SI 0 ax [121])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 446 {*ashlsi3_1}
     (nil))
(insn 83 82 84 10 (parallel [
            (set (reg:SI 0 ax [121])
                (plus:SI (reg:SI 0 ax [121])
                    (reg:SI 1 dx [orig:97 i.13_10 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:97 i.13_10 ] [97])
            (const_int 3 [0x3]))
        (nil)))
(insn 84 83 86 10 (parallel [
            (set (reg:SI 0 ax [122])
                (ashift:SI (reg:SI 0 ax [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 446 {*ashlsi3_1}
     (nil))
(insn 86 84 87 10 (set (reg:SI 1 dx [orig:98 _11 ] [98])
        (reg:SI 0 ax [121])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 87 86 88 10 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [7 temp+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 79 {*movsi_internal}
     (nil))
(insn 88 87 89 10 (parallel [
            (set (reg/f:SI 1 dx [orig:99 _12 ] [99])
                (plus:SI (reg:SI 1 dx [orig:98 _11 ] [98])
                    (reg/f:SI 0 ax [123])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [7 temp+0 S4 A32])
            (reg:SI 1 dx [orig:98 _11 ] [98]))
        (nil)))
(insn 89 88 90 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 90 89 91 10 (parallel [
            (set (reg:SI 0 ax [124])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (nil))
(insn 91 90 92 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [124])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 92 91 94 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg/f:SI 1 dx [orig:99 _12 ] [99])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 94 92 95 10 (call (mem:QI (symbol_ref:SI ("_ZN6stringaSES_") [flags 0x1]  <function_decl 0x7ff72fe37d00 operator=>) [0 operator= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 95 94 96 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 96 95 97 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 97 96 98 10 (parallel [
            (set (reg:SI 0 ax [125])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (nil))
(insn 98 97 100 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [125])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 100 98 101 10 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 101 100 102 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":57 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 102 101 153 10 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 194 {*addsi_1}
     (nil))
(jump_insn 153 102 154 10 (set (pc)
        (label_ref 103)) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":56 549 {jump}
     (nil)
 -> 103)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 154 153 106)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 100 101 102 103 104 126 127 128 129 130 131 132 133 134 135 136
(code_label 106 154 107 11 125 (nil) [1 uses])
(note 107 106 108 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 109 108 110 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [8 item+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 110 109 111 11 (parallel [
            (set (reg:SI 0 ax [126])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (nil))
(insn 111 110 113 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [126])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 113 111 114 11 (call (mem:QI (symbol_ref:SI ("_ZN6stringC1ERKS_") [flags 0x1]  <function_decl 0x7ff72fe41100 __ct_comp >) [0 __ct_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 114 113 115 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 115 114 116 11 (set (reg/f:SI 0 ax [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 79 {*movsi_internal}
     (nil))
(insn 116 115 117 11 (set (reg:SI 1 dx [orig:100 _13 ] [100])
        (mem:SI (plus:SI (reg/f:SI 0 ax [127])
                (const_int 4 [0x4])) [1 this_25(D)->itemCount+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 79 {*movsi_internal}
     (nil))
(insn 117 116 118 11 (set (reg:SI 0 ax [128])
        (reg:SI 1 dx [orig:100 _13 ] [100])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 79 {*movsi_internal}
     (nil))
(insn 118 117 119 11 (parallel [
            (set (reg:SI 0 ax [128])
                (ashift:SI (reg:SI 0 ax [128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 446 {*ashlsi3_1}
     (nil))
(insn 119 118 120 11 (parallel [
            (set (reg:SI 0 ax [128])
                (plus:SI (reg:SI 0 ax [128])
                    (reg:SI 1 dx [orig:100 _13 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:100 _13 ] [100])
            (const_int 3 [0x3]))
        (nil)))
(insn 120 119 122 11 (parallel [
            (set (reg:SI 0 ax [129])
                (ashift:SI (reg:SI 0 ax [128])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 446 {*ashlsi3_1}
     (nil))
(insn 122 120 123 11 (set (reg:SI 1 dx [orig:101 _14 ] [101])
        (reg:SI 0 ax [128])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 79 {*movsi_internal}
     (nil))
(insn 123 122 124 11 (set (reg/f:SI 0 ax [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [7 temp+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 79 {*movsi_internal}
     (nil))
(insn 124 123 125 11 (parallel [
            (set (reg/f:SI 1 dx [orig:102 _15 ] [102])
                (plus:SI (reg:SI 1 dx [orig:101 _14 ] [101])
                    (reg/f:SI 0 ax [130])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [7 temp+0 S4 A32])
            (reg:SI 1 dx [orig:101 _14 ] [101]))
        (nil)))
(insn 125 124 126 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 126 125 127 11 (parallel [
            (set (reg:SI 0 ax [131])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (nil))
(insn 127 126 128 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [131])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 128 127 130 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg/f:SI 1 dx [orig:102 _15 ] [102])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 130 128 131 11 (call (mem:QI (symbol_ref:SI ("_ZN6stringaSES_") [flags 0x1]  <function_decl 0x7ff72fe37d00 operator=>) [0 operator= S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 554 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 131 130 132 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 132 131 133 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 133 132 134 11 (parallel [
            (set (reg:SI 0 ax [132])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (nil))
(insn 134 133 136 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [132])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 60 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 136 134 137 11 (call (mem:QI (symbol_ref:SI ("_ZN6stringD1Ev") [flags 0x1]  <function_decl 0x7ff72fe41300 __dt_comp >) [0 __dt_comp  S1 A8])
        (const_int 16 [0x10])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 554 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 137 136 138 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":59 194 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 138 137 139 11 (set (reg/f:SI 0 ax [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":60 79 {*movsi_internal}
     (nil))
(insn 139 138 140 11 (set (reg:SI 0 ax [orig:103 _16 ] [103])
        (mem:SI (plus:SI (reg/f:SI 0 ax [133])
                (const_int 4 [0x4])) [1 this_25(D)->itemCount+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":60 79 {*movsi_internal}
     (nil))
(insn 140 139 141 11 (parallel [
            (set (reg:SI 1 dx [orig:104 _17 ] [104])
                (plus:SI (reg:SI 0 ax [orig:103 _16 ] [103])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":60 194 {*addsi_1}
     (nil))
(insn 141 140 142 11 (set (reg/f:SI 0 ax [134])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":60 79 {*movsi_internal}
     (nil))
(insn 142 141 143 11 (set (mem:SI (plus:SI (reg/f:SI 0 ax [134])
                (const_int 4 [0x4])) [1 this_25(D)->itemCount+0 S4 A32])
        (reg:SI 1 dx [orig:104 _17 ] [104])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":60 79 {*movsi_internal}
     (nil))
(insn 143 142 144 11 (set (reg/f:SI 0 ax [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [23 this+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":61 79 {*movsi_internal}
     (nil))
(insn 144 143 145 11 (set (reg/f:SI 1 dx [136])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [7 temp+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":61 79 {*movsi_internal}
     (nil))
(insn 145 144 148 11 (set (mem/f:SI (reg/f:SI 0 ax [135]) [7 this_25(D)->_items+0 S4 A32])
        (reg/f:SI 1 dx [136])) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":61 79 {*movsi_internal}
     (nil))
(insn 148 145 156 11 (const_int 0 [0]) "/mnt/d/Documents/Code/LimeOS/drivers/i686/vga_textmode/../../../src/arch/i686/kapi/api/vector.h":62 584 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 156 148 0 NOTE_INSN_DELETED)
