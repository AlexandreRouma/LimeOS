
;; Function memcpy (_Z6memcpyPvS_y, funcdef_no=6, decl_uid=1040, cgraph_uid=6, symbol_order=6)

      Creating newreg=118
Removing SCRATCH in insn #21 (nop 0)
rescanning insn with uid = 21.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=56, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=40, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) o  (1) riF {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) riFo {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*cmpsi_1}
            0 Scratch win: reject+=2
          alt=0,overall=14,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 21:  (0) =r  (1) 0  (2) rmWe {subsi3_carry_ccc}
      Creating newreg=119 from oldreg=118, assigning class GENERAL_REGS to r119
      Change to class INDEX_REGS for r118
   21: {flags:CCC=cmp(zero_extend(r119:SI),ltu(flags:CC,0)+zero_extend([frame:SI-0x2c]));clobber r119:SI;}
      REG_UNUSED r118:SI
      REG_DEAD r107:DI
    Inserting insn reload before:
   85: r119:SI=r107:DI#4

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 31:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=4
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1: Bad operand -- refuse
	 Choosing alt 1 in insn 32:  (0) o  (1) 0  (2) rnF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) riFo {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) o  (1) riF {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=120 from oldreg=112, assigning class GENERAL_REGS to r120
   46: {r120:SI=r120:SI^0;clobber flags:CC;}
      REG_DEAD r112:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x10]^0
    Inserting insn reload before:
   86: r120:SI=r112:SI
    Inserting insn reload after:
   87: r111:DI#0=r120:SI

            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*xorsi_1}
      Creating newreg=121 from oldreg=113, assigning class GENERAL_REGS to r121
   48: {r121:SI=r121:SI^0;clobber flags:CC;}
      REG_DEAD r113:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0xc]^0
    Inserting insn reload before:
   88: r121:SI=r113:SI
    Inserting insn reload after:
   89: r111:DI#4=r121:SI

            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*iorsi_1}
      Creating newreg=122 from oldreg=114, assigning class GENERAL_REGS to r122
   49: {r122:SI=r122:SI|r111:DI#0;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   90: r122:SI=r111:DI#4
    Inserting insn reload after:
   91: r114:SI=r122:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 54:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 58:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 62:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=4
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1: Bad operand -- refuse
	 Choosing alt 1 in insn 63:  (0) o  (1) 0  (2) rnF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 77: point = 0, n_alt = -1
   Insn 76: point = 0, n_alt = -2
   Insn 72: point = 1, n_alt = -2
   Insn 69: point = 3, n_alt = 0
  BB 7
   Insn 51: point = 4, n_alt = -1
   Insn 50: point = 4, n_alt = 0
   Insn 91: point = 5, n_alt = -2
	Hard reg 2 is preferable by r122 with profit 1000
   Insn 49: point = 7, n_alt = 0
   Insn 90: point = 7, n_alt = 0
   Insn 89: point = 8, n_alt = 0
   Insn 48: point = 9, n_alt = 0
   Insn 88: point = 9, n_alt = -2
	Hard reg 2 is preferable by r121 with profit 1000
   Insn 47: point = 11, n_alt = 0
   Insn 87: point = 12, n_alt = 0
   Insn 46: point = 13, n_alt = 0
   Insn 86: point = 13, n_alt = -2
	Hard reg 2 is preferable by r120 with profit 1000
   Insn 45: point = 15, n_alt = 0
  BB 8
   Insn 81: point = 17, n_alt = -1
   Insn 63: point = 17, n_alt = 1
   Insn 62: point = 17, n_alt = 8
   Insn 61: point = 18, n_alt = 4
   Insn 60: point = 20, n_alt = 0
   Insn 59: point = 22, n_alt = 0
   Insn 58: point = 23, n_alt = 3
   Insn 57: point = 25, n_alt = 0
   Insn 56: point = 26, n_alt = 0
   Insn 55: point = 28, n_alt = 0
   Insn 54: point = 29, n_alt = 3
   Insn 53: point = 31, n_alt = 0
  BB 6
   Insn 43: point = 33, n_alt = 1
   Insn 42: point = 34, n_alt = 0
  BB 4
   Insn 22: point = 36, n_alt = -1
   Insn 21: point = 36, n_alt = 0
   Insn 85: point = 37, n_alt = 0
   Insn 20: point = 39, n_alt = 1
   Insn 19: point = 39, n_alt = 0
  BB 5
   Insn 79: point = 40, n_alt = -1
   Insn 32: point = 40, n_alt = 1
   Insn 31: point = 40, n_alt = 8
   Insn 30: point = 41, n_alt = 4
   Insn 29: point = 43, n_alt = 0
   Insn 28: point = 45, n_alt = 0
   Insn 27: point = 46, n_alt = 0
   Insn 26: point = 47, n_alt = 0
   Insn 25: point = 49, n_alt = 0
   Insn 24: point = 50, n_alt = 0
  BB 3
   Insn 17: point = 51, n_alt = 1
  BB 2
   Insn 15: point = 51, n_alt = -1
   Insn 14: point = 51, n_alt = 1
   Insn 13: point = 52, n_alt = 0
   Insn 12: point = 53, n_alt = 1
   Insn 11: point = 54, n_alt = 0
   Insn 10: point = 55, n_alt = 1
   Insn 9: point = 56, n_alt = 0
   Insn 5: point = 57, n_alt = 1
   Insn 4: point = 58, n_alt = 0
   Insn 3: point = 59, n_alt = 1
   Insn 2: point = 60, n_alt = 0
   Insn 83: point = 61, n_alt = 0
 r87: [61..61]
 r88: [48..50]
 r89: [42..47]
 r90: [44..46]
 r91: [40..43]
 r92: [40..41]
 r93: [30..31]
 r94: [27..29]
 r95: [19..26]
 r96: [24..25]
 r97: [21..23]
 r98: [17..20]
 r99: [17..18]
 r100: [2..3]
 r101: [0..1]
 r102: [59..60]
 r103: [57..58]
 r104: [55..56]
 r105: [53..54]
 r106: [51..52]
 r107: [38..39]
 r108: [48..49]
 r109: [44..45]
 r110: [33..34]
 r111: [51..62] [4..35]
 r112: [14..15]
 r113: [10..11]
 r114: [4..5]
 r115: [27..28]
 r116: [21..22]
 r119: [36..37]
 r120: [12..13]
 r121: [8..9]
 r122: [6..7]
Compressing live ranges: from 63 to 54 - 85%
Ranges after the compression:
 r87: [52..52]
 r88: [40..41]
 r89: [36..39]
 r90: [38..39]
 r91: [34..37]
 r92: [34..35]
 r93: [26..27]
 r94: [24..25]
 r95: [18..23]
 r96: [22..23]
 r97: [20..21]
 r98: [16..19]
 r99: [16..17]
 r100: [2..3]
 r101: [0..1]
 r102: [50..51]
 r103: [48..49]
 r104: [46..47]
 r105: [44..45]
 r106: [42..43]
 r107: [32..33]
 r108: [40..41]
 r109: [38..39]
 r110: [28..29]
 r111: [42..53] [4..29]
 r112: [14..15]
 r113: [10..11]
 r114: [4..5]
 r115: [24..25]
 r116: [20..21]
 r119: [30..31]
 r120: [12..13]
 r121: [8..9]
 r122: [6..7]

********** Assignment #1: **********

	 Assigning to 120 (cl=GENERAL_REGS, orig=112, freq=3000, tfirst=120, tfreq=3000)...
	   Assign 2 to reload r120 (freq=3000)
	 Assigning to 121 (cl=GENERAL_REGS, orig=113, freq=3000, tfirst=121, tfreq=3000)...
	   Assign 2 to reload r121 (freq=3000)
	 Assigning to 122 (cl=GENERAL_REGS, orig=114, freq=3000, tfirst=122, tfreq=3000)...
	   Assign 2 to reload r122 (freq=3000)
	 Assigning to 119 (cl=GENERAL_REGS, orig=118, freq=2000, tfirst=119, tfreq=2000)...
	   Assign 0 to reload r119 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=56, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=40, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 83
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 30
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 31
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 56
changing reg in insn 61
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 69
changing reg in insn 72
changing reg in insn 72
changing reg in insn 76
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 5
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 25
changing reg in insn 28
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 46
changing reg in insn 45
changing reg in insn 47
changing reg in insn 50
changing reg in insn 55
changing reg in insn 59
deleting insn with uid = 86.
deleting insn with uid = 88.
deleting insn with uid = 91.
deleting insn with uid = 72.
starting the processing of deferred insns
ending the processing of deferred insns


memcpy

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 17 [flags]
;;  ref usage 	r0={10d,9u} r1={6d,5u,1e} r2={19d,17u,1e} r3={5d,5u,1e} r4={1d,1u,1e} r6={1d,40u} r7={1d,9u} r17={16d,4u} r20={1d,1u,6e} 
;;    total ref usage 161{60d,91u,10e} in 55{55 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 102 103 104 105 106
(note 7 1 83 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 83 7 2 2 (parallel [
            (set (reg:SI 2 cx [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 83 3 2 (set (reg:SI 2 cx [102])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [1 size+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":3 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 size+0 S4 A64])
        (reg:SI 2 cx [102])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":3 79 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (reg:SI 2 cx [103])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [1 size+4 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":3 79 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [1 size+4 S4 A32])
        (reg:SI 2 cx [103])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":3 79 {*movsi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:SI 2 cx [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [3 dstptr+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":4 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 dst+0 S4 A32])
        (reg/f:SI 2 cx [104])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":4 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 2 cx [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [3 srcptr+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":5 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 src+0 S4 A32])
        (reg/f:SI 2 cx [105])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":5 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 2 cx [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 dst+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":6 79 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CC 17 flags)
        (compare:CC (reg/f:SI 2 cx [106])
            (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 src+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":6 11 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":6 548 {*jcc}
     (nil)
 -> 40)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 33 3 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S8 A64])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 78 {*movdi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              5 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107
(code_label 33 17 18 4 4 (nil) [1 uses])
(note 18 33 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:DI 0 ax [107])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S8 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 78 {*movdi_internal}
     (nil))
(insn 20 19 85 4 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [107])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [1 size+0 S4 A64]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 11 {*cmpsi_1}
     (nil))
(insn 85 20 21 4 (set (reg:SI 0 ax [118])
        (reg:SI 1 dx [+4 ])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 79 {*movsi_internal}
     (nil))
(insn 21 85 22 4 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (zero_extend:DI (reg:SI 0 ax [118]))
                    (plus:DI (ltu:DI (reg:CC 17 flags)
                            (const_int 0 [0]))
                        (zero_extend:DI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                                    (const_int -44 [0xffffffffffffffd4])) [1 size+4 S4 A32])))))
            (clobber (reg:SI 0 ax [118]))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 281 {subsi3_carry_ccc}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (geu (reg:CCC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 67)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 548 {*jcc}
     (nil)
 -> 67)
;;  succ:       9
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 91 92 108 109
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 79 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 src+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 79 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (parallel [
            (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
                (plus:SI (reg/f:SI 0 ax [108])
                    (reg:SI 1 dx [orig:88 _1 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 src+0 S4 A32])
            (reg:SI 1 dx [orig:88 _1 ] [88]))
        (nil)))
(insn 27 26 28 5 (set (reg:SI 2 cx [orig:90 _3 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 79 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:SI 1 dx [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 dst+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 79 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (reg/f:SI 1 dx [orig:91 _4 ] [91])
                (plus:SI (reg/f:SI 1 dx [109])
                    (reg:SI 2 cx [orig:90 _3 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 dst+0 S4 A32])
            (reg:SI 2 cx [orig:90 _3 ] [90]))
        (nil)))
(insn 30 29 31 5 (set (reg:QI 0 ax [orig:92 _5 ] [92])
        (mem:QI (reg/f:SI 0 ax [orig:89 _2 ] [89]) [0 *_2+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 81 {*movqi_internal}
     (nil))
(insn 31 30 32 5 (set (mem:QI (reg/f:SI 1 dx [orig:91 _4 ] [91]) [0 *_4+0 S1 A8])
        (reg:QI 0 ax [orig:92 _5 ] [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":8 81 {*movqi_internal}
     (nil))
(insn 32 31 79 5 (parallel [
            (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [1 i+0 S8 A64])
                (plus:DI (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [1 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 192 {*adddi3_doubleword}
     (nil))
(jump_insn 79 32 80 5 (set (pc)
        (label_ref 33)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":7 549 {jump}
     (nil)
 -> 33)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 80 79 40)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110
(code_label 40 80 41 6 2 (nil) [1 uses])
(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 6 (set (reg:DI 2 cx [110])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 size+0 S8 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 78 {*movdi_internal}
     (nil))
(insn 43 42 64 6 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S8 A64])
        (reg:DI 2 cx [110])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 78 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111
;; lr  def 	 17 [flags] 112 113 114
(code_label 64 43 44 7 6 (nil) [1 uses])
(note 44 64 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg:SI 2 cx [112])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 79 {*movsi_internal}
     (nil))
(insn 46 45 87 7 (parallel [
            (set (reg:SI 2 cx [112])
                (xor:SI (reg:SI 2 cx [112])
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 364 {*xorsi_1}
     (expr_list:REG_EQUAL (xor:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [1 i+0 S4 A64])
            (const_int 0 [0]))
        (nil)))
(insn 87 46 47 7 (set (reg:SI 0 ax [111])
        (reg:SI 2 cx [112])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 79 {*movsi_internal}
     (nil))
(insn 47 87 48 7 (set (reg:SI 2 cx [113])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 i+4 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 79 {*movsi_internal}
     (nil))
(insn 48 47 89 7 (parallel [
            (set (reg:SI 2 cx [113])
                (xor:SI (reg:SI 2 cx [113])
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 364 {*xorsi_1}
     (expr_list:REG_EQUAL (xor:SI (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [1 i+4 S4 A32])
            (const_int 0 [0]))
        (nil)))
(insn 89 48 90 7 (set (reg:SI 1 dx [+4 ])
        (reg:SI 2 cx [113])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 79 {*movsi_internal}
     (nil))
(insn 90 89 49 7 (set (reg:SI 2 cx [114])
        (reg:SI 1 dx [+4 ])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 79 {*movsi_internal}
     (nil))
(insn 49 90 50 7 (parallel [
            (set (reg:SI 2 cx [114])
                (ior:SI (reg:SI 2 cx [114])
                    (reg:SI 0 ax [111])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 363 {*iorsi_1}
     (nil))
(insn 50 49 51 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [114])
            (const_int 0 [0]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 51 50 52 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 548 {*jcc}
     (nil)
 -> 67)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 115 116
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (set (reg:SI 2 cx [orig:93 _6 ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 79 {*movsi_internal}
     (nil))
(insn 54 53 55 8 (parallel [
            (set (reg:SI 3 bx [orig:94 _7 ] [94])
                (plus:SI (reg:SI 2 cx [orig:93 _6 ] [93])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 194 {*addsi_1}
     (nil))
(insn 55 54 56 8 (set (reg/f:SI 2 cx [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 src+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 79 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg/f:SI 2 cx [orig:95 _8 ] [95])
                (plus:SI (reg/f:SI 2 cx [115])
                    (reg:SI 3 bx [orig:94 _7 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 src+0 S4 A32])
            (reg:SI 3 bx [orig:94 _7 ] [94]))
        (nil)))
(insn 57 56 58 8 (set (reg:SI 3 bx [orig:96 _9 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 79 {*movsi_internal}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg:SI 4 si [orig:97 _10 ] [97])
                (plus:SI (reg:SI 3 bx [orig:96 _9 ] [96])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 194 {*addsi_1}
     (nil))
(insn 59 58 60 8 (set (reg/f:SI 3 bx [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 dst+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 79 {*movsi_internal}
     (nil))
(insn 60 59 61 8 (parallel [
            (set (reg/f:SI 3 bx [orig:98 _11 ] [98])
                (plus:SI (reg/f:SI 3 bx [116])
                    (reg:SI 4 si [orig:97 _10 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 dst+0 S4 A32])
            (reg:SI 4 si [orig:97 _10 ] [97]))
        (nil)))
(insn 61 60 62 8 (set (reg:QI 2 cx [orig:99 _12 ] [99])
        (mem:QI (reg/f:SI 2 cx [orig:95 _8 ] [95]) [0 *_8+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 81 {*movqi_internal}
     (nil))
(insn 62 61 63 8 (set (mem:QI (reg/f:SI 3 bx [orig:98 _11 ] [98]) [0 *_11+0 S1 A8])
        (reg:QI 2 cx [orig:99 _12 ] [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":11 81 {*movqi_internal}
     (nil))
(insn 63 62 81 8 (parallel [
            (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [1 i+0 S8 A64])
                (plus:DI (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [1 i+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 192 {*adddi3_doubleword}
     (nil))
(jump_insn 81 63 82 8 (set (pc)
        (label_ref 64)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":10 549 {jump}
     (nil)
 -> 64)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 111

(barrier 82 81 67)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4
;;              7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 100 101
(code_label 67 82 68 9 5 (nil) [2 uses])
(note 68 67 69 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 76 9 (set (reg/f:SI 0 ax [orig:100 _30 ] [100])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [3 dstptr+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":13 79 {*movsi_internal}
     (nil))
(insn 76 69 77 9 (set (reg/i:SI 0 ax)
        (reg/f:SI 0 ax [orig:101 <retval> ] [101])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":14 79 {*movsi_internal}
     (nil))
(insn 77 76 84 9 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":14 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 84 77 0 NOTE_INSN_DELETED)

;; Function memcmp (_Z6memcmpPvS_y, funcdef_no=7, decl_uid=1044, cgraph_uid=7, symbol_order=7)

      Creating newreg=104
Removing SCRATCH in insn #17 (nop 0)
rescanning insn with uid = 17.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?r  (1) rm {*zero_extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*cmpsi_1}
            0 Scratch win: reject+=2
          alt=0,overall=14,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 17:  (0) =r  (1) 0  (2) rmWe {subsi3_carry_ccc}
      Creating newreg=105 from oldreg=104, assigning class GENERAL_REGS to r105
      Change to class INDEX_REGS for r104
   17: {flags:CCC=cmp(zero_extend(r105:SI),ltu(flags:CC,0)+zero_extend([frame:SI-0x14]));clobber r105:SI;}
      REG_UNUSED r104:SI
      REG_DEAD r88:DI
    Inserting insn reload before:
   58: r105:SI=r88:DI#4

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 22
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) q  (1) n {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) q  (1) n {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = -2
   Insn 45: point = 1, n_alt = -2
  BB 5
   Insn 52: point = 4, n_alt = -1
   Insn 31: point = 4, n_alt = 3
  BB 7
   Insn 42: point = 5, n_alt = 3
  BB 3
   Insn 18: point = 6, n_alt = -1
   Insn 17: point = 6, n_alt = 0
   Insn 58: point = 7, n_alt = 0
   Insn 16: point = 9, n_alt = 1
   Insn 15: point = 9, n_alt = 1
  BB 6
   Insn 54: point = 10, n_alt = -1
   Insn 36: point = 10, n_alt = 1
  BB 4
   Insn 29: point = 10, n_alt = -1
   Insn 28: point = 10, n_alt = 0
   Insn 27: point = 11, n_alt = 4
   Insn 26: point = 13, n_alt = 0
   Insn 25: point = 15, n_alt = 0
   Insn 24: point = 16, n_alt = 0
   Insn 23: point = 17, n_alt = 4
   Insn 22: point = 19, n_alt = 0
   Insn 21: point = 21, n_alt = 0
   Insn 20: point = 22, n_alt = 0
  BB 2
   Insn 13: point = 23, n_alt = 1
   Insn 12: point = 23, n_alt = 1
   Insn 11: point = 24, n_alt = 0
   Insn 10: point = 25, n_alt = 1
   Insn 9: point = 26, n_alt = 0
   Insn 5: point = 27, n_alt = 1
   Insn 4: point = 28, n_alt = 0
   Insn 3: point = 29, n_alt = 1
   Insn 2: point = 30, n_alt = 0
   Insn 56: point = 31, n_alt = 0
 r87: [31..31]
 r88: [8..9]
 r89: [18..19]
 r90: [10..17]
 r91: [12..13]
 r92: [10..11]
 r93: [2..5]
 r94: [0..1]
 r95: [29..30]
 r96: [27..28]
 r97: [25..26]
 r98: [23..24]
 r99: [20..22]
 r100: [20..21]
 r101: [14..16]
 r102: [14..15]
 r105: [6..7]
Compressing live ranges: from 32 to 27 - 84%
Ranges after the compression:
 r87: [26..26]
 r88: [6..7]
 r89: [14..15]
 r90: [8..13]
 r91: [10..11]
 r92: [8..9]
 r93: [2..3]
 r94: [0..1]
 r95: [24..25]
 r96: [22..23]
 r97: [20..21]
 r98: [18..19]
 r99: [16..17]
 r100: [16..17]
 r101: [12..13]
 r102: [12..13]
 r105: [4..5]

********** Assignment #1: **********

	 Assigning to 105 (cl=GENERAL_REGS, orig=104, freq=2000, tfirst=105, tfreq=2000)...
	   Assign 0 to reload r105 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=24, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 56
changing reg in insn 15
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 42
changing reg in insn 31
changing reg in insn 45
changing reg in insn 45
changing reg in insn 49
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 5
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
deleting insn with uid = 45.
starting the processing of deferred insns
ending the processing of deferred insns


memcmp

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 17 [flags]
;;  ref usage 	r0={17d,14u} r1={4d,3u} r2={2d,1u} r6={1d,26u} r7={1d,8u} r17={7d,3u} r20={1d,1u,4e} 
;;    total ref usage 93{33d,56u,4e} in 32{32 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 95 96 97 98
(note 7 1 56 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 56 7 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 56 3 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [1 size+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":16 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 size+0 S4 A64])
        (reg:SI 0 ax [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":16 79 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [1 size+4 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":16 79 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [1 size+4 S4 A32])
        (reg:SI 0 ax [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":16 79 {*movsi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:SI 0 ax [97])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [3 aptr+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":17 79 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 a+0 S4 A32])
        (reg/f:SI 0 ax [97])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":17 79 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [3 bptr+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":18 79 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 b+0 S4 A32])
        (reg/f:SI 0 ax [98])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":18 79 {*movsi_internal}
     (nil))
(insn 13 12 37 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 79 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(code_label 37 13 14 3 12 (nil) [1 uses])
(note 14 37 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 0 ax [orig:88 _1 ] [88])
        (zero_extend:DI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 120 {*zero_extendsidi2}
     (nil))
(insn 16 15 58 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:88 _1 ] [88])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [1 size+0 S4 A64]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 11 {*cmpsi_1}
     (nil))
(insn 58 16 17 3 (set (reg:SI 0 ax [104])
        (reg:SI 1 dx [ _1+4 ])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 79 {*movsi_internal}
     (nil))
(insn 17 58 18 3 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (zero_extend:DI (reg:SI 0 ax [104]))
                    (plus:DI (ltu:DI (reg:CC 17 flags)
                            (const_int 0 [0]))
                        (zero_extend:DI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                                    (const_int -20 [0xffffffffffffffec])) [1 size+4 S4 A32])))))
            (clobber (reg:SI 0 ax [104]))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 281 {subsi3_carry_ccc}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (geu (reg:CCC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 548 {*jcc}
     (nil)
 -> 40)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 99 100 101 102
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg/f:SI 1 dx [99])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 a+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 79 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 79 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg/f:SI 0 ax [orig:89 _2 ] [89])
                (plus:SI (reg:SI 0 ax [100])
                    (reg/f:SI 1 dx [99])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 a+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32]))
        (nil)))
(insn 23 22 24 4 (set (reg:QI 1 dx [orig:90 _3 ] [90])
        (mem:QI (reg/f:SI 0 ax [orig:89 _2 ] [89]) [0 *_2+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 81 {*movqi_internal}
     (nil))
(insn 24 23 25 4 (set (reg/f:SI 2 cx [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 b+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 79 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 79 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg/f:SI 0 ax [orig:91 _4 ] [91])
                (plus:SI (reg:SI 0 ax [102])
                    (reg/f:SI 2 cx [101])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 b+0 S4 A32])
            (mem/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32]))
        (nil)))
(insn 27 26 28 4 (set (reg:QI 0 ax [orig:92 _5 ] [92])
        (mem:QI (reg/f:SI 0 ax [orig:91 _4 ] [91]) [0 *_4+0 S1 A8])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 81 {*movqi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:90 _3 ] [90])
            (reg:QI 0 ax [orig:92 _5 ] [92]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 9 {*cmpqi_1}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":20 548 {*jcc}
     (nil)
 -> 34)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 93
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 52 5 (set (reg:QI 0 ax [orig:93 _7 ] [93])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":21 81 {*movqi_internal}
     (nil))
(jump_insn 52 31 53 5 (set (pc)
        (label_ref 43)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":21 549 {jump}
     (nil)
 -> 43)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

(barrier 53 52 34)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 34 53 35 6 10 (nil) [1 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 54 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [4 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 194 {*addsi_1}
     (nil))
(jump_insn 54 36 55 6 (set (pc)
        (label_ref 37)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":19 549 {jump}
     (nil)
 -> 37)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 55 54 40)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 93
(code_label 40 55 41 7 9 (nil) [1 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg:QI 0 ax [orig:93 _7 ] [93])
        (const_int 1 [0x1])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":24 81 {*movqi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              5 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 93
;; lr  def 	 0 [ax] 94
(code_label 43 42 44 8 11 (nil) [1 uses])
(note 44 43 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 44 50 8 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:94 <retval> ] [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":25 81 {*movqi_internal}
     (nil))
(insn 50 49 57 8 (use (reg/i:QI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":25 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 57 50 0 NOTE_INSN_DELETED)

;; Function memset (_Z6memsetPvhy, funcdef_no=8, decl_uid=1048, cgraph_uid=8, symbol_order=8)

      Creating newreg=101
Removing SCRATCH in insn #18 (nop 0)
rescanning insn with uid = 18.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) o  (1) riF {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) riFo {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) rm {*cmpsi_1}
            0 Scratch win: reject+=2
          alt=0,overall=14,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 18:  (0) =r  (1) 0  (2) rmWe {subsi3_carry_ccc}
      Creating newreg=102 from oldreg=101, assigning class GENERAL_REGS to r102
      Change to class INDEX_REGS for r101
   18: {flags:CCC=cmp(zero_extend(r102:SI),ltu(flags:CC,0)+zero_extend([frame:SI-0x1c]));clobber r102:SI;}
      REG_UNUSED r101:SI
      REG_DEAD r97:DI
    Inserting insn reload before:
   46: r102:SI=r97:DI#4

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 25:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=4
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1: Bad operand -- refuse
	 Choosing alt 1 in insn 26:  (0) o  (1) 0  (2) rnF {*adddi3_doubleword}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 40: point = 0, n_alt = -1
   Insn 39: point = 0, n_alt = -2
   Insn 35: point = 1, n_alt = -2
   Insn 32: point = 3, n_alt = 0
  BB 3
   Insn 19: point = 4, n_alt = -1
   Insn 18: point = 4, n_alt = 0
   Insn 46: point = 5, n_alt = 0
   Insn 17: point = 7, n_alt = 1
   Insn 16: point = 7, n_alt = 0
  BB 4
   Insn 42: point = 8, n_alt = -1
   Insn 26: point = 8, n_alt = 1
   Insn 25: point = 8, n_alt = 8
   Insn 24: point = 9, n_alt = 4
   Insn 23: point = 10, n_alt = 0
   Insn 22: point = 12, n_alt = 0
   Insn 21: point = 13, n_alt = 0
  BB 2
   Insn 14: point = 14, n_alt = 1
   Insn 13: point = 14, n_alt = 1
   Insn 12: point = 15, n_alt = 0
   Insn 8: point = 16, n_alt = 1
   Insn 7: point = 17, n_alt = 0
   Insn 6: point = 18, n_alt = 1
   Insn 5: point = 19, n_alt = 0
   Insn 4: point = 20, n_alt = 8
   Insn 3: point = 21, n_alt = 0
   Insn 2: point = 23, n_alt = 0
   Insn 44: point = 24, n_alt = 0
 r87: [24..24]
 r88: [11..13]
 r89: [8..10]
 r90: [2..3]
 r91: [0..1]
 r92: [22..23]
 r93: [20..21]
 r94: [18..19]
 r95: [16..17]
 r96: [14..15]
 r97: [6..7]
 r98: [11..12]
 r99: [8..9]
 r102: [4..5]
Compressing live ranges: from 25 to 23 - 92%
Ranges after the compression:
 r87: [22..22]
 r88: [10..11]
 r89: [8..9]
 r90: [2..3]
 r91: [0..1]
 r92: [20..21]
 r93: [18..19]
 r94: [16..17]
 r95: [14..15]
 r96: [12..13]
 r97: [6..7]
 r98: [10..11]
 r99: [8..9]
 r102: [4..5]

********** Assignment #1: **********

	 Assigning to 102 (cl=GENERAL_REGS, orig=101, freq=2000, tfirst=102, tfreq=2000)...
	   Assign 0 to reload r102 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 44
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 23
changing reg in insn 25
changing reg in insn 32
changing reg in insn 35
changing reg in insn 35
changing reg in insn 39
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
deleting insn with uid = 35.
starting the processing of deferred insns
ending the processing of deferred insns


memset

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 6 [bp] 17 [flags]
;;  ref usage 	r0={14d,12u} r1={4d,3u,1e} r2={1d} r6={1d,23u} r7={1d,5u} r17={5d,2u} r20={1d,1u,1e} 
;;    total ref usage 75{27d,46u,2e} in 26{26 regular + 0 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 92 93 94 95 96
(note 10 1 44 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 44 10 2 2 (parallel [
            (set (reg:SI 0 ax [87])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 587 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 44 3 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 value+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":27 79 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:QI 0 ax [93])
        (reg:QI 0 ax [92])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":27 81 {*movqi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 value+0 S1 A32])
        (reg:QI 0 ax [93])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":27 81 {*movqi_internal}
     (nil))
(insn 5 4 6 2 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [1 size+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":27 79 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 size+0 S4 A64])
        (reg:SI 0 ax [94])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":27 79 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [1 size+4 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":27 79 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 size+4 S4 A32])
        (reg:SI 0 ax [95])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":27 79 {*movsi_internal}
     (nil))
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [3 bufptr+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":28 79 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 buf+0 S4 A32])
        (reg/f:SI 0 ax [96])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":28 79 {*movsi_internal}
     (nil))
(insn 14 13 27 2 (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S8 A64])
        (const_int 0 [0])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 78 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97
(code_label 27 14 15 3 15 (nil) [1 uses])
(note 15 27 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:DI 0 ax [97])
        (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S8 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 78 {*movdi_internal}
     (nil))
(insn 17 16 46 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [97])
            (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [1 size+0 S4 A64]))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 11 {*cmpsi_1}
     (nil))
(insn 46 17 18 3 (set (reg:SI 0 ax [101])
        (reg:SI 1 dx [+4 ])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 79 {*movsi_internal}
     (nil))
(insn 18 46 19 3 (parallel [
            (set (reg:CCC 17 flags)
                (compare:CCC (zero_extend:DI (reg:SI 0 ax [101]))
                    (plus:DI (ltu:DI (reg:CC 17 flags)
                            (const_int 0 [0]))
                        (zero_extend:DI (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                                    (const_int -28 [0xffffffffffffffe4])) [1 size+4 S4 A32])))))
            (clobber (reg:SI 0 ax [101]))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 281 {subsi3_carry_ccc}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (geu (reg:CCC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 548 {*jcc}
     (nil)
 -> 30)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 98 99
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 1 dx [orig:88 _1 ] [88])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":30 79 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 buf+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":30 79 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg/f:SI 1 dx [orig:89 _2 ] [89])
                (plus:SI (reg:SI 1 dx [orig:88 _1 ] [88])
                    (reg/f:SI 0 ax [98])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":30 194 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 buf+0 S4 A32])
            (reg:SI 1 dx [orig:88 _1 ] [88]))
        (nil)))
(insn 24 23 25 4 (set (reg:QI 0 ax [99])
        (mem/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 value+0 S1 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":30 81 {*movqi_internal}
     (nil))
(insn 25 24 26 4 (set (mem:QI (reg/f:SI 1 dx [orig:89 _2 ] [89]) [0 *_2+0 S1 A8])
        (reg:QI 0 ax [99])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":30 81 {*movqi_internal}
     (nil))
(insn 26 25 42 4 (parallel [
            (set (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [1 i+0 S8 A64])
                (plus:DI (mem/c:DI (plus:SI (reg/f:SI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [1 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 192 {*adddi3_doubleword}
     (nil))
(jump_insn 42 26 43 4 (set (pc)
        (label_ref 27)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":29 549 {jump}
     (nil)
 -> 27)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 43 42 30)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 90 91
(code_label 30 43 31 5 14 (nil) [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 39 5 (set (reg/f:SI 0 ax [orig:90 _13 ] [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [3 bufptr+0 S4 A32])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":32 79 {*movsi_internal}
     (nil))
(insn 39 32 40 5 (set (reg/i:SI 0 ax)
        (reg/f:SI 0 ax [orig:91 <retval> ] [91])) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":33 79 {*movsi_internal}
     (nil))
(insn 40 39 45 5 (use (reg/i:SI 0 ax)) "/mnt/d/Documents/Code/LimeOS/src/arch/i686/kapi/api/memory.cpp":33 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 45 40 0 NOTE_INSN_DELETED)
